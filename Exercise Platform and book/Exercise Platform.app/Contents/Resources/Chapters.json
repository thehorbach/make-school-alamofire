[
  {
    "type": "chapter",
    "content": "## 1. First Steps\n\n#### What is computer program?\n\nA program is a list of instructions that are followed one after the other by a computer. You are most likely familliar with lists of instructions in everyday life. An example of a list of instructions would be a cooking recipe:\n\n**Fried eggs**:  \n\n1. heat 2 tablespoons of butter in a non-stick frying pan.\n2. break the eggs and slip into pan one at a time.\n3. cook until whites are completely set and yolks begin to thicken.\n4. carefully flip eggs. cook second side to desired doneness. \n5. sprinkle with salt and pepper. serve immediately.\n\nAnother example is this list of instructions on how to put on a life jacket:\n![Life jacket](https://www.weheartswift.com/wp-content/uploads/2015/02/Lifejacket_Instructions-e1433104241751.jpg)\n\nThe lists of instructions mentioned above are made to be executed by people. Computer programs are simillarly just lists of instructions but they are meant to be executed by computers. They are meant to be readable and understandable by humans but executing them would often be highly impracticable. \n\nFor example the program used for drawing a single screen in a modern game executes hundred of millions of mathematical operations like additions and multiplications. Executing such a list of instructions would take any person an embarasing amount of time, yet computers can happily do it 60 times per second.\n\n#### Why do we need a programming language?\n\nLists of instructions like cooking recipes and putting on a life jacket are quite easy to understand for humans but they're incrediblly difficult to understand for a computer. Programming languages are designed as a way of giving a computer instructions that it can easily understand. That is because a programming language (like Swift) is much less ambigous than a language like english. Also it closely resembles the way in which a computer works.\n\nIn this book you'll learn the basics of programming using Swift. More importantly this will teach you about the kind of instructions that your computer understands and building programs for it to execute.\n\nWhether you want to build an app, a game or a website the basic principles remain the same. You have to write a program for the computer to execute and writing such a program is done using a programming language.\n\n#### Why Swift?\n\nThe Swift programming language was introduced in June 2014 by Apple, since then it has grown immensly in popularity. Swift is primarly used for developing apps and games for the iPhone and the Mac and provides an easier and more enjoyable way of doing that. \n\nThe great news is that Swift is also a great programming language for learning to code because of the **Playgrounds** feature described below.\n\n#### Using Playgrounds\n\nPlaygrounds provide a fun and interactive way of writing code. Traditionally you would write a program and run it to see its results. With playgrounds you can see the results of your program imedially as you type it. This gives you a lot of opportunity for experimenting and makes learning faster.\n\nIf you have the [companion app for this book](https://www.weheartswift.com/want-to-learn-how-to-code-we-made-an-app-for-that/) than clicking on an exercise will open a playground for you to start coding. \n\nIf you don't have the companion app installed than you can open Xcode and create a new playground by clicking the \"Get started with a playground\" button. Select OS X As your Platform and choose a destination where you want to save the Playground.\n\n![Create playground](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-7.52.22-PM1.png)\n\n**Note:** If you don't have Xcode installed, download the latest version from [here](https://itunes.apple.com/us/app/xcode/id497799835?mt=12#)\n\nWe'll start looking at basic concepts one by one now. We encourage you to experiment with the code we introduce by typing the statements into a playground and changing values around.\n\n#### Variables and Constants\n\nUse the `var` keyword to declare a variable and the `let` keyword to declare a constant. Variables and constants are named values. Variable can change their value over time and constants don't. To change the value of a variable you need to asign it a new one.\n\n```swift\n// declares a variable named a that has the value 1\nvar a = 1 \n// assigns the value 2 to the variable a\na = 2\n// a has the value 2\n\n// declares a constant named one with the value 1\nlet one = 1\none = 2 // this gives an error because we cannot change the value of a constant\n```\n> the text after `//` is called a comment. Comments are ignored by the computer when executing the program. They are usually used to explain parts of code\n\n#### Naming Variables\n\nVariables should usually be named using alphabetical characters. For example: `sum`, `number`, `grade`, `money`\n\nIf you want your variable's name to contain multiple words then you should start each word in the name with an uppercase letter except for the first one. For example you want a variable that holds the number of students in a class than you should name it `numberOfStudents` instead of `numberofstudents` because the first  one is more readable.   \nThis naming convention is called CamelCase.\n\nIt's recommanded to use descriptive names for variables. But don't overdo it, for example `numberOfStudents` is a reasonable name while `numberOfStudentsInTheCurrentClass` is too long. A good rule of thumb is to use at most 3 words for the name of a variable.\n\nWe could have used a way shorter name for the variable above, for example we could have called it `n`. The disadvantage with short variable names is that they're not expressive. If you read your code after 2 months you most likely won't remember what `n` means. But `numberOfStudents` is immediately obvious.\n\nGenerally its not a good idea to have variables that consist of a single letters but there are some exceptions.  \nWhen dealing with numbers that don't represent something it's ok to use single letter names.\n\n#### Basic Operators\n\nYou can write arithmetic expressions using numbers, variables, operators and parentheses. \n\n```swift\n// The + operator returns the sum of two numbers\nlet sum = 1 + 2 // 3\n\n// The - operator returns the difference of two numbers\nlet diff = 5 - sum // 5 - 3 = 2\n\n// The * operator returns the product of two numbers\nlet mul = sum * diff // 3 * 2 = 6\n\n// The / operator returns the numbers of times the  divisor(the number on \n// the right side) divides into the dividend(the number on the left side)\n// For example, when dividing 6 by 3, the quotient is 2, while 6 is called\n// the dividend, and 3 the divisor.\n// 13 divided by 5 would be 2 while the remainder would be 3.\nlet div = mul / diff // 6 / 2 = 3\n\n// The remainder(modulo) operator returns the remainder of the division \nlet mod = 7 % 3 // 1 because 7/3 = 2 and remainder 1 (2 * 3 + 1 = 7)\n\n// You can use parentheses to group operations\n(1 + 1) * (5 - 2) \n\n// Multiplication, division and remainder have higher precedence than \n// addition and subtraction.\n// For example: 5 + 2 * 3 = 5 + 6 = 11\n```\n\n#### Integer Division\n\nAddition, subtraction and multiplication behave pretty much as you expect. The tricky operations are division and remainder.  \nTake for example `5 / 2`. Normally you'd expect the result to be `2.5`. In Swift dividing two integers also produces an integer this is acomplished by discarding the part of the number after the decimal point. So `5 / 2 = 2`.  \nThe remainder operator or modulo operator (%) is used to get the remainder of an integer division. `5 % 2 = 1`  \nFor `5 / 2`:  \n`quotient = 5 / 2 = 2`  \n`remainder = 5 % 2 = 1`  \n`quotient * 2 + remainder = 5`  \n\nGenerally speaking for two integers `a` and `b` this equations always hold  \n`quotient = a / b`  \n`remainder = a % b`  \n`b * quotient + remainder = a`\n\n**NOTICE:** `remainder = a - b * quotient`  \nThis implies that `remainder = a - b * (a / b)`  and  \n`a % b = a - b * (a / b)`  \nYou can view `a % b` as a shorthand way of computing `a - b * (a / b)`\n\n**NOTICE:** if `a % b = 0` then `b` divides `a`, that is `a` is a multiple of `b`.  \nExample:   \n`15 / 5 = 3`  \n`15 % 5 = 0` ->  \n`15 = 5 * 3`\n\n#### Order of statemets and more Playgrounds\n\nThe order of statements in a program matters. Like lists of instructions programs are executed from top to bottom.\n\n```swift\nvar numberOfApples = 7 // you have 7 apples\nvar numberOfOranges = 2 // you have 2 orages\n\n// you eat an apple (numberOfApples = 6)\nnumberOfApples = numberOfApples - 1 \n\n// a wizard doubles your oranges (numberOfOranges = 4)\nnumberOfOranges = numberOfOranges * 2 \n\nvar stashedFruits = numberOfApples + numberOfOranges // 10 (6 + 4)\n\n// you receive 2 apples (numberOfApples = 8). stashedFruits remains unchanged!\nnumberOfApples += 2 \n\nstashedFruits /= 2 // you lose half your stashed fruits 5 (10 / 2)\n```\n\nIn the program above the variable `stashedFruits` gets a value only after all the previous statements are run. Also notice that the value assigned to a variable is computed at the time of assignment. Changing `numberOfApples` after declaring `stashedFruits` will not have any effect on the value of `stashedFruits`.\n\nLooking at the code above in a playground will give you an idea of why playgrounds are incredibly helpful for visualizing how code behaves.\n\nAs you can see each line of code in a playground has the value of the expression on that line printed in the right area of the screen.\n\n![Playground 1](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-8.15.52-PM.png)\n\nNow, the cool thing is that if we modify any values. All lines are imediatelly updated to reflect our changes.\nFor example we modify:\n\n```swift\nvar numberOfApples = 25\nvar numberOfOranges = 30\n```\n\nand everything is recalculated and displayed immediately.\n\n![Playground 2](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-8.16.13-PM.png)\n\nTry playing around!\n\n#### Print Statement\n\nAfter making some computations you will want to show your results somehow. The simplest way to do it is with `print()` statement.  \n\n```swift\n// will print Hello Swift! in the console \n// you can print any text between quotes\nprint(\"Hello Swift!\") \n\nprint(1 + 2) // will print 3\n\nvar ten = 10\n\nprint(ten) // will print 10\n```\n\nTo see the console output in Playground make sure to show the `Debug Area`. \n\nYou can do that by pressing the middle button from the top right corner of the Playground.\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/09/Screen-Shot-2015-09-25-at-18.09.091-e1443194066271.png)\n\nOr from the menu:\n\n![](http://www.weheartswift.com/wp-content/uploads/2014/12/Screen-Shot-2014-12-01-at-17.38.53.png)\n\nThis is how the code from the example would look with the `Debug Area` visible:\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/09/Screen-Shot-2015-09-25-at-18.03.41-e1443193694158.png)\n\n",
    "text": "## 1. First Steps\n\n#### What is computer program?\n\nA program is a list of instructions that are followed one after the other by a computer. You are most likely familliar with lists of instructions in everyday life. An example of a list of instructions would be a cooking recipe:\n\n**Fried eggs**:  \n\n1. heat 2 tablespoons of butter in a non-stick frying pan.\n2. break the eggs and slip into pan one at a time.\n3. cook until whites are completely set and yolks begin to thicken.\n4. carefully flip eggs. cook second side to desired doneness. \n5. sprinkle with salt and pepper. serve immediately.\n\nAnother example is this list of instructions on how to put on a life jacket:\n![Life jacket](https://www.weheartswift.com/wp-content/uploads/2015/02/Lifejacket_Instructions-e1433104241751.jpg)\n\nThe lists of instructions mentioned above are made to be executed by people. Computer programs are simillarly just lists of instructions but they are meant to be executed by computers. They are meant to be readable and understandable by humans but executing them would often be highly impracticable. \n\nFor example the program used for drawing a single screen in a modern game executes hundred of millions of mathematical operations like additions and multiplications. Executing such a list of instructions would take any person an embarasing amount of time, yet computers can happily do it 60 times per second.\n\n#### Why do we need a programming language?\n\nLists of instructions like cooking recipes and putting on a life jacket are quite easy to understand for humans but they're incrediblly difficult to understand for a computer. Programming languages are designed as a way of giving a computer instructions that it can easily understand. That is because a programming language (like Swift) is much less ambigous than a language like english. Also it closely resembles the way in which a computer works.\n\nIn this book you'll learn the basics of programming using Swift. More importantly this will teach you about the kind of instructions that your computer understands and building programs for it to execute.\n\nWhether you want to build an app, a game or a website the basic principles remain the same. You have to write a program for the computer to execute and writing such a program is done using a programming language.\n\n#### Why Swift?\n\nThe Swift programming language was introduced in June 2014 by Apple, since then it has grown immensly in popularity. Swift is primarly used for developing apps and games for the iPhone and the Mac and provides an easier and more enjoyable way of doing that. \n\nThe great news is that Swift is also a great programming language for learning to code because of the **Playgrounds** feature described below.\n\n#### Using Playgrounds\n\nPlaygrounds provide a fun and interactive way of writing code. Traditionally you would write a program and run it to see its results. With playgrounds you can see the results of your program imedially as you type it. This gives you a lot of opportunity for experimenting and makes learning faster.\n\nIf you have the [companion app for this book](https://www.weheartswift.com/want-to-learn-how-to-code-we-made-an-app-for-that/) than clicking on an exercise will open a playground for you to start coding. \n\nIf you don't have the companion app installed than you can open Xcode and create a new playground by clicking the \"Get started with a playground\" button. Select OS X As your Platform and choose a destination where you want to save the Playground.\n\n![Create playground](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-7.52.22-PM1.png)\n\n**Note:** If you don't have Xcode installed, download the latest version from [here](https://itunes.apple.com/us/app/xcode/id497799835?mt=12#)\n\nWe'll start looking at basic concepts one by one now. We encourage you to experiment with the code we introduce by typing the statements into a playground and changing values around.\n\n#### Variables and Constants\n\nUse the `var` keyword to declare a variable and the `let` keyword to declare a constant. Variables and constants are named values. Variable can change their value over time and constants don't. To change the value of a variable you need to asign it a new one.\n\n```swift\n// declares a variable named a that has the value 1\nvar a = 1 \n// assigns the value 2 to the variable a\na = 2\n// a has the value 2\n\n// declares a constant named one with the value 1\nlet one = 1\none = 2 // this gives an error because we cannot change the value of a constant\n```\n> the text after `//` is called a comment. Comments are ignored by the computer when executing the program. They are usually used to explain parts of code\n\n#### Naming Variables\n\nVariables should usually be named using alphabetical characters. For example: `sum`, `number`, `grade`, `money`\n\nIf you want your variable's name to contain multiple words then you should start each word in the name with an uppercase letter except for the first one. For example you want a variable that holds the number of students in a class than you should name it `numberOfStudents` instead of `numberofstudents` because the first  one is more readable.   \nThis naming convention is called CamelCase.\n\nIt's recommanded to use descriptive names for variables. But don't overdo it, for example `numberOfStudents` is a reasonable name while `numberOfStudentsInTheCurrentClass` is too long. A good rule of thumb is to use at most 3 words for the name of a variable.\n\nWe could have used a way shorter name for the variable above, for example we could have called it `n`. The disadvantage with short variable names is that they're not expressive. If you read your code after 2 months you most likely won't remember what `n` means. But `numberOfStudents` is immediately obvious.\n\nGenerally its not a good idea to have variables that consist of a single letters but there are some exceptions.  \nWhen dealing with numbers that don't represent something it's ok to use single letter names.\n\n#### Basic Operators\n\nYou can write arithmetic expressions using numbers, variables, operators and parentheses. \n\n```swift\n// The + operator returns the sum of two numbers\nlet sum = 1 + 2 // 3\n\n// The - operator returns the difference of two numbers\nlet diff = 5 - sum // 5 - 3 = 2\n\n// The * operator returns the product of two numbers\nlet mul = sum * diff // 3 * 2 = 6\n\n// The / operator returns the numbers of times the  divisor(the number on \n// the right side) divides into the dividend(the number on the left side)\n// For example, when dividing 6 by 3, the quotient is 2, while 6 is called\n// the dividend, and 3 the divisor.\n// 13 divided by 5 would be 2 while the remainder would be 3.\nlet div = mul / diff // 6 / 2 = 3\n\n// The remainder(modulo) operator returns the remainder of the division \nlet mod = 7 % 3 // 1 because 7/3 = 2 and remainder 1 (2 * 3 + 1 = 7)\n\n// You can use parentheses to group operations\n(1 + 1) * (5 - 2) \n\n// Multiplication, division and remainder have higher precedence than \n// addition and subtraction.\n// For example: 5 + 2 * 3 = 5 + 6 = 11\n```\n\n#### Integer Division\n\nAddition, subtraction and multiplication behave pretty much as you expect. The tricky operations are division and remainder.  \nTake for example `5 / 2`. Normally you'd expect the result to be `2.5`. In Swift dividing two integers also produces an integer this is acomplished by discarding the part of the number after the decimal point. So `5 / 2 = 2`.  \nThe remainder operator or modulo operator (%) is used to get the remainder of an integer division. `5 % 2 = 1`  \nFor `5 / 2`:  \n`quotient = 5 / 2 = 2`  \n`remainder = 5 % 2 = 1`  \n`quotient * 2 + remainder = 5`  \n\nGenerally speaking for two integers `a` and `b` this equations always hold  \n`quotient = a / b`  \n`remainder = a % b`  \n`b * quotient + remainder = a`\n\n**NOTICE:** `remainder = a - b * quotient`  \nThis implies that `remainder = a - b * (a / b)`  and  \n`a % b = a - b * (a / b)`  \nYou can view `a % b` as a shorthand way of computing `a - b * (a / b)`\n\n**NOTICE:** if `a % b = 0` then `b` divides `a`, that is `a` is a multiple of `b`.  \nExample:   \n`15 / 5 = 3`  \n`15 % 5 = 0` ->  \n`15 = 5 * 3`\n\n#### Order of statemets and more Playgrounds\n\nThe order of statements in a program matters. Like lists of instructions programs are executed from top to bottom.\n\n```swift\nvar numberOfApples = 7 // you have 7 apples\nvar numberOfOranges = 2 // you have 2 orages\n\n// you eat an apple (numberOfApples = 6)\nnumberOfApples = numberOfApples - 1 \n\n// a wizard doubles your oranges (numberOfOranges = 4)\nnumberOfOranges = numberOfOranges * 2 \n\nvar stashedFruits = numberOfApples + numberOfOranges // 10 (6 + 4)\n\n// you receive 2 apples (numberOfApples = 8). stashedFruits remains unchanged!\nnumberOfApples += 2 \n\nstashedFruits /= 2 // you lose half your stashed fruits 5 (10 / 2)\n```\n\nIn the program above the variable `stashedFruits` gets a value only after all the previous statements are run. Also notice that the value assigned to a variable is computed at the time of assignment. Changing `numberOfApples` after declaring `stashedFruits` will not have any effect on the value of `stashedFruits`.\n\nLooking at the code above in a playground will give you an idea of why playgrounds are incredibly helpful for visualizing how code behaves.\n\nAs you can see each line of code in a playground has the value of the expression on that line printed in the right area of the screen.\n\n![Playground 1](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-8.15.52-PM.png)\n\nNow, the cool thing is that if we modify any values. All lines are imediatelly updated to reflect our changes.\nFor example we modify:\n\n```swift\nvar numberOfApples = 25\nvar numberOfOranges = 30\n```\n\nand everything is recalculated and displayed immediately.\n\n![Playground 2](https://www.weheartswift.com/wp-content/uploads/2015/02/Screen-Shot-2015-02-09-at-8.16.13-PM.png)\n\nTry playing around!\n\n#### Print Statement\n\nAfter making some computations you will want to show your results somehow. The simplest way to do it is with `print()` statement.  \n\n```swift\n// will print Hello Swift! in the console \n// you can print any text between quotes\nprint(\"Hello Swift!\") \n\nprint(1 + 2) // will print 3\n\nvar ten = 10\n\nprint(ten) // will print 10\n```\n\nTo see the console output in Playground make sure to show the `Debug Area`. \n\nYou can do that by pressing the middle button from the top right corner of the Playground.\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/09/Screen-Shot-2015-09-25-at-18.09.091-e1443194066271.png)\n\nOr from the menu:\n\n![](http://www.weheartswift.com/wp-content/uploads/2014/12/Screen-Shot-2014-12-01-at-17.38.53.png)\n\nThis is how the code from the example would look with the `Debug Area` visible:\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/09/Screen-Shot-2015-09-25-at-18.03.41-e1443193694158.png)\n\n",
    "name": "First Steps",
    "title": "First Steps",
    "id": "1",
    "codes": [
      {
        "type": "code",
        "content": "// declares a variable named a that has the value 1\nvar a = 1 \n// assigns the value 2 to the variable a\na = 2\n// a has the value 2\n\n// declares a constant named one with the value 1\nlet one = 1\none = 2 // this gives an error because we cannot change the value of a constant\n",
        "text": "```swift\n// declares a variable named a that has the value 1\nvar a = 1 \n// assigns the value 2 to the variable a\na = 2\n// a has the value 2\n\n// declares a constant named one with the value 1\nlet one = 1\none = 2 // this gives an error because we cannot change the value of a constant\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// The + operator returns the sum of two numbers\nlet sum = 1 + 2 // 3\n\n// The - operator returns the difference of two numbers\nlet diff = 5 - sum // 5 - 3 = 2\n\n// The * operator returns the product of two numbers\nlet mul = sum * diff // 3 * 2 = 6\n\n// The / operator returns the numbers of times the  divisor(the number on \n// the right side) divides into the dividend(the number on the left side)\n// For example, when dividing 6 by 3, the quotient is 2, while 6 is called\n// the dividend, and 3 the divisor.\n// 13 divided by 5 would be 2 while the remainder would be 3.\nlet div = mul / diff // 6 / 2 = 3\n\n// The remainder(modulo) operator returns the remainder of the division \nlet mod = 7 % 3 // 1 because 7/3 = 2 and remainder 1 (2 * 3 + 1 = 7)\n\n// You can use parentheses to group operations\n(1 + 1) * (5 - 2) \n\n// Multiplication, division and remainder have higher precedence than \n// addition and subtraction.\n// For example: 5 + 2 * 3 = 5 + 6 = 11\n",
        "text": "```swift\n// The + operator returns the sum of two numbers\nlet sum = 1 + 2 // 3\n\n// The - operator returns the difference of two numbers\nlet diff = 5 - sum // 5 - 3 = 2\n\n// The * operator returns the product of two numbers\nlet mul = sum * diff // 3 * 2 = 6\n\n// The / operator returns the numbers of times the  divisor(the number on \n// the right side) divides into the dividend(the number on the left side)\n// For example, when dividing 6 by 3, the quotient is 2, while 6 is called\n// the dividend, and 3 the divisor.\n// 13 divided by 5 would be 2 while the remainder would be 3.\nlet div = mul / diff // 6 / 2 = 3\n\n// The remainder(modulo) operator returns the remainder of the division \nlet mod = 7 % 3 // 1 because 7/3 = 2 and remainder 1 (2 * 3 + 1 = 7)\n\n// You can use parentheses to group operations\n(1 + 1) * (5 - 2) \n\n// Multiplication, division and remainder have higher precedence than \n// addition and subtraction.\n// For example: 5 + 2 * 3 = 5 + 6 = 11\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numberOfApples = 7 // you have 7 apples\nvar numberOfOranges = 2 // you have 2 orages\n\n// you eat an apple (numberOfApples = 6)\nnumberOfApples = numberOfApples - 1 \n\n// a wizard doubles your oranges (numberOfOranges = 4)\nnumberOfOranges = numberOfOranges * 2 \n\nvar stashedFruits = numberOfApples + numberOfOranges // 10 (6 + 4)\n\n// you receive 2 apples (numberOfApples = 8). stashedFruits remains unchanged!\nnumberOfApples += 2 \n\nstashedFruits /= 2 // you lose half your stashed fruits 5 (10 / 2)\n",
        "text": "```swift\nvar numberOfApples = 7 // you have 7 apples\nvar numberOfOranges = 2 // you have 2 orages\n\n// you eat an apple (numberOfApples = 6)\nnumberOfApples = numberOfApples - 1 \n\n// a wizard doubles your oranges (numberOfOranges = 4)\nnumberOfOranges = numberOfOranges * 2 \n\nvar stashedFruits = numberOfApples + numberOfOranges // 10 (6 + 4)\n\n// you receive 2 apples (numberOfApples = 8). stashedFruits remains unchanged!\nnumberOfApples += 2 \n\nstashedFruits /= 2 // you lose half your stashed fruits 5 (10 / 2)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numberOfApples = 25\nvar numberOfOranges = 30\n",
        "text": "```swift\nvar numberOfApples = 25\nvar numberOfOranges = 30\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// will print Hello Swift! in the console \n// you can print any text between quotes\nprint(\"Hello Swift!\") \n\nprint(1 + 2) // will print 3\n\nvar ten = 10\n\nprint(ten) // will print 10\n",
        "text": "```swift\n// will print Hello Swift! in the console \n// you can print any text between quotes\nprint(\"Hello Swift!\") \n\nprint(1 + 2) // will print 3\n\nvar ten = 10\n\nprint(ten) // will print 10\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 1.1 Sum\n\nYou are given two variables `a` and `b`, compute their sum and store it in another variable named `sum` then print the result.\n\n```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n[/spoiler]\n\n",
        "text": "### 1.1 Sum\n\nYou are given two variables `a` and `b`, compute their sum and store it in another variable named `sum` then print the result.\n\n```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n[/spoiler]\n\n",
        "name": "Sum",
        "title": "1.1 Sum",
        "id": "1",
        "problemStatement": "### 1.1 Sum\n\nYou are given two variables `a` and `b`, compute their sum and store it in another variable named `sum` then print the result.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 1\nvar b = 2\n\n// your code here\n",
            "text": "```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2 \n",
                "text": "```swift\nvar a = 1 \nvar b = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = 3\n",
                "text": "```swift\nsum = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2 \n```\n\n",
              "Expected values": "```swift\nsum = 3\n```\n\n",
              "Output": "```\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 13 \nvar b = 22 \n",
                "text": "```swift\nvar a = 13 \nvar b = 22 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = 35\n",
                "text": "```swift\nsum = 35\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "35\n",
                "text": "```\n35\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 13 \nvar b = 22 \n```\n\n",
              "Expected values": "```swift\nsum = 35\n```\n\n",
              "Output": "```\n35\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1 \nvar b = 2 \n```\n\nExpected values:\n```swift\nsum = 3\n```\n\nOutput: \n```\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2 \n",
                "text": "```swift\nvar a = 1 \nvar b = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = 3\n",
                "text": "```swift\nsum = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2 \n```\n\n",
              "Expected values": "```swift\nsum = 3\n```\n\n",
              "Output": "```\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13 \nvar b = 22 \n```\n\nExpected values:\n```swift\nsum = 35\n```\n\nOutput: \n```\n35\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 13 \nvar b = 22 \n",
                "text": "```swift\nvar a = 13 \nvar b = 22 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = 35\n",
                "text": "```swift\nsum = 35\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "35\n",
                "text": "```\n35\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 13 \nvar b = 22 \n```\n\n",
              "Expected values": "```swift\nsum = 35\n```\n\n",
              "Output": "```\n35\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\nvar sum = a + b\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo solve this problem we will create a variable named `sum` and initialize it with the sum of `a` and `b` (`a + b`). The next step is to print the value of `sum` using a print statement.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_1",
        "compileCode": true,
        "code": "var a = 1\nvar b = 2\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.2 Seconds\n\nDetermine the number of seconds in a year and store the number in a variable named `secondsInAYear`.\n\n```swift\n// your code here\n```\n\n[spoiler title='Hint' collapse_link='true']\n\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n[/spoiler]\n\n[spoiler title='Explanation']\nTo keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n[/spoiler]\n\n",
        "text": "### 1.2 Seconds\n\nDetermine the number of seconds in a year and store the number in a variable named `secondsInAYear`.\n\n```swift\n// your code here\n```\n\n[spoiler title='Hint' collapse_link='true']\n\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n[/spoiler]\n\n[spoiler title='Explanation']\nTo keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n[/spoiler]\n\n",
        "name": "Seconds",
        "title": "1.2 Seconds",
        "id": "2",
        "problemStatement": "### 1.2 Seconds\n\nDetermine the number of seconds in a year and store the number in a variable named `secondsInAYear`.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "// your code here\n",
            "text": "```swift\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n",
                "text": "```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n",
            "text": "[spoiler title='Explanation']\nTo keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "hints": [
          {
            "type": "spoiler",
            "content": "\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nThe number of seconds in a year is 365 times the number of seconds in a day.  \nThe number of seconds in a day is 24 times the number of seconds in a hour.  \nThe number of seconds in a hour is 60 times the number of seconds in a minute, which is 60. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n",
                "text": "```swift\nlet secondsInAMinute = 60\n\n// The number of seconds in a hour is 60 times the number \n// of seconds in a minute, which is 60.\nlet secondsInAHour = 60 * secondsInAMinute\n\n// The number of seconds in a day is 24x the number of seconds in a hour. \nlet secondsInADay = 24 * secondsInAHour\n\n// The number of seconds in a year is 365x the number of seconds in a day. \nlet secondsInAYear = 365 * secondsInADay\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n",
            "text": "[spoiler title='Explanation']\nTo keep the math simple are are going to make only one multiplication on each line. We are going to compute the number of seconds in a hour, day and year starting from the number of seconds in a minute.\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_2",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.3 Pixels\n\nYour are given the `width` and `height` of a screen in pixels. Calculate the total number of pixels on the screen and store the result in a variable named `numberOfPixels`.\n\n```swift\nvar width = 1920 \nvar height = 1080\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nConsider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n[/spoiler]\n\n",
        "text": "### 1.3 Pixels\n\nYour are given the `width` and `height` of a screen in pixels. Calculate the total number of pixels on the screen and store the result in a variable named `numberOfPixels`.\n\n```swift\nvar width = 1920 \nvar height = 1080\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nConsider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n[/spoiler]\n\n",
        "name": "Pixels",
        "title": "1.3 Pixels",
        "id": "3",
        "problemStatement": "### 1.3 Pixels\n\nYour are given the `width` and `height` of a screen in pixels. Calculate the total number of pixels on the screen and store the result in a variable named `numberOfPixels`.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var width = 1920 \nvar height = 1080\n\n// your code here\n",
            "text": "```swift\nvar width = 1920 \nvar height = 1080\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 4\nvar height = 3 \n",
                "text": "```swift\nvar width = 4\nvar height = 3 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numberOfPixels = 12\n",
                "text": "```swift\nnumberOfPixels = 12\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 4\nvar height = 3 \n```\n\n",
              "Expected values": "```swift\nnumberOfPixels = 12\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 1920\nvar height = 1080\n",
                "text": "```swift\nvar width = 1920\nvar height = 1080\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numberOfPixels = 2073600\n",
                "text": "```swift\nnumberOfPixels = 2073600\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 1920\nvar height = 1080\n```\n\n",
              "Expected values": "```swift\nnumberOfPixels = 2073600\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Consider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nConsider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "*****\n*****\n*****\n",
                "text": "```\n*****\n*****\n*****\n```\n",
                "language": "undefined"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n",
                "text": "```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 4\nvar height = 3 \n```\n\nExpected values:  \n```swift\nnumberOfPixels = 12\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 4\nvar height = 3 \n",
                "text": "```swift\nvar width = 4\nvar height = 3 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numberOfPixels = 12\n",
                "text": "```swift\nnumberOfPixels = 12\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 4\nvar height = 3 \n```\n\n",
              "Expected values": "```swift\nnumberOfPixels = 12\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 1920\nvar height = 1080\n```\n\nExpected values:  \n```swift\nnumberOfPixels = 2073600\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 1920\nvar height = 1080\n",
                "text": "```swift\nvar width = 1920\nvar height = 1080\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numberOfPixels = 2073600\n",
                "text": "```swift\nnumberOfPixels = 2073600\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 1920\nvar height = 1080\n```\n\n",
              "Expected values": "```swift\nnumberOfPixels = 2073600\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Consider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nConsider a 5x3 screen like this:\n\n```\n*****\n*****\n*****\n```\n\nThe number of pixels on this screen is 5 + 5 + 5 = 5 * 3  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "*****\n*****\n*****\n",
                "text": "```\n*****\n*****\n*****\n```\n",
                "language": "undefined"
              }
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n\n```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n",
                "text": "```swift\nvar width = 1920 \nvar height = 1080\n\nvar numberOfPixels = width * height\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe screen can be seen as a rectangle of size width x height. The number of pixels on the screen is equal to the area of the rectangle, which is `width * height`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_3",
        "compileCode": true,
        "code": "var width = 1920 \nvar height = 1080\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.4 Sum and Difference\n\nYou are given the `sum` and the `difference` of two numbers. Find out the values of the original numbers and store them in variables `a` and `b`.\n\n```swift\nlet sum = 16 // a + b \nlet diff = 4 // a - b\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']  \n`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \n`sum = a + b`  \n`b = sum - a`  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n[/spoiler]\n\n",
        "text": "### 1.4 Sum and Difference\n\nYou are given the `sum` and the `difference` of two numbers. Find out the values of the original numbers and store them in variables `a` and `b`.\n\n```swift\nlet sum = 16 // a + b \nlet diff = 4 // a - b\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']  \n`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \n`sum = a + b`  \n`b = sum - a`  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n[/spoiler]\n\n",
        "name": "Sum and Difference",
        "title": "1.4 Sum and Difference",
        "id": "4",
        "problemStatement": "### 1.4 Sum and Difference\n\nYou are given the `sum` and the `difference` of two numbers. Find out the values of the original numbers and store them in variables `a` and `b`.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let sum = 16 // a + b \nlet diff = 4 // a - b\n\n// your code here\n",
            "text": "```swift\nlet sum = 16 // a + b \nlet diff = 4 // a - b\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 16 \nvar dif = 4\n",
                "text": "```swift\nvar sum = 16 \nvar dif = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 10\nb = 6\n",
                "text": "```swift\na = 10\nb = 6\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 16 \nvar dif = 4\n```\n\n",
              "Expected values": "```swift\na = 10\nb = 6\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 2 \nvar dif = 0\n",
                "text": "```swift\nvar sum = 2 \nvar dif = 0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 1\nb = 1\n",
                "text": "```swift\na = 1\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 2 \nvar dif = 0\n```\n\n",
              "Expected values": "```swift\na = 1\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 4 \nvar dif = 2\n",
                "text": "```swift\nvar sum = 4 \nvar dif = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 3\nb = 1\n",
                "text": "```swift\na = 3\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 4 \nvar dif = 2\n```\n\n",
              "Expected values": "```swift\na = 3\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \n`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`sum = a + b`  \n`b = sum - a`  \n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`sum = a + b`  \n`b = sum - a`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n",
                "text": "```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n",
                "text": "```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n",
                "language": "undefined"
              }
            ]
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 16 \nvar dif = 4\n```\n\nExpected values:\n```swift\na = 10\nb = 6\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 16 \nvar dif = 4\n",
                "text": "```swift\nvar sum = 16 \nvar dif = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 10\nb = 6\n",
                "text": "```swift\na = 10\nb = 6\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 16 \nvar dif = 4\n```\n\n",
              "Expected values": "```swift\na = 10\nb = 6\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 2 \nvar dif = 0\n```\n\nExpected values:\n```swift\na = 1\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 2 \nvar dif = 0\n",
                "text": "```swift\nvar sum = 2 \nvar dif = 0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 1\nb = 1\n",
                "text": "```swift\na = 1\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 2 \nvar dif = 0\n```\n\n",
              "Expected values": "```swift\na = 1\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar sum = 4 \nvar dif = 2\n```\n\nExpected values:\n```swift\na = 3\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var sum = 4 \nvar dif = 2\n",
                "text": "```swift\nvar sum = 4 \nvar dif = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 3\nb = 1\n",
                "text": "```swift\na = 3\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar sum = 4 \nvar dif = 2\n```\n\n",
              "Expected values": "```swift\na = 3\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \n`sum + diff = a + a + b - b`  \n`sum + diff = 2 * a`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`sum = a + b`  \n`b = sum - a`  \n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`sum = a + b`  \n`b = sum - a`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n",
                "text": "```swift\nlet sum = 16 // a + b\nlet diff = 4 // a - b\n\n// sum + diff = a + b + a - b = a + a = 2*a \n// -> sum + diff = 2*a \n// -> a = (sum + diff) / 2\n\nvar a = (sum + diff) / 2 // 10\nvar b = sum - a // 6\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe notice that if we add the sum and the difference of two numbers we get the double of one of them:\n\n```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n\nTo get one of the numbers (`a`) we will half the sum of `sum` and `diff`. \nTo get the other one (`b`) we can subtract the first one (`a`) from their `sum`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n",
                "text": "```\nsum + diff = \n(a + b) + (a - b) = \na + a = 2*a \n```\n",
                "language": "undefined"
              }
            ]
          }
        ],
        "playgroundName": "Exercise1_4",
        "compileCode": true,
        "code": "let sum = 16 // a + b \nlet diff = 4 // a - b\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.5 L Area\n\nYou are given four variables `width`, `height`, `x`, `y` that describe the dimensions of a L-shape as shown in the image below. Determine the `perimeter` and `area` of the described L-shape. Store the value of the perimeter in a variable named `perimeter`, and the area in a variable named `area`.\n\n![](http://www.weheartswift.com/wp-content/uploads/2014/10/l-shape-e1414514986551.png)\n\n```swift\nvar width = 8\nvar height = 12\nvar x = 2\nvar y = 3\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link='true']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n[/spoiler]\n\n",
        "text": "### 1.5 L Area\n\nYou are given four variables `width`, `height`, `x`, `y` that describe the dimensions of a L-shape as shown in the image below. Determine the `perimeter` and `area` of the described L-shape. Store the value of the perimeter in a variable named `perimeter`, and the area in a variable named `area`.\n\n![](http://www.weheartswift.com/wp-content/uploads/2014/10/l-shape-e1414514986551.png)\n\n```swift\nvar width = 8\nvar height = 12\nvar x = 2\nvar y = 3\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link='true']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n[/spoiler]\n\n",
        "name": "L Area",
        "title": "1.5 L Area",
        "id": "5",
        "problemStatement": "### 1.5 L Area\n\nYou are given four variables `width`, `height`, `x`, `y` that describe the dimensions of a L-shape as shown in the image below. Determine the `perimeter` and `area` of the described L-shape. Store the value of the perimeter in a variable named `perimeter`, and the area in a variable named `area`.\n\n![](http://www.weheartswift.com/wp-content/uploads/2014/10/l-shape-e1414514986551.png)\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var width = 8\nvar height = 12\nvar x = 2\nvar y = 3\n\n// your code here\n",
            "text": "```swift\nvar width = 8\nvar height = 12\nvar x = 2\nvar y = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n",
                "text": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "perimeter = 40\narea = 60\n",
                "text": "```swift\nperimeter = 40\narea = 60\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\n",
              "Expected values": "```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n",
                "text": "```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "perimeter = 24\narea = 20\n",
                "text": "```swift\nperimeter = 24\narea = 20\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\n",
              "Expected values": "```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n",
            "text": "[spoiler title=\"Hint\" collapse_link='true']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n",
                "text": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\nExpected values:\n```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n",
                "text": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "perimeter = 40\narea = 60\n",
                "text": "```swift\nperimeter = 40\narea = 60\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n```\n",
              "Expected values": "```swift\nperimeter = 40\narea = 60\n```\n![Example1](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle1-e1423241137674.png)\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\nExpected values:\n```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n",
                "text": "```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "perimeter = 24\narea = 20\n",
                "text": "```swift\nperimeter = 24\narea = 20\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar width = 8 \nvar height = 4\nvar x = 2\nvar y = 2\n```\n\n",
              "Expected values": "```swift\nperimeter = 24\narea = 20\n```\n\n![Example2](https://www.weheartswift.com/wp-content/uploads/2015/02/rectangle2-e1423241026456.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n",
            "text": "[spoiler title=\"Hint\" collapse_link='true']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.   \n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n",
                "text": "```swift\nvar width = 8\nvar height = 12\nvar x = 4\nvar y = 3\n\nvar perimeter = 2 * (width + height)\n\nvar bigArea = width * height\nvar smallArea = (width - x) * (height - y)\nvar area = bigArea - smallArea\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe `perimeter` of the L-shape is the same as of a rectangle of size `width X height`.  Which is equal to 2 * (width + height).\n\nTo compute the `area` you can imagine the L-shape as rectangle of size `width X height` with a rectangle of size `(width-x) X (height-y)` cut out. We compute the area of the big rectangle as `width * height` and the area of the small rectangle as `(width - x) * (height - y)`. Their difference gives us the total area.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_5",
        "compileCode": true,
        "code": "var width = 8\nvar height = 12\nvar x = 2\nvar y = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.6 Swap\n\nGiven two variable `a` and `b`, swap their values. That is the new value of `a` will become the old value of `b` and vice versa.\n\n```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\n\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nUse a third variable to save the original value of `a`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n[/spoiler]\n\n",
        "text": "### 1.6 Swap\n\nGiven two variable `a` and `b`, swap their values. That is the new value of `a` will become the old value of `b` and vice versa.\n\n```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\n\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nUse a third variable to save the original value of `a`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n[/spoiler]\n\n",
        "name": "Swap",
        "title": "1.6 Swap",
        "id": "6",
        "problemStatement": "### 1.6 Swap\n\nGiven two variable `a` and `b`, swap their values. That is the new value of `a` will become the old value of `b` and vice versa.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 1\nvar b = 2\n\n// your code here\n",
            "text": "```swift\nvar a = 1\nvar b = 2\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 2\nb = 1\n",
                "text": "```swift\na = 2\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1\nvar b = 2\n```\n\n",
              "Expected values": "```swift\na = 2\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 13\nvar b = 7582\n",
                "text": "```swift\nvar a = 13\nvar b = 7582\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 7582\nb = 13\n",
                "text": "```swift\na = 7582\nb = 13\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 13\nvar b = 7582\n```\n\n",
              "Expected values": "```swift\na = 7582\nb = 13\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\n\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a third variable to save the original value of `a`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nUse a third variable to save the original value of `a`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 1\nvar b = 2\n```\n\nExpected values:\n```swift\na = 2\nb = 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 2\nb = 1\n",
                "text": "```swift\na = 2\nb = 1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1\nvar b = 2\n```\n\n",
              "Expected values": "```swift\na = 2\nb = 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 13\nvar b = 7582\n```\n\nExpected values:\n```swift\na = 7582\nb = 13\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 13\nvar b = 7582\n",
                "text": "```swift\nvar a = 13\nvar b = 7582\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "a = 7582\nb = 13\n",
                "text": "```swift\na = 7582\nb = 13\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 13\nvar b = 7582\n```\n\n",
              "Expected values": "```swift\na = 7582\nb = 13\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\n\nJust assigning `a` to the value of `b` and `b` to the value of `a` will not work.  \n\n```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\na = b // a will have the value 2. The original value of a is lost\nb = a // b will remain the same\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a third variable to save the original value of `a`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nUse a third variable to save the original value of `a`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n",
                "text": "```swift\nvar a = 1\nvar b = 2\n\nvar temp = a\na = b\nb = temp\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll keep a backup of the value of `a` in a new variable `temp`. We'll assign `a` to `b` which will overwrite the current value of `a` (`a` will now be equal to `b`). Next we assign to `b` the backed up value of `a` which is stored in `temp`. A useful analogy: Imagine you have 2 glasses and you want to interchange their contents. To accomplish this, you'll have to use a 3rd glass to temporarly hold the contents of one of them.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_6",
        "compileCode": true,
        "code": "var a = 1\nvar b = 2\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.7 Last digit\n\nYou are given a number `a`. Print the last digit of `a`.\n\n```swift\nvar a = 123\n\n// your code here\n```\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\nUse the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 123\n\nprint(a % 10)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\nYou can get the last digit of a number by computing the reminder of division by `10`. \n[/spoiler]\n\n\n",
        "text": "### 1.7 Last digit\n\nYou are given a number `a`. Print the last digit of `a`.\n\n```swift\nvar a = 123\n\n// your code here\n```\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\nUse the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 123\n\nprint(a % 10)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\nYou can get the last digit of a number by computing the reminder of division by `10`. \n[/spoiler]\n\n\n",
        "name": "Last digit",
        "title": "1.7 Last digit",
        "id": "7",
        "problemStatement": "### 1.7 Last digit\n\nYou are given a number `a`. Print the last digit of `a`.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 123\n\n// your code here\n",
            "text": "```swift\nvar a = 123\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 123\n",
                "text": "```swift\nvar a = 123\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 123\n```\n\n",
              "Output": "```\n3\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 337\n",
                "text": "```swift\nvar a = 337\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7\n",
                "text": "```\n7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 337\n```\n\n",
              "Output": "```\n7\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 100\n",
                "text": "```swift\nvar a = 100\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0\n",
                "text": "```\n0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 100\n```\n\n",
              "Output": "```\n0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 123\n\nprint(a % 10)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 123\n\nprint(a % 10)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 123\n\nprint(a % 10)\n",
                "text": "```swift\nvar a = 123\n\nprint(a % 10)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "You can get the last digit of a number by computing the reminder of division by `10`. \n",
            "text": "[spoiler title='Explanation']\nYou can get the last digit of a number by computing the reminder of division by `10`. \n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 123\n```\n\nOutput:\n```\n3\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 123\n",
                "text": "```swift\nvar a = 123\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 123\n```\n\n",
              "Output": "```\n3\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 337\n```\n\nOutput:\n```\n7\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 337\n",
                "text": "```swift\nvar a = 337\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7\n",
                "text": "```\n7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 337\n```\n\n",
              "Output": "```\n7\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 100\n```\n\nOutput:\n```\n0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 100\n",
                "text": "```swift\nvar a = 100\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0\n",
                "text": "```\n0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 100\n```\n\n",
              "Output": "```\n0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse the remainder `%` operator.  \nRemember that `a = k * (a / k) + a % k`  \nCan you think of a value for k that gives the last digit?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 123\n\nprint(a % 10)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 123\n\nprint(a % 10)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 123\n\nprint(a % 10)\n",
                "text": "```swift\nvar a = 123\n\nprint(a % 10)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "You can get the last digit of a number by computing the reminder of division by `10`. \n",
            "text": "[spoiler title='Explanation']\nYou can get the last digit of a number by computing the reminder of division by `10`. \n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_7",
        "compileCode": true,
        "code": "var a = 123\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.8 Dog Years\n\nYou are given Rocky's age in dog years. Print Rocky's age in human years. You know that 1 human year is 7 dog years.\n\n```swift\nvar rockysAge = 50\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse division.\n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n[/spoiler]\n\n",
        "text": "### 1.8 Dog Years\n\nYou are given Rocky's age in dog years. Print Rocky's age in human years. You know that 1 human year is 7 dog years.\n\n```swift\nvar rockysAge = 50\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse division.\n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n[/spoiler]\n\n",
        "name": "Dog Years",
        "title": "1.8 Dog Years",
        "id": "8",
        "problemStatement": "### 1.8 Dog Years\n\nYou are given Rocky's age in dog years. Print Rocky's age in human years. You know that 1 human year is 7 dog years.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var rockysAge = 50\n\n// your code here\n",
            "text": "```swift\nvar rockysAge = 50\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 50\n",
                "text": "```swift\nvar rockysAge = 50\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7\n",
                "text": "```\n7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 50\n```\n\n",
              "Output": "```\n7\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 14\n",
                "text": "```swift\nvar rockysAge = 14\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 14\n```\n\n",
              "Output": "```\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 15\n",
                "text": "```swift\nvar rockysAge = 15\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 15\n```\n\n",
              "Output": "```\n2\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use division.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse division.\n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n",
                "text": "```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 50\n```\n\nOutput:\n```\n7\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 50\n",
                "text": "```swift\nvar rockysAge = 50\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7\n",
                "text": "```\n7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 50\n```\n\n",
              "Output": "```\n7\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 14\n```\n\nOutput:\n```\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 14\n",
                "text": "```swift\nvar rockysAge = 14\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 14\n```\n\n",
              "Output": "```\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar rockysAge = 15\n```\n\nOutput:\n```\n2\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 15\n",
                "text": "```swift\nvar rockysAge = 15\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar rockysAge = 15\n```\n\n",
              "Output": "```\n2\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use division.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse division.\n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n",
                "text": "```swift\nvar rockysAge = 50\n\nvar rockysAgeInHumanYears = rockysAge / 7\n\nprint(rockysAgeInHumanYears) // 7\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe problem is solved using a division by `7`. If `7` dog years = `1` human year then `X` dog years is equal to `X / 7` human years.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_8",
        "compileCode": true,
        "code": "var rockysAge = 50\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.9 Brothers\n\nEveryone hates solving word problems by hand so let's make a program to solve them for us.  \n`x` years from now Alice will be `y` times older than her brother Bob. Bob is `12` years old. How many years does Alice have?  \n\n[spoiler title=\"Code\" collapse_link=\"true\" compile=\"false\"]\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \n`alice + x = y * (bob + x)`  \nSolve for `alice` \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n[/spoiler]\n\n",
        "text": "### 1.9 Brothers\n\nEveryone hates solving word problems by hand so let's make a program to solve them for us.  \n`x` years from now Alice will be `y` times older than her brother Bob. Bob is `12` years old. How many years does Alice have?  \n\n[spoiler title=\"Code\" collapse_link=\"true\" compile=\"false\"]\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \n`alice + x = y * (bob + x)`  \nSolve for `alice` \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n[/spoiler]\n\n",
        "name": "Brothers",
        "title": "1.9 Brothers",
        "id": "9",
        "problemStatement": "### 1.9 Brothers\n\nEveryone hates solving word problems by hand so let's make a program to solve them for us.  \n`x` years from now Alice will be `y` times older than her brother Bob. Bob is `12` years old. How many years does Alice have?  \n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n```\n",
            "text": "[spoiler title=\"Code\" collapse_link=\"true\" compile=\"false\"]\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n",
                "text": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 3\nvar y = 2\nvar bob = 12\n",
                "text": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "alice = 27\n",
                "text": "```swift\nalice = 27\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\n",
              "Expected values": "```swift\nalice = 27\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 3\nvar bob = 12\n",
                "text": "```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "alice = 38\n",
                "text": "```swift\nalice = 38\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\n",
              "Expected values": "```swift\nalice = 38\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "`alice + x = y * (bob + x)`  \nSolve for `alice` \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \n`alice + x = y * (bob + x)`  \nSolve for `alice` \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n",
                "text": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 27\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 3\nvar y = 2\nvar bob = 12\n",
                "text": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "alice = 27\n",
                "text": "```swift\nalice = 27\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n```\n\n",
              "Expected values": "```swift\nalice = 27\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\nExpected values:\n```swift\nalice = 38\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 3\nvar bob = 12\n",
                "text": "```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "alice = 38\n",
                "text": "```swift\nalice = 38\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 1\nvar y = 3\nvar bob = 12\n```\n\n",
              "Expected values": "```swift\nalice = 38\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "`alice + x = y * (bob + x)`  \nSolve for `alice` \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \n`alice + x = y * (bob + x)`  \nSolve for `alice` \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n",
                "text": "```swift\nvar x = 3\nvar y = 2\nvar bob = 12\n\n// alice + x = (bob + x) * y\n// alice = (bob + x) * y - x\nvar alice = (bob + x) * y - x\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe know that `x` years from now Alice will be `y` times older then her brother. We also know that her brother is currently 12 years old. Mathematically we can say that `alice + x = y * (bob + x)`. Solving this equation for `alice` gives us `alice = y * (bob + x) - x`. This can be straightforwardly written in code.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_9",
        "compileCode": false,
        "code": "var x = 3\nvar y = 2\nvar bob = 12 \n\nvar alice = ?\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.10 Apples and Oranges\n\nYou have `x` apples. Bob trades `3` oranges for `5` apples. He does not accept trades with cut fruit.  \nHow many oranges can you get from Bob and how many apples will you have left?\n\nThe number of apples you will have left should be stored in a variable named `apples`. The number of oranges you will have after the trade should be stored in a variable named `oranges`.\n\n```swift\nvar x = 17\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse the division(`/`) and the remainder(`%`) operator  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n[/spoiler]\n\n",
        "text": "### 1.10 Apples and Oranges\n\nYou have `x` apples. Bob trades `3` oranges for `5` apples. He does not accept trades with cut fruit.  \nHow many oranges can you get from Bob and how many apples will you have left?\n\nThe number of apples you will have left should be stored in a variable named `apples`. The number of oranges you will have after the trade should be stored in a variable named `oranges`.\n\n```swift\nvar x = 17\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse the division(`/`) and the remainder(`%`) operator  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n[/spoiler]\n\n",
        "name": "Apples and Oranges",
        "title": "1.10 Apples and Oranges",
        "id": "10",
        "problemStatement": "### 1.10 Apples and Oranges\n\nYou have `x` apples. Bob trades `3` oranges for `5` apples. He does not accept trades with cut fruit.  \nHow many oranges can you get from Bob and how many apples will you have left?\n\nThe number of apples you will have left should be stored in a variable named `apples`. The number of oranges you will have after the trade should be stored in a variable named `oranges`.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var x = 17\n\n// your code here\n",
            "text": "```swift\nvar x = 17\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 17\n",
                "text": "```swift\nvar x = 17\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 2\noranges = 9\n",
                "text": "```swift\napples = 2\noranges = 9\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 17\n```\n\n",
              "Expected values": "```swift\napples = 2\noranges = 9\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 25\n",
                "text": "```swift\nvar x = 25\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 0\noranges = 15\n",
                "text": "```swift\napples = 0\noranges = 15\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 25\n```\n\n",
              "Expected values": "```swift\napples = 0\noranges = 15\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 4\n",
                "text": "```swift\nvar x = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 4\noranges = 0\n",
                "text": "```swift\napples = 4\noranges = 0\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 4\n```\n\n",
              "Expected values": "```swift\napples = 4\noranges = 0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the division(`/`) and the remainder(`%`) operator  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the division(`/`) and the remainder(`%`) operator  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n",
                "text": "```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n",
            "text": "[spoiler title='Explanation']\n\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 17\n```\n\nExpected values:\n```swift\napples = 2\noranges = 9\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 17\n",
                "text": "```swift\nvar x = 17\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 2\noranges = 9\n",
                "text": "```swift\napples = 2\noranges = 9\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 17\n```\n\n",
              "Expected values": "```swift\napples = 2\noranges = 9\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 25\n```\n\nExpected values:\n```swift\napples = 0\noranges = 15\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 25\n",
                "text": "```swift\nvar x = 25\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 0\noranges = 15\n",
                "text": "```swift\napples = 0\noranges = 15\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 25\n```\n\n",
              "Expected values": "```swift\napples = 0\noranges = 15\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \n\nInput:\n```swift\nvar x = 4\n```\n\nExpected values:\n```swift\napples = 4\noranges = 0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 4\n",
                "text": "```swift\nvar x = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "apples = 4\noranges = 0\n",
                "text": "```swift\napples = 4\noranges = 0\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 4\n```\n\n",
              "Expected values": "```swift\napples = 4\noranges = 0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the division(`/`) and the remainder(`%`) operator  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the division(`/`) and the remainder(`%`) operator  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n",
                "text": "```swift\nvar x = 17\n\nvar apples = x % 5\nvar oranges = x / 5 * 3\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n",
            "text": "[spoiler title='Explanation']\n\nBob trades 3 oranges for 5 apples. If the number of apples we have would be divideable by 5 then we could trade all our apples for oranges. The number of oranges we would have would be `(x / 5) * 3` and the number of apples would be `0`. If the number of apples we have is not divisible by 5 then we can still get the number of oranges using `(x / 5) * 3` because integer divison ignores any remainder. The number of apples we would be left with would be exactly the reminder of our division that is `x % 5`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_10",
        "compileCode": true,
        "code": "var x = 17\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 1.11 Boys and Girls\n\nA class consists of `numberOfBoys` boys and `numberOfGirls` girls.   \nPrint the percentage of boys in the class followed by the percentage of girls in the class. The percentage should be printed rounded down to the nearest integer.   For example `33.333333333333` will be printed as `33`.\n\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nFirst you'll have to compute the total number of students in the class \n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']  \n`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']  \n`numberOfStudents / 100` = `numberOfBoys / X`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n[/spoiler]\n",
        "text": "### 1.11 Boys and Girls\n\nA class consists of `numberOfBoys` boys and `numberOfGirls` girls.   \nPrint the percentage of boys in the class followed by the percentage of girls in the class. The percentage should be printed rounded down to the nearest integer.   For example `33.333333333333` will be printed as `33`.\n\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nFirst you'll have to compute the total number of students in the class \n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']  \n`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']  \n`numberOfStudents / 100` = `numberOfBoys / X`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n[/spoiler]\n",
        "name": "Boys and Girls",
        "title": "1.11 Boys and Girls",
        "id": "11",
        "problemStatement": "### 1.11 Boys and Girls\n\nA class consists of `numberOfBoys` boys and `numberOfGirls` girls.   \nPrint the percentage of boys in the class followed by the percentage of girls in the class. The percentage should be printed rounded down to the nearest integer.   For example `33.333333333333` will be printed as `33`.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numberOfBoys = 20\nvar numberOfGirls = 60\n\n// your code here\n",
            "text": "```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20  \nvar numberOfGirls = 60  \n",
                "text": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "25 // percentage of boys\n75 // percentage of girls\n",
                "text": "```\n25 // percentage of boys\n75 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\n",
              "Output": "```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20  \nvar numberOfGirls = 20  \n",
                "text": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "50 // percentage of boys\n50 // percentage of girls\n",
                "text": "```\n50 // percentage of boys\n50 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\n",
              "Output": "```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 10  \nvar numberOfGirls = 20  \n",
                "text": "```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33 // percentage of boys\n66 // percentage of girls\n",
                "text": "```\n33 // percentage of boys\n66 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\n",
              "Output": "```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "First you'll have to compute the total number of students in the class \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nFirst you'll have to compute the total number of students in the class \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \n`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`numberOfStudents / 100` = `numberOfBoys / X`\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`numberOfStudents / 100` = `numberOfBoys / X`\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n",
                "text": "```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "1",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\nOutput:\n```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20  \nvar numberOfGirls = 60  \n",
                "text": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "25 // percentage of boys\n75 // percentage of girls\n",
                "text": "```\n25 // percentage of boys\n75 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 60  \n```\n\n",
              "Output": "```\n25 // percentage of boys\n75 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20  \nvar numberOfGirls = 20  \n",
                "text": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "50 // percentage of boys\n50 // percentage of girls\n",
                "text": "```\n50 // percentage of boys\n50 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 20  \nvar numberOfGirls = 20  \n```\n\n",
              "Output": "```\n50 // percentage of boys\n50 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\nOutput:\n```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 10  \nvar numberOfGirls = 20  \n",
                "text": "```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33 // percentage of boys\n66 // percentage of girls\n",
                "text": "```\n33 // percentage of boys\n66 // percentage of girls\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfBoys = 10  \nvar numberOfGirls = 20  \n```\n\n",
              "Output": "```\n33 // percentage of boys\n66 // percentage of girls\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "First you'll have to compute the total number of students in the class \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nFirst you'll have to compute the total number of students in the class \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \n`numberOfStudents` ... `100%`  \n`numberOfBoys` ... `X%`  \n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`numberOfStudents / 100` = `numberOfBoys / X`\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`numberOfStudents / 100` = `numberOfBoys / X`\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n",
                "text": "```swift\nvar numberOfBoys = 20\nvar numberOfGirls = 60\n\nvar numberOfStudents = numberOfBoys + numberOfGirls\nvar boyPercentage = numberOfBoys * 100 / numberOfStudents\nprint(boyPercentage)\nvar girlPercentage = numberOfGirls * 100 / numberOfStudents \nprint(girlPercentage)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe problem can be solved using [Cross Multiplication](http://en.wikipedia.org/wiki/Cross-multiplication). `numberOfStudents / 100 = numberOfBoys / boyPercentage`. This gives us `boyPercentage = numberOfBoys * 100 / numberOfStudents`. Simillarly for the girl percentage we have `numberOfStudents / 100 = numberOfGirls / girlPercentage` giving us `girlPercentage = numberOfGirls * 100 / numberOfStudents`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise1_11",
        "compileCode": true,
        "code": "var numberOfBoys = 20\nvar numberOfGirls = 60\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 2. Conditionals\n\n#### Introduction\n\nSometimes you want to run some code only **if** some conditions are met. For example:\n\n```swift\nvar numberOfOranges = 1\nvar numberOfApples = 5\n\nif numberOfApples > numberOfOranges {\n\tprint(\"You have more apples than oranges!\")\n}\n```\n\nYou can compare numbers using these operators:\n- `<` Less than\n- `<=` Less than or equal\n- `>` Greater than\n- `>=` Greater than or equal\n- `==` Equal\n- `!=` Not equal\n\n```swift\n1 != 2 // true\n1 == 2 // false\n1 < 2 // true\n1 > 2 // false\n1 <= 2 // true\n3 >= 3 // true\n```\n\n#### Anatomy of an if statement\n\nAn `if` statement has the following form:\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n\nThe statements between curly braces (`{}`) will only be executed if the given condition is `true`! The statements that follow after the curly brace ends will be executed independently of the condition.\n\nAn if statement can also have an `else` branch:\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n} else {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\n}\n```\n\nThe statements in the `else` branch i.e. between `else {` and `}` will only be executed if the condition is false.\n\nConsider the following code as an example:\n\n```swift\nvar money = 20 // you have 20$\nvar burgerPrice = 10 // you ate a good burger\n\n// if you have enough money pay for the burger\nif money >=  burgerPrice {\n    print(\"pay burger\")\n    money -= burgerPrice\n} else {\n// otherwise you will need to go wash dishes to pay for your meal\n// hopefully this will not be the case\n    print(\"wash dishes\")\n}\n\n// if you have some money left order desert\nif money > 0 {\n    print(\"order desert\")\n}\n```\n\n\n#### Nesting conditions\n\nIf statements can be nested inside other if statements.\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\t\n\tif CONDITION2 {\n\t\tSTATEMENT\n\t\tSTATEMENT\n\t\t...\n\t\tSTATEMENT\t\n\t}\n\t\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n\nFor example lets say we have two variables `age` and `money`. We'll write some code to determine if you can buy a car that costs 20000. For this you'll need at least 20000 money and at least an age of 18:\n\n```swift\nvar age = 23\nvar money = 25000\n\nif age >= 18 {\n\tif money >= 20000 {\n\t\tprint(\"Getting a new car, baby!\")\n\t} else {\n\t\tprint(\"Sorry, you don't have enough money.\")\n\t}\n} else {\n\tprint(\"Sorry, you're not old enough.\")\n}\n```\n\n\n#### Multiple conditions\n\nMutiple conditions can be chained together using the `&&` (AND) operator and the `||` (OR) operator\n\nThe `&&` (AND) operator is used to check if two conditions are simultaneously true.\nFor example consider we have the age of a person stored in a variable `age` and want to determine if the person is a teenager (age is between 13 and 19). We have to check that the age is greater than or equal to 13 **AND** less than or equal to 19. This is accomplished by the code below:\n\n```swift\nvar age = 18\nif age >= 13 && age <= 19 {\n\tprint(\"Teenager\")\n}\n```\n\nThis is equivalent to the following code:\n\n```swift\nvar age = 18\nif age >= 13 {\n\tif age <= 19 {\n\t\tprint(\"Teenager\")\n\t}\t\n}\n```\n\nThe `||` (OR) operator is used to check that at least one of two conditions is true.\n\nConsider again that we have the age of a person stored in a variable `age`. We want to print a warning if the age is less than or equal to 0 **OR** the age is greater than or equal to 100. This is accomplished by the code below:\n```swift\nvar age = 123\nif age <= 0 || age >= 100 {\n\tprint(\"Warning age is probably incorrect!\")\n}\n```\n\n**Note:** The **OR** in programming is not equivalent to the or in everyday language. If someone asks you if you want beef or chicken that means that you can have only one of two. In programming an or statement is also `true` when both conditions are `true` at the same time. For example:\n\n```swift\n\nvar numberOfSisters = 1\nvar numberOfBrothers = 2\n\nif numberOfSisters > 0 || numberOfBrothers > 0 {\n\tprint(\"Has siblings\")\n}\n```\n\nTo get a better understanding of how **AND**(**`&&`**) and **OR**(**`||`**) behave have a look at the truth tables below:\n\n```swift\n// AND\ntrue && true // true\ntrue && false // false\nfalse && true // false\nfalse && false // false\n\n// OR\ntrue || true // true\ntrue || false // true\nfalse || true // true\nfalse || false // false\n```\n\n#### Negating a condition\n\nYou can negate a condition using the `!` operator. A negated condition has oposite value to the original condition. i.e. if the initial condition was `true` than it's negation is `false`. If the initial condition is `false` than it's negation is `true`.\n\nFor example if we wanted to check if an age is **NOT** the age of a teenager we could use the following code\n\n```swift\nvar age = 18\nif !(age >= 13 && age <= 19) {\n\tprint(\"Not a teenager!\")\n}\n```\n\n**Note:**\n```swift\nif condition {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n}\n```\nis equivalent of :\n```swift\nif !condition {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n}\n```\n\n**Note:** If you have an if statement with an else branch than it's not recommended to negate the condition.\n\nThe below table shows the values of negating some conditions:\n\n```swift\n!true // false\n!false // true\n!(true && true) // false\n!(true || false) // false\n!(false || false) // true\n```\n",
    "text": "## 2. Conditionals\n\n#### Introduction\n\nSometimes you want to run some code only **if** some conditions are met. For example:\n\n```swift\nvar numberOfOranges = 1\nvar numberOfApples = 5\n\nif numberOfApples > numberOfOranges {\n\tprint(\"You have more apples than oranges!\")\n}\n```\n\nYou can compare numbers using these operators:\n- `<` Less than\n- `<=` Less than or equal\n- `>` Greater than\n- `>=` Greater than or equal\n- `==` Equal\n- `!=` Not equal\n\n```swift\n1 != 2 // true\n1 == 2 // false\n1 < 2 // true\n1 > 2 // false\n1 <= 2 // true\n3 >= 3 // true\n```\n\n#### Anatomy of an if statement\n\nAn `if` statement has the following form:\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n\nThe statements between curly braces (`{}`) will only be executed if the given condition is `true`! The statements that follow after the curly brace ends will be executed independently of the condition.\n\nAn if statement can also have an `else` branch:\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n} else {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\n}\n```\n\nThe statements in the `else` branch i.e. between `else {` and `}` will only be executed if the condition is false.\n\nConsider the following code as an example:\n\n```swift\nvar money = 20 // you have 20$\nvar burgerPrice = 10 // you ate a good burger\n\n// if you have enough money pay for the burger\nif money >=  burgerPrice {\n    print(\"pay burger\")\n    money -= burgerPrice\n} else {\n// otherwise you will need to go wash dishes to pay for your meal\n// hopefully this will not be the case\n    print(\"wash dishes\")\n}\n\n// if you have some money left order desert\nif money > 0 {\n    print(\"order desert\")\n}\n```\n\n\n#### Nesting conditions\n\nIf statements can be nested inside other if statements.\n\n```swift\nif CONDITION {\n\tSTATEMENT\n\t\n\tif CONDITION2 {\n\t\tSTATEMENT\n\t\tSTATEMENT\n\t\t...\n\t\tSTATEMENT\t\n\t}\n\t\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n\nFor example lets say we have two variables `age` and `money`. We'll write some code to determine if you can buy a car that costs 20000. For this you'll need at least 20000 money and at least an age of 18:\n\n```swift\nvar age = 23\nvar money = 25000\n\nif age >= 18 {\n\tif money >= 20000 {\n\t\tprint(\"Getting a new car, baby!\")\n\t} else {\n\t\tprint(\"Sorry, you don't have enough money.\")\n\t}\n} else {\n\tprint(\"Sorry, you're not old enough.\")\n}\n```\n\n\n#### Multiple conditions\n\nMutiple conditions can be chained together using the `&&` (AND) operator and the `||` (OR) operator\n\nThe `&&` (AND) operator is used to check if two conditions are simultaneously true.\nFor example consider we have the age of a person stored in a variable `age` and want to determine if the person is a teenager (age is between 13 and 19). We have to check that the age is greater than or equal to 13 **AND** less than or equal to 19. This is accomplished by the code below:\n\n```swift\nvar age = 18\nif age >= 13 && age <= 19 {\n\tprint(\"Teenager\")\n}\n```\n\nThis is equivalent to the following code:\n\n```swift\nvar age = 18\nif age >= 13 {\n\tif age <= 19 {\n\t\tprint(\"Teenager\")\n\t}\t\n}\n```\n\nThe `||` (OR) operator is used to check that at least one of two conditions is true.\n\nConsider again that we have the age of a person stored in a variable `age`. We want to print a warning if the age is less than or equal to 0 **OR** the age is greater than or equal to 100. This is accomplished by the code below:\n```swift\nvar age = 123\nif age <= 0 || age >= 100 {\n\tprint(\"Warning age is probably incorrect!\")\n}\n```\n\n**Note:** The **OR** in programming is not equivalent to the or in everyday language. If someone asks you if you want beef or chicken that means that you can have only one of two. In programming an or statement is also `true` when both conditions are `true` at the same time. For example:\n\n```swift\n\nvar numberOfSisters = 1\nvar numberOfBrothers = 2\n\nif numberOfSisters > 0 || numberOfBrothers > 0 {\n\tprint(\"Has siblings\")\n}\n```\n\nTo get a better understanding of how **AND**(**`&&`**) and **OR**(**`||`**) behave have a look at the truth tables below:\n\n```swift\n// AND\ntrue && true // true\ntrue && false // false\nfalse && true // false\nfalse && false // false\n\n// OR\ntrue || true // true\ntrue || false // true\nfalse || true // true\nfalse || false // false\n```\n\n#### Negating a condition\n\nYou can negate a condition using the `!` operator. A negated condition has oposite value to the original condition. i.e. if the initial condition was `true` than it's negation is `false`. If the initial condition is `false` than it's negation is `true`.\n\nFor example if we wanted to check if an age is **NOT** the age of a teenager we could use the following code\n\n```swift\nvar age = 18\nif !(age >= 13 && age <= 19) {\n\tprint(\"Not a teenager!\")\n}\n```\n\n**Note:**\n```swift\nif condition {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n}\n```\nis equivalent of :\n```swift\nif !condition {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n}\n```\n\n**Note:** If you have an if statement with an else branch than it's not recommended to negate the condition.\n\nThe below table shows the values of negating some conditions:\n\n```swift\n!true // false\n!false // true\n!(true && true) // false\n!(true || false) // false\n!(false || false) // true\n```\n",
    "name": "Conditionals",
    "title": "Conditionals",
    "id": "2",
    "codes": [
      {
        "type": "code",
        "content": "var numberOfOranges = 1\nvar numberOfApples = 5\n\nif numberOfApples > numberOfOranges {\n\tprint(\"You have more apples than oranges!\")\n}\n",
        "text": "```swift\nvar numberOfOranges = 1\nvar numberOfApples = 5\n\nif numberOfApples > numberOfOranges {\n\tprint(\"You have more apples than oranges!\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "1 != 2 // true\n1 == 2 // false\n1 < 2 // true\n1 > 2 // false\n1 <= 2 // true\n3 >= 3 // true\n",
        "text": "```swift\n1 != 2 // true\n1 == 2 // false\n1 < 2 // true\n1 > 2 // false\n1 <= 2 // true\n3 >= 3 // true\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "if CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n",
        "text": "```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "if CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n} else {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\n}\n",
        "text": "```swift\nif CONDITION {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n} else {\n\tSTATEMENT\n\tSTATEMENT\n\t...\n\tSTATEMENT\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var money = 20 // you have 20$\nvar burgerPrice = 10 // you ate a good burger\n\n// if you have enough money pay for the burger\nif money >=  burgerPrice {\n    print(\"pay burger\")\n    money -= burgerPrice\n} else {\n// otherwise you will need to go wash dishes to pay for your meal\n// hopefully this will not be the case\n    print(\"wash dishes\")\n}\n\n// if you have some money left order desert\nif money > 0 {\n    print(\"order desert\")\n}\n",
        "text": "```swift\nvar money = 20 // you have 20$\nvar burgerPrice = 10 // you ate a good burger\n\n// if you have enough money pay for the burger\nif money >=  burgerPrice {\n    print(\"pay burger\")\n    money -= burgerPrice\n} else {\n// otherwise you will need to go wash dishes to pay for your meal\n// hopefully this will not be the case\n    print(\"wash dishes\")\n}\n\n// if you have some money left order desert\nif money > 0 {\n    print(\"order desert\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "if CONDITION {\n\tSTATEMENT\n\t\n\tif CONDITION2 {\n\t\tSTATEMENT\n\t\tSTATEMENT\n\t\t...\n\t\tSTATEMENT\t\n\t}\n\t\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n",
        "text": "```swift\nif CONDITION {\n\tSTATEMENT\n\t\n\tif CONDITION2 {\n\t\tSTATEMENT\n\t\tSTATEMENT\n\t\t...\n\t\tSTATEMENT\t\n\t}\n\t\n\tSTATEMENT\n\t...\n\tSTATEMENT\t\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var age = 23\nvar money = 25000\n\nif age >= 18 {\n\tif money >= 20000 {\n\t\tprint(\"Getting a new car, baby!\")\n\t} else {\n\t\tprint(\"Sorry, you don't have enough money.\")\n\t}\n} else {\n\tprint(\"Sorry, you're not old enough.\")\n}\n",
        "text": "```swift\nvar age = 23\nvar money = 25000\n\nif age >= 18 {\n\tif money >= 20000 {\n\t\tprint(\"Getting a new car, baby!\")\n\t} else {\n\t\tprint(\"Sorry, you don't have enough money.\")\n\t}\n} else {\n\tprint(\"Sorry, you're not old enough.\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var age = 18\nif age >= 13 && age <= 19 {\n\tprint(\"Teenager\")\n}\n",
        "text": "```swift\nvar age = 18\nif age >= 13 && age <= 19 {\n\tprint(\"Teenager\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var age = 18\nif age >= 13 {\n\tif age <= 19 {\n\t\tprint(\"Teenager\")\n\t}\t\n}\n",
        "text": "```swift\nvar age = 18\nif age >= 13 {\n\tif age <= 19 {\n\t\tprint(\"Teenager\")\n\t}\t\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var age = 123\nif age <= 0 || age >= 100 {\n\tprint(\"Warning age is probably incorrect!\")\n}\n",
        "text": "```swift\nvar age = 123\nif age <= 0 || age >= 100 {\n\tprint(\"Warning age is probably incorrect!\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "\nvar numberOfSisters = 1\nvar numberOfBrothers = 2\n\nif numberOfSisters > 0 || numberOfBrothers > 0 {\n\tprint(\"Has siblings\")\n}\n",
        "text": "```swift\n\nvar numberOfSisters = 1\nvar numberOfBrothers = 2\n\nif numberOfSisters > 0 || numberOfBrothers > 0 {\n\tprint(\"Has siblings\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// AND\ntrue && true // true\ntrue && false // false\nfalse && true // false\nfalse && false // false\n\n// OR\ntrue || true // true\ntrue || false // true\nfalse || true // true\nfalse || false // false\n",
        "text": "```swift\n// AND\ntrue && true // true\ntrue && false // false\nfalse && true // false\nfalse && false // false\n\n// OR\ntrue || true // true\ntrue || false // true\nfalse || true // true\nfalse || false // false\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var age = 18\nif !(age >= 13 && age <= 19) {\n\tprint(\"Not a teenager!\")\n}\n",
        "text": "```swift\nvar age = 18\nif !(age >= 13 && age <= 19) {\n\tprint(\"Not a teenager!\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "if condition {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n}\n",
        "text": "```swift\nif condition {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "if !condition {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n}\n",
        "text": "```swift\nif !condition {\n\t// DO SOMETHING WHEN CONDITION IS FALSE\n} else {\n\t// DO SOMETHING WHEN CONDITION IS TRUE\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "!true // false\n!false // true\n!(true && true) // false\n!(true || false) // false\n!(false || false) // true\n",
        "text": "```swift\n!true // false\n!false // true\n!(true && true) // false\n!(true || false) // false\n!(false || false) // true\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 2.1 Max\n\nYou are given two numbers `a` and `b` print the largest one.\n\n```swift\nvar a = 11\nvar b = 22\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n[/spoiler]\n\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n[/spoiler]\n\n",
        "text": "### 2.1 Max\n\nYou are given two numbers `a` and `b` print the largest one.\n\n```swift\nvar a = 11\nvar b = 22\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n[/spoiler]\n\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n[/spoiler]\n\n",
        "name": "Max",
        "title": "2.1 Max",
        "id": "1",
        "problemStatement": "### 2.1 Max\n\nYou are given two numbers `a` and `b` print the largest one.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 11\nvar b = 22\n\n// your code here\n",
            "text": "```swift\nvar a = 11\nvar b = 22\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 11\nvar b = 22\n",
                "text": "```swift\nvar a = 11\nvar b = 22\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "22\n",
                "text": "```\n22\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 11\nvar b = 22\n```\n\n",
              "Output": "```\n22\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 23 \nvar b = 12 \n",
                "text": "```swift\nvar a = 23 \nvar b = 12 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "23\n",
                "text": "```\n23\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 23 \nvar b = 12 \n```\n\n",
              "Output": "```\n23\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2 \nvar b = 4   \n",
                "text": "```swift\nvar a = 2 \nvar b = 4   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4\n",
                "text": "```\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 2 \nvar b = 4   \n```\n\n",
              "Output": "```\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n",
                "text": "```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 11\nvar b = 22\n```\n\nOutput: \n```\n22\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 11\nvar b = 22\n",
                "text": "```swift\nvar a = 11\nvar b = 22\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "22\n",
                "text": "```\n22\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 11\nvar b = 22\n```\n\n",
              "Output": "```\n22\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 23 \nvar b = 12 \n```\n\nOutput: \n```\n23\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 23 \nvar b = 12 \n",
                "text": "```swift\nvar a = 23 \nvar b = 12 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "23\n",
                "text": "```\n23\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 23 \nvar b = 12 \n```\n\n",
              "Output": "```\n23\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 2 \nvar b = 4   \n```\n\nOutput: \n```\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2 \nvar b = 4   \n",
                "text": "```swift\nvar a = 2 \nvar b = 4   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4\n",
                "text": "```\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 2 \nvar b = 4   \n```\n\n",
              "Output": "```\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n",
                "text": "```swift\nvar a = 11\nvar b = 23\n\nif a > b {\n    print(a)\n} else {\n    print(b)\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe maximum of two numbers is the largest of the two numbers. i.e. if a > b then the maximum is a otherwise it's be. Note that this problem can also be solved using `>=` or by using the condition `b < a` and interchanging the order of the print statements.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_1",
        "compileCode": true,
        "code": "var a = 11\nvar b = 22\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.2 Even or Odd\n\nYou are given a `number`. Print `even` if the number is even or `odd` otherwise.\n\n```swift\nlet number = 2\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to determine if the number is `even` or `odd`  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n[/spoiler]\n\n",
        "text": "### 2.2 Even or Odd\n\nYou are given a `number`. Print `even` if the number is even or `odd` otherwise.\n\n```swift\nlet number = 2\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to determine if the number is `even` or `odd`  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n[/spoiler]\n\n",
        "name": "Even or Odd",
        "title": "2.2 Even or Odd",
        "id": "2",
        "problemStatement": "### 2.2 Even or Odd\n\nYou are given a `number`. Print `even` if the number is even or `odd` otherwise.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let number = 2\n\n// your code here\n",
            "text": "```swift\nlet number = 2\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1\n",
                "text": "```swift\nvar number = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "odd\n",
                "text": "```\nodd\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1\n```\n\n",
              "Output": "```\nodd\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12\n",
                "text": "```swift\nvar number = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "even\n",
                "text": "```\neven\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12\n```\n\n",
              "Output": "```\neven\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to determine if the number is `even` or `odd`  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to determine if the number is `even` or `odd`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n",
                "text": "```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n",
            "text": "[spoiler title='Explanation']\n\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar number = 1\n```\n\nOutput: \n```\nodd\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1\n",
                "text": "```swift\nvar number = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "odd\n",
                "text": "```\nodd\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1\n```\n\n",
              "Output": "```\nodd\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 12\n```\n\nOutput: \n```\neven\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12\n",
                "text": "```swift\nvar number = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "even\n",
                "text": "```\neven\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12\n```\n\n",
              "Output": "```\neven\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to determine if the number is `even` or `odd`  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to determine if the number is `even` or `odd`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n",
                "text": "```swift\nlet number = 2\n\nif number % 2 == 0 {\n\tprint(\"even\")\n} else {\n\tprint(\"odd\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n",
            "text": "[spoiler title='Explanation']\n\nA number is even if it devides evenly into 2. That is the remainder of the division with 2 is 0. Otherwise the number is odd. We'll have to check if the remainder is equal to 0 and print \"even\" or \"odd\" accordingly. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_2",
        "compileCode": true,
        "code": "let number = 2\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.3 Divisibility\n\nYou are given two numbers `a` and `b`. Print `\"divisible\"` if `a` is divisible by `b` and `\"not divisible\"` otherwise.\n\n```swift\nvar a = 12\nvar b = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']  \nUse the remainder (`%`) operator to check if `b` divides `a`.\n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \nTo check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n[/spoiler]  \n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n[/spoiler]\n\n",
        "text": "### 2.3 Divisibility\n\nYou are given two numbers `a` and `b`. Print `\"divisible\"` if `a` is divisible by `b` and `\"not divisible\"` otherwise.\n\n```swift\nvar a = 12\nvar b = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']  \nUse the remainder (`%`) operator to check if `b` divides `a`.\n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \nTo check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n[/spoiler]  \n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n[/spoiler]\n\n",
        "name": "Divisibility",
        "title": "2.3 Divisibility",
        "id": "3",
        "problemStatement": "### 2.3 Divisibility\n\nYou are given two numbers `a` and `b`. Print `\"divisible\"` if `a` is divisible by `b` and `\"not divisible\"` otherwise.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 12\nvar b = 3\n\n// your code here\n",
            "text": "```swift\nvar a = 12\nvar b = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 22\nvar b = 11  \n",
                "text": "```swift\nvar a = 22\nvar b = 11  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisible\n",
                "text": "```\ndivisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 22\nvar b = 11  \n```\n\n",
              "Output": "```\ndivisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12 \nvar b = 3   \n",
                "text": "```swift\nvar a = 12 \nvar b = 3   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisible\n",
                "text": "```\ndivisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12 \nvar b = 3   \n```\n\n",
              "Output": "```\ndivisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12 \nvar b = 5   \n",
                "text": "```swift\nvar a = 12 \nvar b = 5   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not divisible\n",
                "text": "```\nnot divisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12 \nvar b = 5   \n```\n\n",
              "Output": "```\nnot divisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check if `b` divides `a`.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nUse the remainder (`%`) operator to check if `b` divides `a`.\n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "To check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \nTo check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n",
                "text": "```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n",
            "text": "[spoiler title='Explanation']\n\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput: \n```swift\nvar a = 22\nvar b = 11  \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 22\nvar b = 11  \n",
                "text": "```swift\nvar a = 22\nvar b = 11  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisible\n",
                "text": "```\ndivisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 22\nvar b = 11  \n```\n\n",
              "Output": "```\ndivisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 3   \n```\n\nOutput: \n```\ndivisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12 \nvar b = 3   \n",
                "text": "```swift\nvar a = 12 \nvar b = 3   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisible\n",
                "text": "```\ndivisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12 \nvar b = 3   \n```\n\n",
              "Output": "```\ndivisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput: \n```swift\nvar a = 12 \nvar b = 5   \n```\n\nOutput: \n```\nnot divisible\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12 \nvar b = 5   \n",
                "text": "```swift\nvar a = 12 \nvar b = 5   \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not divisible\n",
                "text": "```\nnot divisible\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12 \nvar b = 5   \n```\n\n",
              "Output": "```\nnot divisible\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check if `b` divides `a`.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nUse the remainder (`%`) operator to check if `b` divides `a`.\n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "To check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \nTo check if `b` divides `a` you need to check if the remainder of the division of `a` to `b` is 0.\n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n",
                "text": "```swift\nvar a = 12\nvar b = 3\n\nif a % b == 0 {\n    print(\"divisible\")\n} else {\n    print(\"not divisible\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n",
            "text": "[spoiler title='Explanation']\n\nA number `a` is divisible by a number `b` if the remainder of the division is `0`. We'll have to check if that is the case and print a message accordingly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_3",
        "compileCode": true,
        "code": "var a = 12\nvar b = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.4 Two of the same\n\nYou are given three variables `a`, `b` and `c`. Check if at least two variables have the same value. If that is true print `At least two variables have the same value` otherwise print `All the values are different`.\n\n```swift\nvar a = 2\nvar b = 3\nvar c = 2\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse the OR (`||`) operator to chain multiple equality checks \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n[/spoiler]\n\n\n",
        "text": "### 2.4 Two of the same\n\nYou are given three variables `a`, `b` and `c`. Check if at least two variables have the same value. If that is true print `At least two variables have the same value` otherwise print `All the values are different`.\n\n```swift\nvar a = 2\nvar b = 3\nvar c = 2\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nUse the OR (`||`) operator to chain multiple equality checks \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n[/spoiler]\n\n\n",
        "name": "Two of the same",
        "title": "2.4 Two of the same",
        "id": "4",
        "problemStatement": "### 2.4 Two of the same\n\nYou are given three variables `a`, `b` and `c`. Check if at least two variables have the same value. If that is true print `At least two variables have the same value` otherwise print `All the values are different`.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 2\nvar b = 3\nvar c = 2\n\n// your code here\n",
            "text": "```swift\nvar a = 2\nvar b = 3\nvar c = 2\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2  \nvar c = 3\n",
                "text": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "All the values are different\n",
                "text": "```\nAll the values are different\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\n",
              "Output": "```\nAll the values are different\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2  \nvar c = 1\n",
                "text": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "At least two variables have the same value\n",
                "text": "```\nAt least two variables have the same value\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\n",
              "Output": "```\nAt least two variables have the same value\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 3 \nvar b = 3  \nvar c = 3\n",
                "text": "```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "At least two variables have the same value\n",
                "text": "```\nAt least two variables have the same value\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\n",
              "Output": "```\nAt least two variables have the same value\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the OR (`||`) operator to chain multiple equality checks \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the OR (`||`) operator to chain multiple equality checks \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n",
                "text": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twist\n\nCheck if all three variables are the same.\n\n[spoiler title='Hint' collapse_link='true']  \nUse the AND (`&&`) operator to chain multiple equality checks  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nBecause equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n[/spoiler]\n\n\n",
            "text": "#### Twist\n\nCheck if all three variables are the same.\n\n[spoiler title='Hint' collapse_link='true']  \nUse the AND (`&&`) operator to chain multiple equality checks  \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nBecause equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n[/spoiler]\n\n\n",
            "problemStatement": "\nCheck if all three variables are the same.\n\n\n\n\n\n",
            "spoilers": [
              {
                "type": "spoiler",
                "content": "Use the AND (`&&`) operator to chain multiple equality checks  \n",
                "text": "[spoiler title='Hint' collapse_link='true']  \nUse the AND (`&&`) operator to chain multiple equality checks  \n[/spoiler]  \n",
                "params": {
                  "title": "Hint",
                  "collapse_link": "true"
                }
              },
              {
                "type": "spoiler",
                "content": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "var a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n",
                    "text": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n",
                    "language": "swift"
                  }
                ]
              },
              {
                "type": "spoiler",
                "content": "Because equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n",
                "text": "[spoiler title='Explanation' collapse_link='true']\nBecause equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n[/spoiler]\n",
                "params": {
                  "title": "Explanation",
                  "collapse_link": "true"
                }
              }
            ],
            "compileSolution": true,
            "hints": [
              {
                "type": "spoiler",
                "content": "Use the AND (`&&`) operator to chain multiple equality checks  \n",
                "text": "[spoiler title='Hint' collapse_link='true']  \nUse the AND (`&&`) operator to chain multiple equality checks  \n[/spoiler]  \n",
                "params": {
                  "title": "Hint",
                  "collapse_link": "true"
                }
              }
            ],
            "solutions": [
              {
                "type": "spoiler",
                "content": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "var a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n",
                    "text": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) && (b == c) {\n    print(\"All three variables have the same value\")\n}\n```\n",
                    "language": "swift"
                  }
                ]
              }
            ],
            "explanations": [
              {
                "type": "spoiler",
                "content": "Because equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n",
                "text": "[spoiler title='Explanation' collapse_link='true']\nBecause equality is transitive (if a = b and b = c then a = c) we only need to check two pairs of variables for equality to determine if all of them have the same value. \n[/spoiler]\n",
                "params": {
                  "title": "Explanation",
                  "collapse_link": "true"
                }
              }
            ],
            "playgroundName": "Exercise_",
            "compileCode": true,
            "misc": [

            ]
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\nOutput: \n```\nAll the values are different\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2  \nvar c = 3\n",
                "text": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "All the values are different\n",
                "text": "```\nAll the values are different\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 3\n```\n\n",
              "Output": "```\nAll the values are different\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 2  \nvar c = 1\n",
                "text": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "At least two variables have the same value\n",
                "text": "```\nAt least two variables have the same value\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 1 \nvar b = 2  \nvar c = 1\n```\n\n",
              "Output": "```\nAt least two variables have the same value\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\nOutput: \n```\nAt least two variables have the same value\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 3 \nvar b = 3  \nvar c = 3\n",
                "text": "```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "At least two variables have the same value\n",
                "text": "```\nAt least two variables have the same value\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 3 \nvar b = 3  \nvar c = 3\n```\n\n",
              "Output": "```\nAt least two variables have the same value\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the OR (`||`) operator to chain multiple equality checks \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the OR (`||`) operator to chain multiple equality checks \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n",
                "text": "```swift\nvar a = 2\nvar b = 2\nvar c = 2\n\nif (a == b) || (a == c) || (b == c) {\n    print(\"At least two variables have the same value\")\n} else {\n    print(\"All the values are different\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo check if at least two variables have the same value we only have to check 3 of the posible 6 pairs(ab, ac, ba, bc, ca, cb) because equality is symmetric (is a = b then b = a). \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise2_4",
        "compileCode": true,
        "code": "var a = 2\nvar b = 3\nvar c = 2\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.5 Breakfast\n\nYou are working on a smart-fridge. The smart-fridge knows how old the eggs and bacon in it are. You know that eggs spoil after 3 weeks (`21 days`) and bacon after one week (`7 days`).  \nGiven `baconAge` and `eggsAge`(in days) determine if you can cook bacon and eggs or what ingredients you need to throw out.  \nIf you can cook bacon and eggs print `you can cook bacon and eggs`.  \nIf you need to throw out any ingredients for each one print a line with the text `throw out ingredient` (`throw out bacon` or `throw out eggs`) in any order.\n\n```swift\nvar baconAge = 6 // the bacon is 6 days old\nvar eggsAge = 12 // eggs are 12 days old\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true'] \nInput:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n[/spoiler] \n\n\n[spoiler title='Hint 1' collapse_link='true']  \nCheck for the case where `you can cook bacon and eggs` first.\n[/spoiler] \n\n[spoiler title='Hint 2' collapse_link='true']  \nIn the else branch check the ingredients that need to be thrown out.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n[/spoiler]\n\n",
        "text": "### 2.5 Breakfast\n\nYou are working on a smart-fridge. The smart-fridge knows how old the eggs and bacon in it are. You know that eggs spoil after 3 weeks (`21 days`) and bacon after one week (`7 days`).  \nGiven `baconAge` and `eggsAge`(in days) determine if you can cook bacon and eggs or what ingredients you need to throw out.  \nIf you can cook bacon and eggs print `you can cook bacon and eggs`.  \nIf you need to throw out any ingredients for each one print a line with the text `throw out ingredient` (`throw out bacon` or `throw out eggs`) in any order.\n\n```swift\nvar baconAge = 6 // the bacon is 6 days old\nvar eggsAge = 12 // eggs are 12 days old\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true'] \nInput:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n[/spoiler] \n\n\n[spoiler title='Hint 1' collapse_link='true']  \nCheck for the case where `you can cook bacon and eggs` first.\n[/spoiler] \n\n[spoiler title='Hint 2' collapse_link='true']  \nIn the else branch check the ingredients that need to be thrown out.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n[/spoiler]\n\n",
        "name": "Breakfast",
        "title": "2.5 Breakfast",
        "id": "5",
        "problemStatement": "### 2.5 Breakfast\n\nYou are working on a smart-fridge. The smart-fridge knows how old the eggs and bacon in it are. You know that eggs spoil after 3 weeks (`21 days`) and bacon after one week (`7 days`).  \nGiven `baconAge` and `eggsAge`(in days) determine if you can cook bacon and eggs or what ingredients you need to throw out.  \nIf you can cook bacon and eggs print `you can cook bacon and eggs`.  \nIf you need to throw out any ingredients for each one print a line with the text `throw out ingredient` (`throw out bacon` or `throw out eggs`) in any order.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var baconAge = 6 // the bacon is 6 days old\nvar eggsAge = 12 // eggs are 12 days old\n\n// your code here\n",
            "text": "```swift\nvar baconAge = 6 // the bacon is 6 days old\nvar eggsAge = 12 // eggs are 12 days old\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 3\nvar eggsAge = 2\n",
                "text": "```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "you can cook bacon and eggs  \n",
                "text": "```\nyou can cook bacon and eggs  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\n",
              "Output": "```\nyou can cook bacon and eggs  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true'] \nInput:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 9\nvar eggsAge = 20\n",
                "text": "```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "throw out bacon  \n",
                "text": "```\nthrow out bacon  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\n",
              "Output": "```\nthrow out bacon  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n[/spoiler] \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 9\nvar eggsAge = 23\n",
                "text": "```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "throw out bacon  \nthrow out eggs\n",
                "text": "```\nthrow out bacon  \nthrow out eggs\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\n",
              "Output": "```\nthrow out bacon  \nthrow out eggs\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Check for the case where `you can cook bacon and eggs` first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nCheck for the case where `you can cook bacon and eggs` first.\n[/spoiler] \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "In the else branch check the ingredients that need to be thrown out.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \nIn the else branch check the ingredients that need to be thrown out.\n[/spoiler] \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n",
                "text": "```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\nOutput:  \n```\nyou can cook bacon and eggs  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 3\nvar eggsAge = 2\n",
                "text": "```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "you can cook bacon and eggs  \n",
                "text": "```\nyou can cook bacon and eggs  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 3\nvar eggsAge = 2\n```\n\n",
              "Output": "```\nyou can cook bacon and eggs  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true'] \nInput:\n```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\nOutput:  \n```\nthrow out bacon  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 9\nvar eggsAge = 20\n",
                "text": "```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "throw out bacon  \n",
                "text": "```\nthrow out bacon  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 9\nvar eggsAge = 20\n```\n\n",
              "Output": "```\nthrow out bacon  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\nOutput:  \n```\nthrow out bacon  \nthrow out eggs\n```\n[/spoiler] \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 9\nvar eggsAge = 23\n",
                "text": "```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "throw out bacon  \nthrow out eggs\n",
                "text": "```\nthrow out bacon  \nthrow out eggs\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar baconAge = 9\nvar eggsAge = 23\n```\n",
              "Output": "```\nthrow out bacon  \nthrow out eggs\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Check for the case where `you can cook bacon and eggs` first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nCheck for the case where `you can cook bacon and eggs` first.\n[/spoiler] \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "In the else branch check the ingredients that need to be thrown out.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \nIn the else branch check the ingredients that need to be thrown out.\n[/spoiler] \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n",
                "text": "```swift\nvar baconAge = 6\nvar eggsAge = 12\n\nif baconAge <= 7 && eggsAge <= 21 {\n\t// bacon and eggs are ok, we can cook\n\tprint(\"you can cook bacon and eggs\")\n} else {\n\t// either eggs or bacon or both are spoiled\n\tif baconAge > 7 {\n\t\tprint(\"throw out bacon\")\n\t}\n\tif eggsAge > 21 {\n\t\tprint(\"throw out eggs\")\n\t}\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe only case where we can cook bacon and eggs is when the bacon's age is less than or equal to 7 and the egg's age is less than or equal to 21. In code this is equivalent to the conditions `baconAge <= 7` and `eggsAge <= 21`. To check that both these conditions are true we use the `&&` operator. In case one of these conditions is not met we check which ingredients have gone bad (`baconAge > 7` or `eggsAge > 21`) and print a message accordingly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_5",
        "compileCode": true,
        "code": "var baconAge = 6 // the bacon is 6 days old\nvar eggsAge = 12 // eggs are 12 days old\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.6 Leap Year\n\nYou are given a `year`, determine if it's a `leap year`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. Leap years occur every `4 years`. `2012` was a `leap year` and `2016` will also be a `leap year`.  \nThe above rule is valid except that every `100 years` special rules apply. Years that are divisible by `100` are not `leap years` if they are not also divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\nPrint  `Leap year!` or `Not a leap year!` depending on the case.\n\n```swift\nlet year = 2014\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']\nInput:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]  \n\n[spoiler title='Example 4' collapse_link='true']  \nInput:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n[/spoiler]\n\n",
        "text": "### 2.6 Leap Year\n\nYou are given a `year`, determine if it's a `leap year`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. Leap years occur every `4 years`. `2012` was a `leap year` and `2016` will also be a `leap year`.  \nThe above rule is valid except that every `100 years` special rules apply. Years that are divisible by `100` are not `leap years` if they are not also divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\nPrint  `Leap year!` or `Not a leap year!` depending on the case.\n\n```swift\nlet year = 2014\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']\nInput:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]  \n\n[spoiler title='Example 4' collapse_link='true']  \nInput:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n[/spoiler]\n\n",
        "name": "Leap Year",
        "title": "2.6 Leap Year",
        "id": "6",
        "problemStatement": "### 2.6 Leap Year\n\nYou are given a `year`, determine if it's a `leap year`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. Leap years occur every `4 years`. `2012` was a `leap year` and `2016` will also be a `leap year`.  \nThe above rule is valid except that every `100 years` special rules apply. Years that are divisible by `100` are not `leap years` if they are not also divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\nPrint  `Leap year!` or `Not a leap year!` depending on the case.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let year = 2014\n\n// your code here\n",
            "text": "```swift\nlet year = 2014\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 2000 \n",
                "text": "```swift\nvar year = 2000 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Leap year!\n",
                "text": "```\nLeap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 2000 \n```\n",
              "Output": "```\nLeap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 2005 \n",
                "text": "```swift\nvar year = 2005 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Not a leap year!\n",
                "text": "```\nNot a leap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 2005 \n```\n",
              "Output": "```\nNot a leap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 1900\n",
                "text": "```swift\nvar year = 1900\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Not a leap year!\n",
                "text": "```\nNot a leap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 1900\n```\n",
              "Output": "```\nNot a leap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 1992\n",
                "text": "```swift\nvar year = 1992\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Leap year!\n",
                "text": "```\nLeap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 1992\n```\n",
              "Output": "```\nLeap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n",
                "text": "```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:  \n```swift\nvar year = 2000 \n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 2000 \n",
                "text": "```swift\nvar year = 2000 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Leap year!\n",
                "text": "```\nLeap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 2000 \n```\n",
              "Output": "```\nLeap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:  \n```swift\nvar year = 2005 \n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 2005 \n",
                "text": "```swift\nvar year = 2005 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Not a leap year!\n",
                "text": "```\nNot a leap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 2005 \n```\n",
              "Output": "```\nNot a leap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:  \n```swift\nvar year = 1900\n```\nOutput: \n```\nNot a leap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 1900\n",
                "text": "```swift\nvar year = 1900\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Not a leap year!\n",
                "text": "```\nNot a leap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 1900\n```\n",
              "Output": "```\nNot a leap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:  \n```swift\nvar year = 1992\n```\nOutput: \n```\nLeap year!\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var year = 1992\n",
                "text": "```swift\nvar year = 1992\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Leap year!\n",
                "text": "```\nLeap year!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar year = 1992\n```\n",
              "Output": "```\nLeap year!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility by `4`. Don't forget to check the special case when `year` is divisible by `100`.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n",
                "text": "```swift\nlet year = 2014\nif year % 4 == 0 {\n    if year % 100 == 0 && year % 400 != 0 {\n        print(\"Not a leap year!\")\n    } else {\n        print(\"Leap year!\")\n    }\n} else {\n\tprint(year, terminator: \"\")\n    print(\"Not a leap year!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll check for divisibility by 4. Next we'll check if the year is divisible by 100 and not divisible by 400, if that's the case then the year is not a leap year despide being divisible by 4, otherwise it is a leap year. If the year is not divisible by 4 then its certainly not a leap year.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_6",
        "compileCode": true,
        "code": "let year = 2014\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.7 Coin toss\n\nIf you use `arc4random()` it will give you a random number. Generate a random number and use it to simulate a coin toss. Print `heads` or `tails`.\n\n```swift\n// this imports the Swift standard library which has arc4random\nimport Foundation\n\nvar randomNumber = arc4random()\n\n// your code here\n```\n\n[spoiler title='Hint' collapse_link='true']\nUse the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n[/spoiler]\n\n\n[spoiler title='Funny Solution' collapse_link='true']\n```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n[/spoiler]\n\n",
        "text": "### 2.7 Coin toss\n\nIf you use `arc4random()` it will give you a random number. Generate a random number and use it to simulate a coin toss. Print `heads` or `tails`.\n\n```swift\n// this imports the Swift standard library which has arc4random\nimport Foundation\n\nvar randomNumber = arc4random()\n\n// your code here\n```\n\n[spoiler title='Hint' collapse_link='true']\nUse the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n[/spoiler]\n\n\n[spoiler title='Funny Solution' collapse_link='true']\n```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n[/spoiler]\n\n",
        "name": "Coin toss",
        "title": "2.7 Coin toss",
        "id": "7",
        "problemStatement": "### 2.7 Coin toss\n\nIf you use `arc4random()` it will give you a random number. Generate a random number and use it to simulate a coin toss. Print `heads` or `tails`.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "// this imports the Swift standard library which has arc4random\nimport Foundation\n\nvar randomNumber = arc4random()\n\n// your code here\n",
            "text": "```swift\n// this imports the Swift standard library which has arc4random\nimport Foundation\n\nvar randomNumber = arc4random()\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Use the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n",
                "text": "```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n",
            "text": "[spoiler title='Funny Solution' collapse_link='true']\n```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Funny Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n",
                "text": "```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n",
            "text": "[spoiler title='Explanation']\n\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse the remainder operator (`%`) to check if the `randomNumber` is even(`heads`) or odd(`tails`). \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n",
                "text": "```swift\nimport Foundation\n\nvar randomNumber = arc4random()\n\nif randomNumber % 2 == 0 {\n    print(\"heads\")\n} else {\n    print(\"tails\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n",
            "text": "[spoiler title='Funny Solution' collapse_link='true']\n```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Funny Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n",
                "text": "```swift\nimport Foundation\n\nlet randomNumber = arc4random()\n\nif randomNumber == 0 {\n    print(\"it fell under the couch\")\n} else if (randomNumber % 2 == 0) {\n    print(\"tails\")\n} else {\n    print(\"head\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n",
            "text": "[spoiler title='Explanation']\n\n`arc4random()` gives us a random integer. Given a random integer we know that 50% of the time it will be even and 50% of the time it will be odd. We can simulate a coin flip by considering the remainder when dividing our number by 2. This effectively simulates a coin flip.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_7",
        "compileCode": true,
        "code": "// this imports the Swift standard library which has arc4random\nimport Foundation\n\nvar randomNumber = arc4random()\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.8 Min 4\n\nYou are given four variables `a`, `b`, `c` and `d`. Print the value of the smallest one.\n\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']    \nInput: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n[/spoiler]  \n\n\n[spoiler title='Hint' collapse_link='true']  \nUse a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n[/spoiler]\n\n",
        "text": "### 2.8 Min 4\n\nYou are given four variables `a`, `b`, `c` and `d`. Print the value of the smallest one.\n\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']    \nInput: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n[/spoiler]  \n\n\n[spoiler title='Hint' collapse_link='true']  \nUse a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n[/spoiler]\n\n",
        "name": "Min 4",
        "title": "2.8 Min 4",
        "id": "8",
        "problemStatement": "### 2.8 Min 4\n\nYou are given four variables `a`, `b`, `c` and `d`. Print the value of the smallest one.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\n// your code here\n",
            "text": "```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n",
                "text": "```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\n",
              "Output": "```\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n",
                "text": "```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']    \nInput: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n",
                "text": "```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4\n",
                "text": "```\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\n",
              "Output": "```\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n",
                "text": "```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n2\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n",
                "text": "```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 3 \nvar b = 5  \nvar c = 4 \nvar d = 2 \n```\n\n",
              "Output": "```\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\nOutput: \n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n",
                "text": "```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar a = 1 \nvar b = 3  \nvar c = 4 \nvar d = 2 \n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']    \nInput: \n```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\nOutput: \n```\n4\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n",
                "text": "```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4\n",
                "text": "```\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 6 \nvar b = 7  \nvar c = 4 \nvar d = 5 \n```\n\n",
              "Output": "```\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse a variable to hold the minimum value and initalize it with `a`. Assume that `a` is the smallest value. You'll have to update the value in case `a` is not the smallest value.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n",
                "text": "```swift\nvar a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\nvar min = a\n\nif b < min {\n    min = b\n}\n\nif c < min {\n    min = c\n}\n\nif d < min {\n    min = d\n}\n\nprint(min)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe start by assuming that the minimum is equal to `a`. Next we check if `b`, `c` or `d` are less than our current minimum, updating our minimum if that is the case. **Note:** We could have used 4 conditions of the form `if a <= b && a <= c && a <= d` but that would have resulted in a more complicated solution.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_8",
        "compileCode": true,
        "code": "var a = 5\nvar b = 6\nvar c = 3\nvar d = 4\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.9 Testing\n\nTest if `number` is divisible by `3`, `5` and `7`. For example `105` is divisible by `3`, `5` and `7`, but `120` is divisible only by `3` and `5` but not by `7`. If `number` is divisible by `3`, `5` and `7` print `number is divisible by 3, 5 and 7` otherwise print `number is not divisible by 3, 5 and 7`.\n\n```swift\nlet number = 210\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n[/spoiler]\n\n",
        "text": "### 2.9 Testing\n\nTest if `number` is divisible by `3`, `5` and `7`. For example `105` is divisible by `3`, `5` and `7`, but `120` is divisible only by `3` and `5` but not by `7`. If `number` is divisible by `3`, `5` and `7` print `number is divisible by 3, 5 and 7` otherwise print `number is not divisible by 3, 5 and 7`.\n\n```swift\nlet number = 210\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n[/spoiler]  \n\n[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n[/spoiler]\n\n",
        "name": "Testing",
        "title": "2.9 Testing",
        "id": "9",
        "problemStatement": "### 2.9 Testing\n\nTest if `number` is divisible by `3`, `5` and `7`. For example `105` is divisible by `3`, `5` and `7`, but `120` is divisible only by `3` and `5` but not by `7`. If `number` is divisible by `3`, `5` and `7` print `number is divisible by 3, 5 and 7` otherwise print `number is not divisible by 3, 5 and 7`.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let number = 210\n\n// your code here\n",
            "text": "```swift\nlet number = 210\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 60\n",
                "text": "```swift\nvar number = 60\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "number is not divisible by 3, 5 and 7  \n",
                "text": "```\nnumber is not divisible by 3, 5 and 7  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 60\n```\n",
              "Output": "```\nnumber is not divisible by 3, 5 and 7  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 105\n",
                "text": "```swift\nvar number = 105\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "number is divisible by 3, 5 and 7  \n",
                "text": "```\nnumber is divisible by 3, 5 and 7  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 105\n```\n\n",
              "Output": "```\nnumber is divisible by 3, 5 and 7  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check for divisibility.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n",
                "text": "```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']   \nInput: \n```swift\nvar number = 60\n```\nOutput: \n```\nnumber is not divisible by 3, 5 and 7  \n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 60\n",
                "text": "```swift\nvar number = 60\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "number is not divisible by 3, 5 and 7  \n",
                "text": "```\nnumber is not divisible by 3, 5 and 7  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 60\n```\n",
              "Output": "```\nnumber is not divisible by 3, 5 and 7  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput: \n```swift\nvar number = 105\n```\n\nOutput: \n```\nnumber is divisible by 3, 5 and 7  \n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 105\n",
                "text": "```swift\nvar number = 105\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "number is divisible by 3, 5 and 7  \n",
                "text": "```\nnumber is divisible by 3, 5 and 7  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 105\n```\n\n",
              "Output": "```\nnumber is divisible by 3, 5 and 7  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the remainder (`%`) operator to check for divisibility.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nUse the remainder (`%`) operator to check for divisibility.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n",
                "text": "```swift\nlet number = 210\n\nif number % 3 == 0 && number % 5 == 0 && number % 7 == 0 {\n\tprint(\"number is divisible by 3, 5 and 7\")\n} else {\n\tprint(\"number is not divisible by 3, 5 and 7\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to check if the number is simultaneously divisible by 3, 5 and 7. We combine these divisibility checks via the `&&` operator.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_9",
        "compileCode": true,
        "code": "let number = 210\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.10 Point\n\nFind out if the point (`x`, `y`) is inside of the rectangle with the lower-left corner in (`lowX`, `lowY`) and the upper-right in (`highX`, `highY`). Print `inside` or `not inside` depending on the case.\n\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \n\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nChain multiple comparisons together using the AND (`&&`) operator.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n[/spoiler]\n\n",
        "text": "### 2.10 Point\n\nFind out if the point (`x`, `y`) is inside of the rectangle with the lower-left corner in (`lowX`, `lowY`) and the upper-right in (`highX`, `highY`). Print `inside` or `not inside` depending on the case.\n\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \n\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nChain multiple comparisons together using the AND (`&&`) operator.\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n[/spoiler]\n\n",
        "name": "Point",
        "title": "2.10 Point",
        "id": "10",
        "problemStatement": "### 2.10 Point\n\nFind out if the point (`x`, `y`) is inside of the rectangle with the lower-left corner in (`lowX`, `lowY`) and the upper-right in (`highX`, `highY`). Print `inside` or `not inside` depending on the case.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\n// your code here\n",
            "text": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n",
                "text": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"inside\"\n",
                "text": "```\n\"inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\n",
              "Output": "```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n",
                "text": "```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"inside\"\n",
                "text": "```\n\"inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\n",
              "Output": "```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \n\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n",
                "text": "```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"not inside\"\n",
                "text": "```\n\"not inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\n",
              "Output": "```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Chain multiple comparisons together using the AND (`&&`) operator.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nChain multiple comparisons together using the AND (`&&`) operator.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n",
                "text": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n",
                "text": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"inside\"\n",
                "text": "```\n\"inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\n",
              "Output": "```\n\"inside\"\n```\n\n![Point 1](https://www.weheartswift.com/wp-content/uploads/2015/02/point1.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\nOutput: \n```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n",
                "text": "```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"inside\"\n",
                "text": "```\n\"inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 2\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n```\n\n",
              "Output": "```\n\"inside\"\n```\n\n![Point 2](https://www.weheartswift.com/wp-content/uploads/2015/02/point2.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \n\nInput: \n```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\nOutput: \n```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n",
                "text": "```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"not inside\"\n",
                "text": "```\n\"not inside\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar x = 4\nvar y = 4\nvar lowX = 0\nvar lowY = 0\nvar highX = 3\nvar highY = 5\n```\n\n",
              "Output": "```\n\"not inside\"\n```\n\n![Point 3](https://www.weheartswift.com/wp-content/uploads/2015/02/point3.png)\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Chain multiple comparisons together using the AND (`&&`) operator.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nChain multiple comparisons together using the AND (`&&`) operator.\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n",
                "text": "```swift\nvar x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\nif x >= lowX && y >= lowY && x <= highX && y <= highY {\n    print(\"inside\")\n} else {\n    print(\"not inside\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe point is inside the rectangle if it's x coordinate is greater or equal to the rectangle's lowest x coordinate (lowX) and less than or equal to the rectangles highest x coordinate (highX). We'll also have to do a simillar check for the y coordinate.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_10",
        "compileCode": true,
        "code": "var x = 1\nvar y = 2\nvar lowX = 1\nvar lowY = 1\nvar highX = 3\nvar highY = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 2.11 Hitpoints\n\nYou are working on a videogame where the character has a certain number of hitpoints(HP) ranging from `0` to `100`.  \n`100` represents full health  \n`0` represents dead.  \nYou want to add regenerating health to the game using the following rules:\n\n-  HP always regenerates up to numbers of the form `X0` (`75` -> `80` , `32` -> `40` ...)\n-  When HP is below `20` it regenerates up to `20` (`13` -> `20`, `5` -> `20`, ...)\n-  If the character has `0` HP then he doesn't regenerate life (he's dead)\n\nGiven the current hp of the character stored in a variable `hp` print the `hp` the player will have after regenerating life.\n\n```swift\nvar hp = 75\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']    \nInput: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']   \nInput: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n[/spoiler]  \n\n[spoiler title='Example 4' collapse_link='true']   \nInput: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n[/spoiler]  \n\n[spoiler title='Example 5' collapse_link='true']   \nInput: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nCheck for the case when `hp` is between 1 and 19 first\n[/spoiler] \n\n[spoiler title='Hint' collapse_link='true']  \nDiscard the last digit of `hp` via division\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n[/spoiler]\n",
        "text": "### 2.11 Hitpoints\n\nYou are working on a videogame where the character has a certain number of hitpoints(HP) ranging from `0` to `100`.  \n`100` represents full health  \n`0` represents dead.  \nYou want to add regenerating health to the game using the following rules:\n\n-  HP always regenerates up to numbers of the form `X0` (`75` -> `80` , `32` -> `40` ...)\n-  When HP is below `20` it regenerates up to `20` (`13` -> `20`, `5` -> `20`, ...)\n-  If the character has `0` HP then he doesn't regenerate life (he's dead)\n\nGiven the current hp of the character stored in a variable `hp` print the `hp` the player will have after regenerating life.\n\n```swift\nvar hp = 75\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']    \nInput: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']   \nInput: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n[/spoiler]  \n\n[spoiler title='Example 4' collapse_link='true']   \nInput: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n[/spoiler]  \n\n[spoiler title='Example 5' collapse_link='true']   \nInput: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n[/spoiler]  \n\n[spoiler title='Hint' collapse_link='true']  \nCheck for the case when `hp` is between 1 and 19 first\n[/spoiler] \n\n[spoiler title='Hint' collapse_link='true']  \nDiscard the last digit of `hp` via division\n[/spoiler] \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n[/spoiler]\n",
        "name": "Hitpoints",
        "title": "2.11 Hitpoints",
        "id": "11",
        "problemStatement": "### 2.11 Hitpoints\n\nYou are working on a videogame where the character has a certain number of hitpoints(HP) ranging from `0` to `100`.  \n`100` represents full health  \n`0` represents dead.  \nYou want to add regenerating health to the game using the following rules:\n\n-  HP always regenerates up to numbers of the form `X0` (`75` -> `80` , `32` -> `40` ...)\n-  When HP is below `20` it regenerates up to `20` (`13` -> `20`, `5` -> `20`, ...)\n-  If the character has `0` HP then he doesn't regenerate life (he's dead)\n\nGiven the current hp of the character stored in a variable `hp` print the `hp` the player will have after regenerating life.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var hp = 75\n\n// your code here\n",
            "text": "```swift\nvar hp = 75\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']    \nInput: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 60\n",
                "text": "```swift \nvar hp = 60\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "60\n",
                "text": "```\n60\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 60\n```\n\n",
              "Output": "```\n60\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 26\n",
                "text": "```swift \nvar hp = 26\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "30  \n",
                "text": "```\n30  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 26\n```\n\n",
              "Output": "```\n30  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']   \nInput: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 12\n",
                "text": "```swift \nvar hp = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "20\n",
                "text": "```\n20\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 12\n```\n",
              "Output": "```\n20\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']   \nInput: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 4 \n",
                "text": "```swift \nvar hp = 4 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "20\n",
                "text": "```\n20\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 4 \n```\n\n",
              "Output": "```\n20\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']   \nInput: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 95\n",
                "text": "```swift \nvar hp = 95\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 95\n```\n\n",
              "Output": "```\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Check for the case when `hp` is between 1 and 19 first\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCheck for the case when `hp` is between 1 and 19 first\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Discard the last digit of `hp` via division\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nDiscard the last digit of `hp` via division\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n",
                "text": "```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n",
            "text": "[spoiler title='Explanation']\n\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "2",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']    \nInput: \n```swift \nvar hp = 60\n```\n\nOutput: \n```\n60\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 60\n",
                "text": "```swift \nvar hp = 60\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "60\n",
                "text": "```\n60\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 60\n```\n\n",
              "Output": "```\n60\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']   \nInput: \n```swift \nvar hp = 26\n```\n\nOutput: \n```\n30  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 26\n",
                "text": "```swift \nvar hp = 26\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "30  \n",
                "text": "```\n30  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 26\n```\n\n",
              "Output": "```\n30  \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']   \nInput: \n```swift \nvar hp = 12\n```\nOutput: \n```\n20\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 12\n",
                "text": "```swift \nvar hp = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "20\n",
                "text": "```\n20\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 12\n```\n",
              "Output": "```\n20\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']   \nInput: \n```swift \nvar hp = 4 \n```\n\nOutput: \n```\n20\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 4 \n",
                "text": "```swift \nvar hp = 4 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "20\n",
                "text": "```\n20\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 4 \n```\n\n",
              "Output": "```\n20\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']   \nInput: \n```swift \nvar hp = 95\n```\n\nOutput: \n```\n100\n```\n[/spoiler]  \n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 95\n",
                "text": "```swift \nvar hp = 95\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift \nvar hp = 95\n```\n\n",
              "Output": "```\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Check for the case when `hp` is between 1 and 19 first\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCheck for the case when `hp` is between 1 and 19 first\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Discard the last digit of `hp` via division\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nDiscard the last digit of `hp` via division\n[/spoiler] \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n",
                "text": "```swift\nvar hp = 75\n\nif hp > 0 && hp < 20 {\n    hp = 20\n} else if hp % 10 != 0 {\n    hp = hp / 10\n    hp = hp + 1\n    hp = hp * 10\n}\n\nprint(hp)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n",
            "text": "[spoiler title='Explanation']\n\nLets start with the simple case, if `hp` is greater than `0` and less than `20` we just set it to `20`. Otherwise we want to round `hp` to the next multiple of `10` if `hp` is not already a multiple of `10` (`hp` is divisible by `10`). To round an integer to the next multiple of `10` we divide by `10` and add `1` then multiply by `10`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise2_11",
        "compileCode": true,
        "code": "var hp = 75\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 3. Types\n\n#### Introduction\n\nAll the values we've worked with so far have been integer numbers.  \nAll variables and constants in Swift have a type. Think of the type as describing what kind of values a variable can have. The type for integer numbers is `Int`.\n\nYou can see the type of a variable in Xcode by option clicking on it's name (hold down option(⌥) and click on its name). A popup will appear were you can see the type of the variable.\n\n![lucky](https://www.weheartswift.com/wp-content/uploads/2015/02/lucky.png)\n\nHere you can see that our lucky number 7 is of type `Int`.\n\nWe often need variables of types that aren't `Int`. You already encountered a different type. The expresssions inside an if statement. These values have type `Bool` also known as `Boolean` named after mathematician [George Boole](http://en.wikipedia.org/wiki/George_Boole) who layed out the mathematical foundations of Logic.\n\nComparision operators (`<,<=,>,>=,==,!=`) produce values of type `Bool`. Boolean expressions can have only one of 2 types `true` or `false`\n\nFor example\n\n```swift\nvar luckyNumber = 7\n\nvar condition = 777 > luckyNumber\n```  \n`condition` will be of type `Bool` and have a value of `true` as seen below:\n\n![luckier](https://www.weheartswift.com/wp-content/uploads/2015/02/luckier.png)\n\n#### The Double type\n\nWhat if we want to use numbers of the form (`1.5, 1.7, 1.6,...`)?\nWe can of course do that in Swift! If you declare a variable lets say `heightInMeters` with a value of `1.85` and check its type you'll see that its type is `Double`\n\n```swift\nvar heightInMeters = 1.85\n```\n\n![Double](https://www.weheartswift.com/wp-content/uploads/2015/02/height.png)\n\nVariables of type `Double` hold fractional numbers and can be used for calculating fractional quantities. Any number of the form `X.Y` is a `Double`\nExamples: (35.67, 2.0, 0.5154, ...)\n\nDoubles can be added, subtracted, multiplied and divided using the familiar operators (`+, -, *, /`).\n\nThere is no equivalent to the remainder(`%`) operator for doubles.\n\n```swift\nvar a = 3.5\nvar b = 1.25\n\nprint(a + b) // 4.75\nprint(a - b) // 2.25\nprint(a * b) // 4.375\nprint(a / b) // 2.8\n\n``` \n\n[spoiler title='Why are fractional numbers called Double?(Optional)' collapse_link='true']   \nNumbers of type double have a limited precision. consider the following code\n\n```swift\nprint(1.0 / 3.0) // 0.333333333333333\n```\n\nMathematically speaking the number ( `1.0 / 3.0`) should go on forever having an infinite number of 3s after the  decimal `.`. Computers can't hold an infinite amount of information so they truncate the number at some point.  \n\nRepresenting decimal numbers in a computer is done via so called [Floating Point Numbers](http://en.wikipedia.org/wiki/Floating_point). Represented by the type `Float` in Swift. The `Double` type is a kind of floating point number but compared to the `Float` type it can hold twice as many digits hence the name `Double` .\n[/spoiler]  \n\n\n#### Declaring variables of a certain type\n\nTo explicitly declare a variable of a certain type you use the syntax:\n\n**var** `variable` : `Type` = `...`\n\nFor example:\n\n```swift\nvar integer:Int = 64\nvar boolean:Bool = false\nvar double:Double = 7.2\n```\n\nIf you don't provide a type for a variable a type is automatically inferred for you using the value you provide\n\nExamples:\n\n```swift\n// We don't declare a type for a it is implicitly Int \n// because the value 7 is an Int\nvar a = 7 \n\nprint(a / 2) // 3\n```\n\n```swift\n// We don't declare a type for a it is implicitly Double \n// because the value 7.0 is a Double\nvar a = 7.0 \nprint(a / 2) // 3.5\n```\n\nIf you explicilty declare a variable as having type `Double` then you can initialize it with an integer but the variable will hold a `Double`\n\n```swift\nvar a:Double = 7 // We explicitly declare a type for a\n\nprint(a / 2) // 3.5\n```\n\n#### Type Casting\n\nInitializing a variable of type `Double` with an integer only works if you use a constant value. If you try initializing a variable of type `Double` with a variable of type `Int` then you'll get an error.\n\n```swift\nvar a = 64\nvar b:Double = a // Error\n```\n\nTo solve this problem we need to convert the value from `Int` to `Double`. Converting a value of some type to a different type is known as `type casting` or just `casting`.\n\nTo cast a variable to a certain type we use `TypeName(variableName)` or the `as` operator, `variableName as TypeName`.\nFor example:\n\n```swift\nvar a = 64\nvar b:Double = Double(a) // b = 64.0\nvar c:Double = a as Double // c = 64.0\n```\n\nCasting a `Double` to an `Int` discards all the digits after the decimal point. Note that this digits can't be recovered by casting the variable back to `Double`.\n\nExample:\n\n```swift\nvar number = 5.25\nvar integerNumber = Int(number) // 5\nvar doubleNumber = Double(integerNumber) // 5.0\n```\n\n",
    "text": "## 3. Types\n\n#### Introduction\n\nAll the values we've worked with so far have been integer numbers.  \nAll variables and constants in Swift have a type. Think of the type as describing what kind of values a variable can have. The type for integer numbers is `Int`.\n\nYou can see the type of a variable in Xcode by option clicking on it's name (hold down option(⌥) and click on its name). A popup will appear were you can see the type of the variable.\n\n![lucky](https://www.weheartswift.com/wp-content/uploads/2015/02/lucky.png)\n\nHere you can see that our lucky number 7 is of type `Int`.\n\nWe often need variables of types that aren't `Int`. You already encountered a different type. The expresssions inside an if statement. These values have type `Bool` also known as `Boolean` named after mathematician [George Boole](http://en.wikipedia.org/wiki/George_Boole) who layed out the mathematical foundations of Logic.\n\nComparision operators (`<,<=,>,>=,==,!=`) produce values of type `Bool`. Boolean expressions can have only one of 2 types `true` or `false`\n\nFor example\n\n```swift\nvar luckyNumber = 7\n\nvar condition = 777 > luckyNumber\n```  \n`condition` will be of type `Bool` and have a value of `true` as seen below:\n\n![luckier](https://www.weheartswift.com/wp-content/uploads/2015/02/luckier.png)\n\n#### The Double type\n\nWhat if we want to use numbers of the form (`1.5, 1.7, 1.6,...`)?\nWe can of course do that in Swift! If you declare a variable lets say `heightInMeters` with a value of `1.85` and check its type you'll see that its type is `Double`\n\n```swift\nvar heightInMeters = 1.85\n```\n\n![Double](https://www.weheartswift.com/wp-content/uploads/2015/02/height.png)\n\nVariables of type `Double` hold fractional numbers and can be used for calculating fractional quantities. Any number of the form `X.Y` is a `Double`\nExamples: (35.67, 2.0, 0.5154, ...)\n\nDoubles can be added, subtracted, multiplied and divided using the familiar operators (`+, -, *, /`).\n\nThere is no equivalent to the remainder(`%`) operator for doubles.\n\n```swift\nvar a = 3.5\nvar b = 1.25\n\nprint(a + b) // 4.75\nprint(a - b) // 2.25\nprint(a * b) // 4.375\nprint(a / b) // 2.8\n\n``` \n\n[spoiler title='Why are fractional numbers called Double?(Optional)' collapse_link='true']   \nNumbers of type double have a limited precision. consider the following code\n\n```swift\nprint(1.0 / 3.0) // 0.333333333333333\n```\n\nMathematically speaking the number ( `1.0 / 3.0`) should go on forever having an infinite number of 3s after the  decimal `.`. Computers can't hold an infinite amount of information so they truncate the number at some point.  \n\nRepresenting decimal numbers in a computer is done via so called [Floating Point Numbers](http://en.wikipedia.org/wiki/Floating_point). Represented by the type `Float` in Swift. The `Double` type is a kind of floating point number but compared to the `Float` type it can hold twice as many digits hence the name `Double` .\n[/spoiler]  \n\n\n#### Declaring variables of a certain type\n\nTo explicitly declare a variable of a certain type you use the syntax:\n\n**var** `variable` : `Type` = `...`\n\nFor example:\n\n```swift\nvar integer:Int = 64\nvar boolean:Bool = false\nvar double:Double = 7.2\n```\n\nIf you don't provide a type for a variable a type is automatically inferred for you using the value you provide\n\nExamples:\n\n```swift\n// We don't declare a type for a it is implicitly Int \n// because the value 7 is an Int\nvar a = 7 \n\nprint(a / 2) // 3\n```\n\n```swift\n// We don't declare a type for a it is implicitly Double \n// because the value 7.0 is a Double\nvar a = 7.0 \nprint(a / 2) // 3.5\n```\n\nIf you explicilty declare a variable as having type `Double` then you can initialize it with an integer but the variable will hold a `Double`\n\n```swift\nvar a:Double = 7 // We explicitly declare a type for a\n\nprint(a / 2) // 3.5\n```\n\n#### Type Casting\n\nInitializing a variable of type `Double` with an integer only works if you use a constant value. If you try initializing a variable of type `Double` with a variable of type `Int` then you'll get an error.\n\n```swift\nvar a = 64\nvar b:Double = a // Error\n```\n\nTo solve this problem we need to convert the value from `Int` to `Double`. Converting a value of some type to a different type is known as `type casting` or just `casting`.\n\nTo cast a variable to a certain type we use `TypeName(variableName)` or the `as` operator, `variableName as TypeName`.\nFor example:\n\n```swift\nvar a = 64\nvar b:Double = Double(a) // b = 64.0\nvar c:Double = a as Double // c = 64.0\n```\n\nCasting a `Double` to an `Int` discards all the digits after the decimal point. Note that this digits can't be recovered by casting the variable back to `Double`.\n\nExample:\n\n```swift\nvar number = 5.25\nvar integerNumber = Int(number) // 5\nvar doubleNumber = Double(integerNumber) // 5.0\n```\n\n",
    "name": "Types",
    "title": "Types",
    "id": "3",
    "codes": [
      {
        "type": "code",
        "content": "var luckyNumber = 7\n\nvar condition = 777 > luckyNumber\n",
        "text": "```swift\nvar luckyNumber = 7\n\nvar condition = 777 > luckyNumber\n```  \n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var heightInMeters = 1.85\n",
        "text": "```swift\nvar heightInMeters = 1.85\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var a = 3.5\nvar b = 1.25\n\nprint(a + b) // 4.75\nprint(a - b) // 2.25\nprint(a * b) // 4.375\nprint(a / b) // 2.8\n\n",
        "text": "```swift\nvar a = 3.5\nvar b = 1.25\n\nprint(a + b) // 4.75\nprint(a - b) // 2.25\nprint(a * b) // 4.375\nprint(a / b) // 2.8\n\n``` \n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var integer:Int = 64\nvar boolean:Bool = false\nvar double:Double = 7.2\n",
        "text": "```swift\nvar integer:Int = 64\nvar boolean:Bool = false\nvar double:Double = 7.2\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// We don't declare a type for a it is implicitly Int \n// because the value 7 is an Int\nvar a = 7 \n\nprint(a / 2) // 3\n",
        "text": "```swift\n// We don't declare a type for a it is implicitly Int \n// because the value 7 is an Int\nvar a = 7 \n\nprint(a / 2) // 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// We don't declare a type for a it is implicitly Double \n// because the value 7.0 is a Double\nvar a = 7.0 \nprint(a / 2) // 3.5\n",
        "text": "```swift\n// We don't declare a type for a it is implicitly Double \n// because the value 7.0 is a Double\nvar a = 7.0 \nprint(a / 2) // 3.5\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var a:Double = 7 // We explicitly declare a type for a\n\nprint(a / 2) // 3.5\n",
        "text": "```swift\nvar a:Double = 7 // We explicitly declare a type for a\n\nprint(a / 2) // 3.5\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var a = 64\nvar b:Double = a // Error\n",
        "text": "```swift\nvar a = 64\nvar b:Double = a // Error\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var a = 64\nvar b:Double = Double(a) // b = 64.0\nvar c:Double = a as Double // c = 64.0\n",
        "text": "```swift\nvar a = 64\nvar b:Double = Double(a) // b = 64.0\nvar c:Double = a as Double // c = 64.0\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var number = 5.25\nvar integerNumber = Int(number) // 5\nvar doubleNumber = Double(integerNumber) // 5.0\n",
        "text": "```swift\nvar number = 5.25\nvar integerNumber = Int(number) // 5\nvar doubleNumber = Double(integerNumber) // 5.0\n```\n",
        "language": "swift"
      }
    ],
    "spoilers": [
      {
        "type": "spoiler",
        "content": "Numbers of type double have a limited precision. consider the following code\n\n```swift\nprint(1.0 / 3.0) // 0.333333333333333\n```\n\nMathematically speaking the number ( `1.0 / 3.0`) should go on forever having an infinite number of 3s after the  decimal `.`. Computers can't hold an infinite amount of information so they truncate the number at some point.  \n\nRepresenting decimal numbers in a computer is done via so called [Floating Point Numbers](http://en.wikipedia.org/wiki/Floating_point). Represented by the type `Float` in Swift. The `Double` type is a kind of floating point number but compared to the `Float` type it can hold twice as many digits hence the name `Double` .\n",
        "text": "[spoiler title='Why are fractional numbers called Double?(Optional)' collapse_link='true']   \nNumbers of type double have a limited precision. consider the following code\n\n```swift\nprint(1.0 / 3.0) // 0.333333333333333\n```\n\nMathematically speaking the number ( `1.0 / 3.0`) should go on forever having an infinite number of 3s after the  decimal `.`. Computers can't hold an infinite amount of information so they truncate the number at some point.  \n\nRepresenting decimal numbers in a computer is done via so called [Floating Point Numbers](http://en.wikipedia.org/wiki/Floating_point). Represented by the type `Float` in Swift. The `Double` type is a kind of floating point number but compared to the `Float` type it can hold twice as many digits hence the name `Double` .\n[/spoiler]  \n",
        "params": {
          "title": "Why are fractional numbers called Double?(Optional)",
          "collapse_link": "true"
        },
        "codes": [
          {
            "type": "code",
            "content": "print(1.0 / 3.0) // 0.333333333333333\n",
            "text": "```swift\nprint(1.0 / 3.0) // 0.333333333333333\n```\n",
            "language": "swift"
          }
        ]
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 3.1 Average\n\nYou are given 2 Doubles `a` and `b`. Print their average.\n\n```swift\nvar a = 2.0\nvar b = 5.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nAdding 2 numbers together and dividing by 2 gives you their average.  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n[/spoiler]\n\n",
        "text": "### 3.1 Average\n\nYou are given 2 Doubles `a` and `b`. Print their average.\n\n```swift\nvar a = 2.0\nvar b = 5.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nAdding 2 numbers together and dividing by 2 gives you their average.  \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n[/spoiler]\n\n",
        "name": "Average",
        "title": "3.1 Average",
        "id": "1",
        "problemStatement": "### 3.1 Average\n\nYou are given 2 Doubles `a` and `b`. Print their average.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 2.0\nvar b = 5.0\n\n// your code here\n",
            "text": "```swift\nvar a = 2.0\nvar b = 5.0\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2.0\nvar b = 5.0\n",
                "text": "```swift\nvar a = 2.0\nvar b = 5.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3.5\n",
                "text": "```\n3.5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 2.0\nvar b = 5.0\n```\n\n",
              "Output": "```\n3.5\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 20.0\nvar b = 40.0\n",
                "text": "```swift\nvar a = 20.0\nvar b = 40.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "30.0\n",
                "text": "```\n30.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 20.0\nvar b = 40.0\n```\n\n",
              "Output": "```\n30.0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Adding 2 numbers together and dividing by 2 gives you their average.  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nAdding 2 numbers together and dividing by 2 gives you their average.  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n",
                "text": "```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 2.0\nvar b = 5.0\n```\n\nOutput:\n```\n3.5\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2.0\nvar b = 5.0\n",
                "text": "```swift\nvar a = 2.0\nvar b = 5.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3.5\n",
                "text": "```\n3.5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 2.0\nvar b = 5.0\n```\n\n",
              "Output": "```\n3.5\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 20.0\nvar b = 40.0\n```\n\nOutput:\n```\n30.0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 20.0\nvar b = 40.0\n",
                "text": "```swift\nvar a = 20.0\nvar b = 40.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "30.0\n",
                "text": "```\n30.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 20.0\nvar b = 40.0\n```\n\n",
              "Output": "```\n30.0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Adding 2 numbers together and dividing by 2 gives you their average.  \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nAdding 2 numbers together and dividing by 2 gives you their average.  \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n",
                "text": "```swift\nvar a = 2.0\nvar b = 5.0\n\nprint((a + b) / 2)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll just have to add our numbers and divide by 2. Keep in mind that division has higher predence then addition so `(a + b) / 2` is correct while `a + b / 2` would not be correct.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_1",
        "compileCode": true,
        "code": "var a = 2.0\nvar b = 5.0\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 3.2 Weighted Average\n\nYou are given 3 grades stored in 3 variables of type `Double` `finalsGrade`, `midtermGrade`, `projectGrade`. These grades are used to compute the grade for a class. `finalsGrade` represents 50% of the grade. `midtermGrade` represents 20% of the grade. `projectGrade` represents 30% of the final grade.   \nPrint the grade for the class.\n\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \n\n`x%` of a `value` = `value * x / 100`\n\n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n[/spoiler]  \n\n[spoiler title='Explanation']\n\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n[/spoiler]\n\n",
        "text": "### 3.2 Weighted Average\n\nYou are given 3 grades stored in 3 variables of type `Double` `finalsGrade`, `midtermGrade`, `projectGrade`. These grades are used to compute the grade for a class. `finalsGrade` represents 50% of the grade. `midtermGrade` represents 20% of the grade. `projectGrade` represents 30% of the final grade.   \nPrint the grade for the class.\n\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \n\n`x%` of a `value` = `value * x / 100`\n\n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n[/spoiler]  \n\n[spoiler title='Explanation']\n\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n[/spoiler]\n\n",
        "name": "Weighted Average",
        "title": "3.2 Weighted Average",
        "id": "2",
        "problemStatement": "### 3.2 Weighted Average\n\nYou are given 3 grades stored in 3 variables of type `Double` `finalsGrade`, `midtermGrade`, `projectGrade`. These grades are used to compute the grade for a class. `finalsGrade` represents 50% of the grade. `midtermGrade` represents 20% of the grade. `projectGrade` represents 30% of the final grade.   \nPrint the grade for the class.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\n// your code here\n",
            "text": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n",
                "text": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2.7\n",
                "text": "```\n2.7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\n",
              "Output": "```\n2.7\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n",
                "text": "```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5.0\n",
                "text": "```\n5.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\n",
              "Output": "```\n5.0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\n`x%` of a `value` = `value * x / 100`\n\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \n\n`x%` of a `value` = `value * x / 100`\n\n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n[/spoiler]  \n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n",
                "text": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\nOutput:\n```\n2.7\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n",
                "text": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2.7\n",
                "text": "```\n2.7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 5.0\nvar projectGrade = 3.0\n```\n\n",
              "Output": "```\n2.7\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\nOutput:\n```\n5.0\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n",
                "text": "```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5.0\n",
                "text": "```\n5.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar finalsGrade = 5.0\nvar midtermGrade = 5.0\nvar projectGrade = 5.0\n```\n\n",
              "Output": "```\n5.0\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\n`x%` of a `value` = `value * x / 100`\n\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \n\n`x%` of a `value` = `value * x / 100`\n\n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n[/spoiler]  \n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n",
                "text": "```swift\nvar finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\nprint(0.5 * finalsGrade + 0.2 * midtermGrade  + 0.3 * projectGrade)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo get `X%` of a value we have to multiply the value by `X / 100`. For 50, 20 and 30 percent we have to multiply with 0.5, 0.2 and 0.3 respectively, these are our weights in the average. The weighted average we need will be the grades multiplied by the correspoding weight.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_2",
        "compileCode": true,
        "code": "var finalsGrade = 2.0\nvar midtermGrade = 4.0\nvar projectGrade = 3.0\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 3.3 Tipping\n\nYou have the cost of a meal at a restaurant stored in a variable `mealCost` of type `Double`.  \nYou would like to leave a tip of a certain percentage. The percentage is stored in a variable `tip` of type `Int`.  \nPrint the total cost of the meal.\n\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25 // 25% tip\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']  \nDon't forget to convert `tip` to `Double`  \n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \n`x%` of a `value` is equal to `value * x / 100`\n[/spoiler]  \n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n[/spoiler]\n\n",
        "text": "### 3.3 Tipping\n\nYou have the cost of a meal at a restaurant stored in a variable `mealCost` of type `Double`.  \nYou would like to leave a tip of a certain percentage. The percentage is stored in a variable `tip` of type `Int`.  \nPrint the total cost of the meal.\n\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25 // 25% tip\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']  \nDon't forget to convert `tip` to `Double`  \n[/spoiler]  \n\n[spoiler title='Hint 2' collapse_link='true']  \n`x%` of a `value` is equal to `value * x / 100`\n[/spoiler]  \n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n[/spoiler]\n\n",
        "name": "Tipping",
        "title": "3.3 Tipping",
        "id": "3",
        "problemStatement": "### 3.3 Tipping\n\nYou have the cost of a meal at a restaurant stored in a variable `mealCost` of type `Double`.  \nYou would like to leave a tip of a certain percentage. The percentage is stored in a variable `tip` of type `Int`.  \nPrint the total cost of the meal.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var mealCost:Double = 3.5\nvar tip:Int = 25 // 25% tip\n\n// your code here\n",
            "text": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25 // 25% tip\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 3.5\nvar tip:Int = 25\n",
                "text": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4.2\n",
                "text": "```\n4.2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\n",
              "Output": "```\n4.2\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 10.0\nvar tip:Int = 10\n",
                "text": "```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "11.0\n",
                "text": "```\n11.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\n",
              "Output": "```\n11.0\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Don't forget to convert `tip` to `Double`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nDon't forget to convert `tip` to `Double`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`x%` of a `value` is equal to `value * x / 100`\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`x%` of a `value` is equal to `value * x / 100`\n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n",
                "text": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\nOutput:\n```\n4.2\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 3.5\nvar tip:Int = 25\n",
                "text": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4.2\n",
                "text": "```\n4.2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 25\n```\n\n",
              "Output": "```\n4.2\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\nOutput:\n```\n11.0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 10.0\nvar tip:Int = 10\n",
                "text": "```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "11.0\n",
                "text": "```\n11.0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar mealCost:Double = 10.0\nvar tip:Int = 10\n```\n\n",
              "Output": "```\n11.0\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Don't forget to convert `tip` to `Double`  \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']  \nDon't forget to convert `tip` to `Double`  \n[/spoiler]  \n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "`x%` of a `value` is equal to `value * x / 100`\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']  \n`x%` of a `value` is equal to `value * x / 100`\n[/spoiler]  \n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n",
                "text": "```swift\nvar mealCost:Double = 3.5\nvar tip:Int = 20\n\nvar tipCost = mealCost * Double(tip) / 100.0\nvar totalCost = mealCost + tipCost\n\nprint(totalCost)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll calculate how much the tip will cost. We use the same approach as `Problem 3.2` to get a percentage using multiplication. Keep in mind that we have to conver the tip to type `Double`, multiplying a variable of type `Int` with a variable of type `Double` is not allowed.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_3",
        "compileCode": true,
        "code": "var mealCost:Double = 3.5\nvar tip:Int = 25 // 25% tip\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 3.4 Rounding\n\nYou are given a variable `number` of type `Double`. Create a new variable called `roundedNumber` that has at most `1` digit after the decimal dot.\n\n```swift\nvar number = 5.1517\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nConverting a `Double` to an `Int` discards all the digits after the decimal point.    \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n[/spoiler]\n\n",
        "text": "### 3.4 Rounding\n\nYou are given a variable `number` of type `Double`. Create a new variable called `roundedNumber` that has at most `1` digit after the decimal dot.\n\n```swift\nvar number = 5.1517\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nConverting a `Double` to an `Int` discards all the digits after the decimal point.    \n[/spoiler]  \n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n[/spoiler]\n\n",
        "name": "Rounding",
        "title": "3.4 Rounding",
        "id": "4",
        "problemStatement": "### 3.4 Rounding\n\nYou are given a variable `number` of type `Double`. Create a new variable called `roundedNumber` that has at most `1` digit after the decimal dot.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 5.1517\n// your code here\n",
            "text": "```swift\nvar number = 5.1517\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 5.1517\n",
                "text": "```swift\nvar number = 5.1517\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 5.1\n",
                "text": "```swift\nroundedNumber = 5.1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 5.1517\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 5.1\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 32.5\n",
                "text": "```swift\nvar number = 32.5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 32.5\n",
                "text": "```swift\nroundedNumber = 32.5\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 32.5\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 32.5\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 2.0\n",
                "text": "```swift\nvar number = 2.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 2.0\n",
                "text": "```swift\nroundedNumber = 2.0\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 2.0\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 2.0\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Converting a `Double` to an `Int` discards all the digits after the decimal point.    \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nConverting a `Double` to an `Int` discards all the digits after the decimal point.    \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n",
                "text": "```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n",
            "text": "[spoiler title='Explanation']\n\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 5.1517\n```\n\nExpected values:\n```swift\nroundedNumber = 5.1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 5.1517\n",
                "text": "```swift\nvar number = 5.1517\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 5.1\n",
                "text": "```swift\nroundedNumber = 5.1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 5.1517\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 5.1\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 32.5\n```\n\nExpected values:\n```swift\nroundedNumber = 32.5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 32.5\n",
                "text": "```swift\nvar number = 32.5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 32.5\n",
                "text": "```swift\nroundedNumber = 32.5\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 32.5\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 32.5\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar number = 2.0\n```\n\nExpected values:\n```swift\nroundedNumber = 2.0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 2.0\n",
                "text": "```swift\nvar number = 2.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "roundedNumber = 2.0\n",
                "text": "```swift\nroundedNumber = 2.0\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 2.0\n```\n\n",
              "Expected values": "```swift\nroundedNumber = 2.0\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Converting a `Double` to an `Int` discards all the digits after the decimal point.    \n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nConverting a `Double` to an `Int` discards all the digits after the decimal point.    \n[/spoiler]  \n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n",
                "text": "```swift\nvar number = 5.1517\n\nvar intNumber = Int(number * 10.0)\n\nvar roundedNumber = Double(intNumber) / 10.0\n\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n",
            "text": "[spoiler title='Explanation']\n\nConverting a `Double` to an `Int` will discard all the digits after the decimal point we want to keep a digit tough so we'll multiply the number by `10` first then we'll discard all the digits by converting to `Int`, finally we'll convert back to `Double` and divide by `10` to shift the decimal point to the right.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_4",
        "compileCode": true,
        "code": "var number = 5.1517\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 3.5 Above average\n\nYou are given three grades obtained by 3 students in a class stored in variables `grade1`, `grade2`, `grade3` of type `Double`.   \nYou are also given your grade in the class stored in a variable `yourGrade` of type `Double`.   \nPrint `above average` if your grade is greater than the class average or `below average`\" otherwise.  \n**Note:** the average of the class includes your grade.\n\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nCompare the average with your grade.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n[/spoiler]\n\n",
        "text": "### 3.5 Above average\n\nYou are given three grades obtained by 3 students in a class stored in variables `grade1`, `grade2`, `grade3` of type `Double`.   \nYou are also given your grade in the class stored in a variable `yourGrade` of type `Double`.   \nPrint `above average` if your grade is greater than the class average or `below average`\" otherwise.  \n**Note:** the average of the class includes your grade.\n\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nCompare the average with your grade.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n[/spoiler]\n\n",
        "name": "Above average",
        "title": "3.5 Above average",
        "id": "5",
        "problemStatement": "### 3.5 Above average\n\nYou are given three grades obtained by 3 students in a class stored in variables `grade1`, `grade2`, `grade3` of type `Double`.   \nYou are also given your grade in the class stored in a variable `yourGrade` of type `Double`.   \nPrint `above average` if your grade is greater than the class average or `below average`\" otherwise.  \n**Note:** the average of the class includes your grade.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\n// your code here\n",
            "text": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n",
                "text": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"above average\"\n",
                "text": "```\n\"above average\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\n",
              "Output": "```\n\"above average\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n",
                "text": "```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"below average\"\n",
                "text": "```\n\"below average\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\n",
              "Output": "```\n\"below average\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Compare the average with your grade.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCompare the average with your grade.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n",
                "text": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\nOutput:\n```\n\"above average\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n",
                "text": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"above average\"\n",
                "text": "```\n\"above average\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n```\n\n",
              "Output": "```\n\"above average\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\nOutput:\n```\n\"below average\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n",
                "text": "```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"below average\"\n",
                "text": "```\n\"below average\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar grade1 = 10.0\nvar grade2 = 9.0\nvar grade3 = 10.0\nvar yourGrade = 9.0\n```\n\n",
              "Output": "```\n\"below average\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Compare the average with your grade.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCompare the average with your grade.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n",
                "text": "```swift\nvar grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\nvar averageGrade = (grade1 + grade2 + grade3 + yourGrade) / 4.0\n\nif yourGrade > averageGrade {\n\tprint(\"above average\")\n} else {\n\tprint(\"below average\")\n}\n\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll calculate the `averageGrade` of the class. Then we are goind to determine if you are above or below that grade. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_5",
        "compileCode": true,
        "code": "var grade1 = 7.0\nvar grade2 = 9.0\nvar grade3 = 5.0\nvar yourGrade = 8.0\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 3.6 Fields\n\nA farmer is harvesting wheat from a number of wheat fields, given in a variable `numberOfFields` of type `Int`.  \nEach field produces the same quantity of wheat given in a variable `wheatYield` of type `Double`.  \nSometimes the harvest is increased by `50%` due to favorable weather conditions. You are given this information in a variable `weatherWasGood` of type `Bool`.  \nPrint the total amount of wheat that the farmer will harvest.  \n\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n[/spoiler]\n",
        "text": "### 3.6 Fields\n\nA farmer is harvesting wheat from a number of wheat fields, given in a variable `numberOfFields` of type `Int`.  \nEach field produces the same quantity of wheat given in a variable `wheatYield` of type `Double`.  \nSometimes the harvest is increased by `50%` due to favorable weather conditions. You are given this information in a variable `weatherWasGood` of type `Bool`.  \nPrint the total amount of wheat that the farmer will harvest.  \n\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n[/spoiler]\n",
        "name": "Fields",
        "title": "3.6 Fields",
        "id": "6",
        "problemStatement": "### 3.6 Fields\n\nA farmer is harvesting wheat from a number of wheat fields, given in a variable `numberOfFields` of type `Int`.  \nEach field produces the same quantity of wheat given in a variable `wheatYield` of type `Double`.  \nSometimes the harvest is increased by `50%` due to favorable weather conditions. You are given this information in a variable `weatherWasGood` of type `Bool`.  \nPrint the total amount of wheat that the farmer will harvest.  \n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\n// your code here\n",
            "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "56.25\n",
                "text": "```\n56.25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\n",
              "Output": "```\n56.25\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "37.5\n",
                "text": "```\n37.5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\n",
              "Output": "```\n37.5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "3",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\nOutput:\n```\n56.25\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "56.25\n",
                "text": "```\n56.25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n```\n\n",
              "Output": "```\n56.25\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\nOutput:\n```\n37.5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "37.5\n",
                "text": "```\n37.5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = false\n```\n\n",
              "Output": "```\n37.5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n",
                "text": "```swift\nvar numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\nvar totalYield = Double(numberOfFields) * wheatYield\nif (weatherWasGood == true) {\n    totalYield = totalYield * 1.5\n}\n\nprint(totalYield)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe total yield is given by `numberOfField * wheatYield`, keep in mind that you'll have to convert `numberOfFields` to `Double` as its an `Int`. Finally We want to multiply the yield by `1.5` if the year was good.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise3_6",
        "compileCode": true,
        "code": "var numberOfFields:Int = 5\nvar wheatYield:Double = 7.5\nvar weatherWasGood:Bool = true\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 4. Loops\n\n#### Introduction\n\nLet's make make some pancakes!\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/02/pancakes.jpg)\n\nSo far we only looked at programs that have a fixed number of steps. For example look the *algorithm* to make a pancake:\n\n```\n- put 1/4 cup of batter in the frying pan\n- cook for about 2 minutes\n- flip and cook for another 2 minutes\n- remove the pancake\n```\n\nHow would the algorithm to make 10 pancakes would look? Would it be much different?\n\n```\n10 times do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n\nLoops let you describe repetitive processes. They could have a fixed amount of steps like the example above. Or they could have an unknow number of steps, for example a more realistic algorithm for making pancakes:\n\n```\nwhile you have pancake batter do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n#### `while` \n\nA `while` loop performs a set of statements until a condition becomes `false`.  \n\n**while** `condition` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nFor example in order to `print` all the numbers from 1 to 10. We need to create a variable with the initial value of 1. Print the value and increase it by one and until it becomes bigger than 10.\n\n```swift\nvar i = 1\nwhile i <= 10 {\n    print(i)\n    i = i + 1\n}\n```\n\n#### `repeat`\n\n`repeat` loops while a condition is met. The difference between a `while` and a `repeat` loop is that the repeat loop evaluates the condition after executing the statements from the loop.\n\n**repeat** {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n} **while** `condition`\n\n```swift\nvar i = 1\nrepeat {\n    print(i)\n    i = i + 1\n} while i < 10\n```\n\nBoth `while` and `repeat` are best used in loops where the numbers of stepts is unkown. Take for example the algorithm of converting a number to binary: divide the number by two until it becomes 0. Write the reminders from right to left to get the binary form of the number.\n\n```swift\nvar number = 123\n\nvar binary = 0\nvar digit  = 1\n\n\nwhile number > 0 {\n    let reminder = number % 2\n    \n    // add the new digit to the number\n    binary = digit * reminder + binary\n    \n    // move the digit to the left\n    digit *= 10\n\n    // remove the last binary digit\n    number /= 2\n}\n\nbinary // 1111011\n```\n\n\n#### `for` loops\n\nSwift provides two kinds of loops that perform a set of statements a certain number of times:\n\nThe **for-in** loop performs a set of statements for each item in a range or collection.\n\nSwift also provides two range operators `a..<b` and `a...b`, as a shortcut for expressing a range of values.\n\n```swift\n1...3 // 1, 2, 3\n1..<3 // 1, 2\n```\n\n**for** `value` **in** `range` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`      \n}\n\n```swift\n// prints 1-10\nfor i in 1...10 {\n    print(i)\n}\n\n// prints 0-9\nfor i in 0..<10 {\n    print(i)\n}\n```\n\nThe **for** loop performs a set of statements until a specific condition is met, typically by incrementing a counter each time the loop ends.\n\n**for** `initialization`; `condition`; `increment` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\n```swift \n// ++i is shorthand for i = i + 1\n// prints 1-10\nfor var i = 1; i <= 10; ++i {\n    print(i)\n}\n\n// prints 10-1 \nfor var i = 10; i > 0; --i {\n    print(i)\n}\n```\n\n#### `print` and terminators\n\nFor the drawing exercises below you will need use the `terminator` parameter for the `print` function. The `terminator` refers to the thing that is printed at the end. The default terminator is the new line character `\"\\n\"`. \n- `print(value)` will print the value and a new line\n- `print(value, terminator: \"\")` will print the value\n\n\n```swift\nprint(\"BAT\", terminator: \"\") // prints BAT\nprint(\"MAN\", terminator: \"\") // prints MAN\nprint(\"\") // prints a newline character\n// BATMAN\n\nprint(\"BAT\")\n// BAT\nprint(\"MAN\")\n// MAN\n```\n\n#### Executing a statement multiple times\n\nSometimes you just want to execute some statements multiple times but don't care about having an index. A swift convention in `for` loops is to use `_` as the loop variable name when you don't intend to use the variable in the loop.\n\nFor examplet to to print \"Hello World\" 5 times you can use:\n```swift\nfor _ in 1...5 {\n\tprint(\"Hello World\")\n}\n```\n\nNaming your loop variable `_` is useful because you immediately tell that the variable is not used in the loop. \n\n",
    "text": "## 4. Loops\n\n#### Introduction\n\nLet's make make some pancakes!\n\n![](https://www.weheartswift.com/wp-content/uploads/2015/02/pancakes.jpg)\n\nSo far we only looked at programs that have a fixed number of steps. For example look the *algorithm* to make a pancake:\n\n```\n- put 1/4 cup of batter in the frying pan\n- cook for about 2 minutes\n- flip and cook for another 2 minutes\n- remove the pancake\n```\n\nHow would the algorithm to make 10 pancakes would look? Would it be much different?\n\n```\n10 times do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n\nLoops let you describe repetitive processes. They could have a fixed amount of steps like the example above. Or they could have an unknow number of steps, for example a more realistic algorithm for making pancakes:\n\n```\nwhile you have pancake batter do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n#### `while` \n\nA `while` loop performs a set of statements until a condition becomes `false`.  \n\n**while** `condition` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nFor example in order to `print` all the numbers from 1 to 10. We need to create a variable with the initial value of 1. Print the value and increase it by one and until it becomes bigger than 10.\n\n```swift\nvar i = 1\nwhile i <= 10 {\n    print(i)\n    i = i + 1\n}\n```\n\n#### `repeat`\n\n`repeat` loops while a condition is met. The difference between a `while` and a `repeat` loop is that the repeat loop evaluates the condition after executing the statements from the loop.\n\n**repeat** {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n} **while** `condition`\n\n```swift\nvar i = 1\nrepeat {\n    print(i)\n    i = i + 1\n} while i < 10\n```\n\nBoth `while` and `repeat` are best used in loops where the numbers of stepts is unkown. Take for example the algorithm of converting a number to binary: divide the number by two until it becomes 0. Write the reminders from right to left to get the binary form of the number.\n\n```swift\nvar number = 123\n\nvar binary = 0\nvar digit  = 1\n\n\nwhile number > 0 {\n    let reminder = number % 2\n    \n    // add the new digit to the number\n    binary = digit * reminder + binary\n    \n    // move the digit to the left\n    digit *= 10\n\n    // remove the last binary digit\n    number /= 2\n}\n\nbinary // 1111011\n```\n\n\n#### `for` loops\n\nSwift provides two kinds of loops that perform a set of statements a certain number of times:\n\nThe **for-in** loop performs a set of statements for each item in a range or collection.\n\nSwift also provides two range operators `a..<b` and `a...b`, as a shortcut for expressing a range of values.\n\n```swift\n1...3 // 1, 2, 3\n1..<3 // 1, 2\n```\n\n**for** `value` **in** `range` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`      \n}\n\n```swift\n// prints 1-10\nfor i in 1...10 {\n    print(i)\n}\n\n// prints 0-9\nfor i in 0..<10 {\n    print(i)\n}\n```\n\nThe **for** loop performs a set of statements until a specific condition is met, typically by incrementing a counter each time the loop ends.\n\n**for** `initialization`; `condition`; `increment` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\n```swift \n// ++i is shorthand for i = i + 1\n// prints 1-10\nfor var i = 1; i <= 10; ++i {\n    print(i)\n}\n\n// prints 10-1 \nfor var i = 10; i > 0; --i {\n    print(i)\n}\n```\n\n#### `print` and terminators\n\nFor the drawing exercises below you will need use the `terminator` parameter for the `print` function. The `terminator` refers to the thing that is printed at the end. The default terminator is the new line character `\"\\n\"`. \n- `print(value)` will print the value and a new line\n- `print(value, terminator: \"\")` will print the value\n\n\n```swift\nprint(\"BAT\", terminator: \"\") // prints BAT\nprint(\"MAN\", terminator: \"\") // prints MAN\nprint(\"\") // prints a newline character\n// BATMAN\n\nprint(\"BAT\")\n// BAT\nprint(\"MAN\")\n// MAN\n```\n\n#### Executing a statement multiple times\n\nSometimes you just want to execute some statements multiple times but don't care about having an index. A swift convention in `for` loops is to use `_` as the loop variable name when you don't intend to use the variable in the loop.\n\nFor examplet to to print \"Hello World\" 5 times you can use:\n```swift\nfor _ in 1...5 {\n\tprint(\"Hello World\")\n}\n```\n\nNaming your loop variable `_` is useful because you immediately tell that the variable is not used in the loop. \n\n",
    "name": "Loops",
    "title": "Loops",
    "id": "4",
    "codes": [
      {
        "type": "code",
        "content": "- put 1/4 cup of batter in the frying pan\n- cook for about 2 minutes\n- flip and cook for another 2 minutes\n- remove the pancake\n",
        "text": "```\n- put 1/4 cup of batter in the frying pan\n- cook for about 2 minutes\n- flip and cook for another 2 minutes\n- remove the pancake\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "10 times do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n",
        "text": "```\n10 times do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "while you have pancake batter do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n",
        "text": "```\nwhile you have pancake batter do:\n\t- put 1/4 cup of batter in the frying pan\n\t- cook for about 2 minutes\n\t- flip and cook for another 2 minutes\n\t- remove the pancake\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "var i = 1\nwhile i <= 10 {\n    print(i)\n    i = i + 1\n}\n",
        "text": "```swift\nvar i = 1\nwhile i <= 10 {\n    print(i)\n    i = i + 1\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var i = 1\nrepeat {\n    print(i)\n    i = i + 1\n} while i < 10\n",
        "text": "```swift\nvar i = 1\nrepeat {\n    print(i)\n    i = i + 1\n} while i < 10\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var number = 123\n\nvar binary = 0\nvar digit  = 1\n\n\nwhile number > 0 {\n    let reminder = number % 2\n    \n    // add the new digit to the number\n    binary = digit * reminder + binary\n    \n    // move the digit to the left\n    digit *= 10\n\n    // remove the last binary digit\n    number /= 2\n}\n\nbinary // 1111011\n",
        "text": "```swift\nvar number = 123\n\nvar binary = 0\nvar digit  = 1\n\n\nwhile number > 0 {\n    let reminder = number % 2\n    \n    // add the new digit to the number\n    binary = digit * reminder + binary\n    \n    // move the digit to the left\n    digit *= 10\n\n    // remove the last binary digit\n    number /= 2\n}\n\nbinary // 1111011\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "1...3 // 1, 2, 3\n1..<3 // 1, 2\n",
        "text": "```swift\n1...3 // 1, 2, 3\n1..<3 // 1, 2\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// prints 1-10\nfor i in 1...10 {\n    print(i)\n}\n\n// prints 0-9\nfor i in 0..<10 {\n    print(i)\n}\n",
        "text": "```swift\n// prints 1-10\nfor i in 1...10 {\n    print(i)\n}\n\n// prints 0-9\nfor i in 0..<10 {\n    print(i)\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// ++i is shorthand for i = i + 1\n// prints 1-10\nfor var i = 1; i <= 10; ++i {\n    print(i)\n}\n\n// prints 10-1 \nfor var i = 10; i > 0; --i {\n    print(i)\n}\n",
        "text": "```swift \n// ++i is shorthand for i = i + 1\n// prints 1-10\nfor var i = 1; i <= 10; ++i {\n    print(i)\n}\n\n// prints 10-1 \nfor var i = 10; i > 0; --i {\n    print(i)\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "print(\"BAT\", terminator: \"\") // prints BAT\nprint(\"MAN\", terminator: \"\") // prints MAN\nprint(\"\") // prints a newline character\n// BATMAN\n\nprint(\"BAT\")\n// BAT\nprint(\"MAN\")\n// MAN\n",
        "text": "```swift\nprint(\"BAT\", terminator: \"\") // prints BAT\nprint(\"MAN\", terminator: \"\") // prints MAN\nprint(\"\") // prints a newline character\n// BATMAN\n\nprint(\"BAT\")\n// BAT\nprint(\"MAN\")\n// MAN\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "for _ in 1...5 {\n\tprint(\"Hello World\")\n}\n",
        "text": "```swift\nfor _ in 1...5 {\n\tprint(\"Hello World\")\n}\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 4.1 Chalkboard\n\nWrite a program that writes \"I will not skip the fundamentals!\" `N` times. \n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nThe solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n[/spoiler]\n\n",
        "text": "### 4.1 Chalkboard\n\nWrite a program that writes \"I will not skip the fundamentals!\" `N` times. \n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nThe solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n[/spoiler]\n\n",
        "name": "Chalkboard",
        "title": "4.1 Chalkboard",
        "id": "1",
        "problemStatement": "### 4.1 Chalkboard\n\nWrite a program that writes \"I will not skip the fundamentals!\" `N` times. \n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 10\n\n// your code here\n",
            "text": "```swift\nvar N = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "I will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n",
                "text": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "I will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n",
                "text": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "The solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nThe solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n",
                "text": "```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n",
                "text": "```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "I will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n",
                "text": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "I will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n",
                "text": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\nI will not skip the fundamentals!\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "The solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nThe solution to a similar problem was shown in the theory, you can use either `for` or `while` to solve this problem.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n",
                "text": "```swift\nvar N = 10\n\n// with a while loop\nvar times = 0\nwhile times < N {\n    print(\"I will not skip the fundamentals!\")\n    times = times + 1\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n",
                "text": "```swift\nvar N = 10\n// with a for loop\nfor _ in 1...N {\n    print(\"I will not skip the fundamentals!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to print the statement \"I will not skip the fundamentals\" in a loop `N` times, we can use a `for` or a `while` loop for this.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_1",
        "compileCode": true,
        "code": "var N = 10\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.2 Squares\n\nPrint the first `N` square numbers. A square number, also called perfect square, is an integer that is obtained by squaring some other integer; in other words, it is the product of some integer with itself (ex. `1`, `4` = `2` * `2`, `9` = `3` * `3` ...).\n\n```swift \nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n[/spoiler]\n\n",
        "text": "### 4.2 Squares\n\nPrint the first `N` square numbers. A square number, also called perfect square, is an integer that is obtained by squaring some other integer; in other words, it is the product of some integer with itself (ex. `1`, `4` = `2` * `2`, `9` = `3` * `3` ...).\n\n```swift \nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n[/spoiler]\n\n",
        "name": "Squares",
        "title": "4.2 Squares",
        "id": "2",
        "problemStatement": "### 4.2 Squares\n\nPrint the first `N` square numbers. A square number, also called perfect square, is an integer that is obtained by squaring some other integer; in other words, it is the product of some integer with itself (ex. `1`, `4` = `2` * `2`, `9` = `3` * `3` ...).\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 10\n\n// your code here\n",
            "text": "```swift \nvar N = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n",
                "text": "```\n1\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n1\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n9\n16\n25\n",
                "text": "```\n1\n4\n9\n16\n25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n1\n4\n9\n16\n25\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n",
                "text": "```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n1\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n",
                "text": "```\n1\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n1\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n1\n4\n9\n16\n25\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n9\n16\n25\n",
                "text": "```\n1\n4\n9\n16\n25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n1\n4\n9\n16\n25\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n",
                "text": "```swift\nvar N = 10\n\nvar cnt = 1\n\nwhile cnt <= N {\n    print(cnt * cnt)\n\n    cnt = cnt + 1\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate from `1` to `N` in a loop. In the solution `cnt` is our loop index(also called `counter`). The square number we want to print for each index is `cnt * cnt`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_2",
        "compileCode": true,
        "code": "var N = 10\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.3 Powers of 2\n\nPrint the powers of `2` that are less than or equal to `N`. \n\n```swift \nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nThe first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n[/spoiler]\n\n",
        "text": "### 4.3 Powers of 2\n\nPrint the powers of `2` that are less than or equal to `N`. \n\n```swift \nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nThe first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n[/spoiler]\n\n",
        "name": "Powers of 2",
        "title": "4.3 Powers of 2",
        "id": "3",
        "problemStatement": "### 4.3 Powers of 2\n\nPrint the powers of `2` that are less than or equal to `N`. \n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 10\n\n// your code here\n",
            "text": "```swift \nvar N = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n4\n",
                "text": "```\n2\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n2\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 100\n",
                "text": "```swift\nvar N = 100\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n4\n8\n16\n32\n64\n",
                "text": "```\n2\n4\n8\n16\n32\n64\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 100\n```\n\n",
              "Output": "```\n2\n4\n8\n16\n32\n64\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "The first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nThe first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n",
                "text": "```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n2\n4\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n4\n",
                "text": "```\n2\n4\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n2\n4\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 100\n```\n\nOutput:\n```\n2\n4\n8\n16\n32\n64\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 100\n",
                "text": "```swift\nvar N = 100\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n4\n8\n16\n32\n64\n",
                "text": "```\n2\n4\n8\n16\n32\n64\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 100\n```\n\n",
              "Output": "```\n2\n4\n8\n16\n32\n64\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "The first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nThe first power of `2`  is `2`. Given a power of `2`, `power`, the next power of `2` is `power * 2`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n",
                "text": "```swift\nvar N = 10\n\nvar power = 2\n\nwhile power <= N {\n    print(power)\n    power = power * 2\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to intialize a loop variable `power` to 2. We'll repeat a `while` loop in which we print `power` and double its value while `power <= N`. This will print all the powers of 2 less then or equal to `N`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_3",
        "compileCode": true,
        "code": "var N = 10\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.4 Alternative Counting\n\nWrite all the numbers from 1 to `N` in alternative order, one number from the left side (starting with one) and one number from the right side (starting from `N` down to `1`).\n\n```swift\nvar N = 5\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse two variables to remember the `left` and `right` index that you need to print next. \n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nThere's a special case you'll have to handle when `N` is odd.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n[/spoiler]\n\n",
        "text": "### 4.4 Alternative Counting\n\nWrite all the numbers from 1 to `N` in alternative order, one number from the left side (starting with one) and one number from the right side (starting from `N` down to `1`).\n\n```swift\nvar N = 5\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse two variables to remember the `left` and `right` index that you need to print next. \n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nThere's a special case you'll have to handle when `N` is odd.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n[/spoiler]\n\n",
        "name": "Alternative Counting",
        "title": "4.4 Alternative Counting",
        "id": "4",
        "problemStatement": "### 4.4 Alternative Counting\n\nWrite all the numbers from 1 to `N` in alternative order, one number from the left side (starting with one) and one number from the right side (starting from `N` down to `1`).\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 5\n\n// your code here\n",
            "text": "```swift\nvar N = 5\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n2\n3\n",
                "text": "```\n1\n4\n2\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n1\n4\n2\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 9\n",
                "text": "```swift\nvar N = 9\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n9\n2\n8\n3\n7\n4\n6\n5\n",
                "text": "```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 9\n```\n\n",
              "Output": "```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use two variables to remember the `left` and `right` index that you need to print next. \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse two variables to remember the `left` and `right` index that you need to print next. \n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "There's a special case you'll have to handle when `N` is odd.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nThere's a special case you'll have to handle when `N` is odd.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n",
                "text": "```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n1\n4\n2\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n2\n3\n",
                "text": "```\n1\n4\n2\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n1\n4\n2\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 9\n```\n\nOutput:\n```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 9\n",
                "text": "```swift\nvar N = 9\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n9\n2\n8\n3\n7\n4\n6\n5\n",
                "text": "```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 9\n```\n\n",
              "Output": "```\n1\n9\n2\n8\n3\n7\n4\n6\n5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use two variables to remember the `left` and `right` index that you need to print next. \n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse two variables to remember the `left` and `right` index that you need to print next. \n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "There's a special case you'll have to handle when `N` is odd.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nThere's a special case you'll have to handle when `N` is odd.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n",
                "text": "```swift\nvar N = 5\n\nvar left = 1\nvar right = N\n\nwhile left < right {\n    print(left)\n    print(right)\n    ++left\n    --right\n}\n\nif left == right {\n    print(left)\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'l use a `while` loop where we simultaneously increase a variable `left`, initialised to `1` and decrease a variable `right`, initialized to `N`. We repeat these steps until `left becomes greater than or equal to right`. We'll also have to handle the case when `left` becomes equal to `right` once our loop has finished, this will only happen for odd `N`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_4",
        "compileCode": true,
        "code": "var N = 5\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.5 Square\n\nGiven an integer `N` draw a square of `N x N` asterisks. Look at the examples.\n\n```swift\nvar N = 4\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nTry printing a single line of `*` first.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nYou can use `print(\"\")` to print an empty line.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n[/spoiler]\n\n",
        "text": "### 4.5 Square\n\nGiven an integer `N` draw a square of `N x N` asterisks. Look at the examples.\n\n```swift\nvar N = 4\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nTry printing a single line of `*` first.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nYou can use `print(\"\")` to print an empty line.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n[/spoiler]\n\n",
        "name": "Square",
        "title": "4.5 Square",
        "id": "5",
        "problemStatement": "### 4.5 Square\n\nGiven an integer `N` draw a square of `N x N` asterisks. Look at the examples.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 4\n\n// your code here\n",
            "text": "```swift\nvar N = 4\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "***\n***\n***\n",
                "text": "```\n***\n***\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n***\n***\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Try printing a single line of `*` first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nTry printing a single line of `*` first.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "You can use `print(\"\")` to print an empty line.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nYou can use `print(\"\")` to print an empty line.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twists\n\n- draw an empty square\n```\nN = 3\n***\n* *\n***\n\nN = 4\n****\n*  *\n*  *\n****\n```\n- draw an empty square, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n```\nN = 2\n++\n++\n\nN = 4\n+--+\n|  |\n|  |\n+--+\n```\n\n",
            "text": "#### Twists\n\n- draw an empty square\n```\nN = 3\n***\n* *\n***\n\nN = 4\n****\n*  *\n*  *\n****\n```\n- draw an empty square, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n```\nN = 2\n++\n++\n\nN = 4\n+--+\n|  |\n|  |\n+--+\n```\n\n",
            "problemStatement": "\n- draw an empty square\n- draw an empty square, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n\n",
            "codes": [
              {
                "type": "code",
                "content": "N = 3\n***\n* *\n***\n\nN = 4\n****\n*  *\n*  *\n****\n",
                "text": "```\nN = 3\n***\n* *\n***\n\nN = 4\n****\n*  *\n*  *\n****\n```\n",
                "language": "undefined"
              },
              {
                "type": "code",
                "content": "N = 2\n++\n++\n\nN = 4\n+--+\n|  |\n|  |\n+--+\n",
                "text": "```\nN = 2\n++\n++\n\nN = 4\n+--+\n|  |\n|  |\n+--+\n```\n",
                "language": "undefined"
              }
            ],
            "compileSolution": true
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n***\n***\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "***\n***\n***\n",
                "text": "```\n***\n***\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n***\n***\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Try printing a single line of `*` first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nTry printing a single line of `*` first.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "You can use `print(\"\")` to print an empty line.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nYou can use `print(\"\")` to print an empty line.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 4\n\nfor i in 1...N {\n    for j in 1...N {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst consider the problem of printing a single line of `N` asterisks. we can do this using a for loop that makes `N` calls to the `print(\"*\", terminator: \"\")` statement. After printing a line of asterisks we want to print a new line. Remember that this is done via the `print(\"\")` statement. Now we want to repeat our loop for printing a line of asterisks in another for loop. This gives us 2 nested loops that solve our problem.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_5",
        "compileCode": true,
        "code": "var N = 4\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.6 Rectangle\n\nGiven two integers `N` and `M` draw a rectangle of `N x M` asterisks. Look at the examples.\n\n```swift\nvar N = 3\nvar M = 7\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\nYou'll need to change the bounds of one of the loops.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n[/spoiler]\n\n\n",
        "text": "### 4.6 Rectangle\n\nGiven two integers `N` and `M` draw a rectangle of `N x M` asterisks. Look at the examples.\n\n```swift\nvar N = 3\nvar M = 7\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\nYou'll need to change the bounds of one of the loops.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n[/spoiler]\n\n\n",
        "name": "Rectangle",
        "title": "4.6 Rectangle",
        "id": "6",
        "problemStatement": "### 4.6 Rectangle\n\nGiven two integers `N` and `M` draw a rectangle of `N x M` asterisks. Look at the examples.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 3\nvar M = 7\n\n// your code here\n",
            "text": "```swift\nvar N = 3\nvar M = 7\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1 \nvar M = 3\n",
                "text": "```swift\nvar N = 1 \nvar M = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "***\n",
                "text": "```\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1 \nvar M = 3\n```\n\n",
              "Output": "```\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2 \nvar M = 2\n",
                "text": "```swift\nvar N = 2 \nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2 \nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3 \nvar M = 7\n",
                "text": "```swift\nvar N = 3 \nvar M = 7\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*******\n*******\n*******\n",
                "text": "```\n*******\n*******\n*******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3 \nvar M = 7\n```\n\n",
              "Output": "```\n*******\n*******\n*******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll need to change the bounds of one of the loops.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll need to change the bounds of one of the loops.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twists\n\n- draw an empty rectangle\n```\nN = 3 M = 4\n****\n*  *\n****\n\nN = 4 M = 7\n*******\n*     *\n*     *\n*******\n```\n- draw an empty rectangle, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n```\nN = 2 M = 3\n+-+\n+-+\n\nN = 4 M = 3\n+-+\n| |\n| |\n+-+\n```\n\n",
            "text": "#### Twists\n\n- draw an empty rectangle\n```\nN = 3 M = 4\n****\n*  *\n****\n\nN = 4 M = 7\n*******\n*     *\n*     *\n*******\n```\n- draw an empty rectangle, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n```\nN = 2 M = 3\n+-+\n+-+\n\nN = 4 M = 3\n+-+\n| |\n| |\n+-+\n```\n\n",
            "problemStatement": "\n- draw an empty rectangle\n- draw an empty rectangle, but instead of asterisks, use `+` for corners, `-` for the top and bottom sides and `|` for the left and right ones\n\n",
            "codes": [
              {
                "type": "code",
                "content": "N = 3 M = 4\n****\n*  *\n****\n\nN = 4 M = 7\n*******\n*     *\n*     *\n*******\n",
                "text": "```\nN = 3 M = 4\n****\n*  *\n****\n\nN = 4 M = 7\n*******\n*     *\n*     *\n*******\n```\n",
                "language": "undefined"
              },
              {
                "type": "code",
                "content": "N = 2 M = 3\n+-+\n+-+\n\nN = 4 M = 3\n+-+\n| |\n| |\n+-+\n",
                "text": "```\nN = 2 M = 3\n+-+\n+-+\n\nN = 4 M = 3\n+-+\n| |\n| |\n+-+\n```\n",
                "language": "undefined"
              }
            ],
            "compileSolution": true
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1 \nvar M = 3\n```\n\nOutput:\n```\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1 \nvar M = 3\n",
                "text": "```swift\nvar N = 1 \nvar M = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "***\n",
                "text": "```\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1 \nvar M = 3\n```\n\n",
              "Output": "```\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2 \nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2 \nvar M = 2\n",
                "text": "```swift\nvar N = 2 \nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2 \nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3 \nvar M = 7\n```\n\nOutput:\n```\n*******\n*******\n*******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3 \nvar M = 7\n",
                "text": "```swift\nvar N = 3 \nvar M = 7\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*******\n*******\n*******\n",
                "text": "```\n*******\n*******\n*******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3 \nvar M = 7\n```\n\n",
              "Output": "```\n*******\n*******\n*******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll need to change the bounds of one of the loops.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll need to change the bounds of one of the loops.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\nvar M = 7\n\nfor i in 1...N {\n    for j in 1...M {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution is simmilar to `Problem 4.5`. The only difference is that the inner loop will have `M` iterations instead of `N` (We want to draw `N` lines each with `M` asterisks)\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_6",
        "compileCode": true,
        "code": "var N = 3\nvar M = 7\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.7 Triangle\n\nGiven an integer `N` draw a triangle of asterisks. The triangle should have `N` lines, the `i`-th line should have `i` asterisks on it. \n\n```swift\nvar N = 4\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nFirst you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n[/spoiler]\n\n",
        "text": "### 4.7 Triangle\n\nGiven an integer `N` draw a triangle of asterisks. The triangle should have `N` lines, the `i`-th line should have `i` asterisks on it. \n\n```swift\nvar N = 4\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nFirst you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n[/spoiler]\n\n",
        "name": "Triangle",
        "title": "4.7 Triangle",
        "id": "7",
        "problemStatement": "### 4.7 Triangle\n\nGiven an integer `N` draw a triangle of asterisks. The triangle should have `N` lines, the `i`-th line should have `i` asterisks on it. \n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 4\n\n// your code here\n",
            "text": "```swift\nvar N = 4\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n**\n***\n",
                "text": "```\n*\n**\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n*\n**\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n**\n***\n****\n",
                "text": "```\n*\n**\n***\n****\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n*\n**\n***\n****\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "First you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nFirst you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n",
            "text": "[spoiler title='Explanation']\n\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twists\n\n- draw an empty triangle\n```\nN = 3\n*\n** \n***\n\nN = 4\n*\n** \n* *\n****\n\nN = 5\n*\n** \n* *\n*  *\n*****\n```\n- draw an empty triangle, but instead of asterisks, use `+` for corners, `-` for the bottom side, `|` for the left side and `\\` for the right side\n```\nN = 2\n+\n++\n\nN = 4\n+\n|\\\n| \\\n+--+\n\nN = 5\n+\n|\\\n| \\\n|  \\\n+---+\n```\n\n",
            "text": "#### Twists\n\n- draw an empty triangle\n```\nN = 3\n*\n** \n***\n\nN = 4\n*\n** \n* *\n****\n\nN = 5\n*\n** \n* *\n*  *\n*****\n```\n- draw an empty triangle, but instead of asterisks, use `+` for corners, `-` for the bottom side, `|` for the left side and `\\` for the right side\n```\nN = 2\n+\n++\n\nN = 4\n+\n|\\\n| \\\n+--+\n\nN = 5\n+\n|\\\n| \\\n|  \\\n+---+\n```\n\n",
            "problemStatement": "\n- draw an empty triangle\n- draw an empty triangle, but instead of asterisks, use `+` for corners, `-` for the bottom side, `|` for the left side and `\\` for the right side\n\n",
            "codes": [
              {
                "type": "code",
                "content": "N = 3\n*\n** \n***\n\nN = 4\n*\n** \n* *\n****\n\nN = 5\n*\n** \n* *\n*  *\n*****\n",
                "text": "```\nN = 3\n*\n** \n***\n\nN = 4\n*\n** \n* *\n****\n\nN = 5\n*\n** \n* *\n*  *\n*****\n```\n",
                "language": "undefined"
              },
              {
                "type": "code",
                "content": "N = 2\n+\n++\n\nN = 4\n+\n|\\\n| \\\n+--+\n\nN = 5\n+\n|\\\n| \\\n|  \\\n+---+\n",
                "text": "```\nN = 2\n+\n++\n\nN = 4\n+\n|\\\n| \\\n+--+\n\nN = 5\n+\n|\\\n| \\\n|  \\\n+---+\n```\n",
                "language": "undefined"
              }
            ],
            "compileSolution": true
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n*\n**\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n**\n***\n",
                "text": "```\n*\n**\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n*\n**\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n*\n**\n***\n****\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n**\n***\n****\n",
                "text": "```\n*\n**\n***\n****\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n*\n**\n***\n****\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "First you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nFirst you'll want to print a single `*`. Then you'll want to print 2 `*`, then 3 `*`. How many stars will you print at the `i-th` iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 1...i {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n",
            "text": "[spoiler title='Explanation']\n\nAgain we'll want to use 2 nested loops. Our inner loop won't go from 1 to a fixed value now. Instead it will go from 1 to the value of the index in the inner loop such that we progressively print more asterisks per line.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_7",
        "compileCode": true,
        "code": "var N = 4\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.8 Pyramid\n\nGiven an integer `N` draw a pyramid of asterisks. The pyramid should have `N` lines. On the **i**-th line there should be `N-i` spaces followed by `i*2-1` asterisks.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nHow many stars do you have to print at each iteration?\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow many spaces do you have to print at each iteration?\n[/spoiler]\n\n[spoiler title='Hint 3' collapse_link='true']\nWhat's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n[/spoiler]\n\n",
        "text": "### 4.8 Pyramid\n\nGiven an integer `N` draw a pyramid of asterisks. The pyramid should have `N` lines. On the **i**-th line there should be `N-i` spaces followed by `i*2-1` asterisks.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nHow many stars do you have to print at each iteration?\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow many spaces do you have to print at each iteration?\n[/spoiler]\n\n[spoiler title='Hint 3' collapse_link='true']\nWhat's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n[/spoiler]\n\n",
        "name": "Pyramid",
        "title": "4.8 Pyramid",
        "id": "8",
        "problemStatement": "### 4.8 Pyramid\n\nGiven an integer `N` draw a pyramid of asterisks. The pyramid should have `N` lines. On the **i**-th line there should be `N-i` spaces followed by `i*2-1` asterisks.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 3\n\n// your code here\n",
            "text": "```swift\nvar N = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " *\n***\n",
                "text": "```\n *\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n *\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  *\n ***\n*****\n",
                "text": "```\n  *\n ***\n*****\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n  *\n ***\n*****\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "   * \n  ***\n *****\n*******\n",
                "text": "```\n   * \n  ***\n *****\n*******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n   * \n  ***\n *****\n*******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "How many stars do you have to print at each iteration?\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nHow many stars do you have to print at each iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How many spaces do you have to print at each iteration?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow many spaces do you have to print at each iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "What's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n",
            "text": "[spoiler title='Hint 3' collapse_link='true']\nWhat's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n[/spoiler]\n",
            "params": {
              "title": "Hint 3",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            },
            "codes": [
              {
                "type": "code",
                "content": "###*###\n##***##\n#*****#\n*******\n",
                "text": "```\n###*###\n##***##\n#*****#\n*******\n```\n",
                "language": "undefined"
              }
            ]
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " *\n***\n",
                "text": "```\n *\n***\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n *\n***\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  *\n ***\n*****\n",
                "text": "```\n  *\n ***\n*****\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n  *\n ***\n*****\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "   * \n  ***\n *****\n*******\n",
                "text": "```\n   * \n  ***\n *****\n*******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n   * \n  ***\n *****\n*******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "How many stars do you have to print at each iteration?\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nHow many stars do you have to print at each iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How many spaces do you have to print at each iteration?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow many spaces do you have to print at each iteration?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "What's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n",
            "text": "[spoiler title='Hint 3' collapse_link='true']\nWhat's a general formula for the sequence: `1`, `3`, `5` ,`7` ?\n[/spoiler]\n",
            "params": {
              "title": "Hint 3",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nvar N = 3\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst note now many asterisks we draw on each line `(1, 3, 5, 7, 9, ...)`, this sequence is given by `2 * i - 1`. For each iteration `i` we'll also want to draw some empty spaces. Notice that the empty space has the form of an inverted triangle. This becomes more apparent if we replace the empty space with `#`.\n\n```\n###*###\n##***##\n#*****#\n*******\n```\n\nThe number of empty spaces we have to draw is equal to `N - i - 1`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            },
            "codes": [
              {
                "type": "code",
                "content": "###*###\n##***##\n#*****#\n*******\n",
                "text": "```\n###*###\n##***##\n#*****#\n*******\n```\n",
                "language": "undefined"
              }
            ]
          }
        ],
        "playgroundName": "Exercise4_8",
        "compileCode": true,
        "code": "var N = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.9 Rhombus\n\nGiven an integer `N` draw a rhombus of asterisks, like the ones in the examples.\n\n```swift\nvar N = 4\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nNotice that the upper half of the rhombus is the pyramid from the previous exercise.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nThe second half is the pyramid only inverted and with the last line removed.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n[/spoiler]\n\n",
        "text": "### 4.9 Rhombus\n\nGiven an integer `N` draw a rhombus of asterisks, like the ones in the examples.\n\n```swift\nvar N = 4\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nNotice that the upper half of the rhombus is the pyramid from the previous exercise.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nThe second half is the pyramid only inverted and with the last line removed.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n[/spoiler]\n\n",
        "name": "Rhombus",
        "title": "4.9 Rhombus",
        "id": "9",
        "problemStatement": "### 4.9 Rhombus\n\nGiven an integer `N` draw a rhombus of asterisks, like the ones in the examples.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 4\n\n// your code here\n",
            "text": "```swift\nvar N = 4\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " *\n***  \n *\n",
                "text": "```\n *\n***  \n *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n *\n***  \n *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  *\n ***\n*****\n ***\n  *\n",
                "text": "```\n  *\n ***\n*****\n ***\n  *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n  *\n ***\n*****\n ***\n  *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n",
                "text": "```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Notice that the upper half of the rhombus is the pyramid from the previous exercise.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nNotice that the upper half of the rhombus is the pyramid from the previous exercise.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "The second half is the pyramid only inverted and with the last line removed.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nThe second half is the pyramid only inverted and with the last line removed.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n",
                "text": "```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n*\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "*\n",
                "text": "```\n*\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n*\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n *\n***  \n *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " *\n***  \n *\n",
                "text": "```\n *\n***  \n *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n *\n***  \n *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n  *\n ***\n*****\n ***\n  *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  *\n ***\n*****\n ***\n  *\n",
                "text": "```\n  *\n ***\n*****\n ***\n  *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n  *\n ***\n*****\n ***\n  *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 4\n```\n\nOutput:\n```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 4\n",
                "text": "```swift\nvar N = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n",
                "text": "```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 4\n```\n\n",
              "Output": "```\n   * \n  ***\n *****\n*******\n *****\n  ***\n   *\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Notice that the upper half of the rhombus is the pyramid from the previous exercise.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nNotice that the upper half of the rhombus is the pyramid from the previous exercise.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "The second half is the pyramid only inverted and with the last line removed.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nThe second half is the pyramid only inverted and with the last line removed.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n",
                "text": "```swift\nlet N = 4\n\nfor i in 1...N {\n    for j in 0..<(N-i) {\n        print(\" \", terminator: \"\")\n    }\n    \n    for j in 1...2*i-1 {\n        print(\"*\", terminator: \"\")\n    }\n    print(\"\")\n}\n\nif (N > 1) {\n    for j in 2...N {\n        var i = N - j + 1\n        for k in 0..<(N-i) {\n            print(\" \", terminator: \"\")\n        }\n        \n        for k in 1...2*i-1 {\n            print(\"*\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo draw the rhombus we are going to draw the pyramid + a reversed pyramid.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_9",
        "compileCode": true,
        "code": "var N = 4\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.10 Aztec Pyramid\n\nGiven an integer `N` draw a Aztec pyramid of asterisks, like the ones in the examples.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nYou'll have to draw each line twice.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow many stars are on each line?\n[/spoiler]\n\n[spoiler title='Hint 3' collapse_link='true']\nWhat's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n[/spoiler]\n\n",
        "text": "### 4.10 Aztec Pyramid\n\nGiven an integer `N` draw a Aztec pyramid of asterisks, like the ones in the examples.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nYou'll have to draw each line twice.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow many stars are on each line?\n[/spoiler]\n\n[spoiler title='Hint 3' collapse_link='true']\nWhat's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n[/spoiler]\n\n",
        "name": "Aztec Pyramid",
        "title": "4.10 Aztec Pyramid",
        "id": "10",
        "problemStatement": "### 4.10 Aztec Pyramid\n\nGiven an integer `N` draw a Aztec pyramid of asterisks, like the ones in the examples.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 3\n\n// your code here\n",
            "text": "```swift\nvar N = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  **\n  **\n******\n******\n",
                "text": "```\n  **\n  **\n******\n******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n  **\n  **\n******\n******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "    **\n    **\n  ******\n  ******\n**********\n**********\n",
                "text": "```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to draw each line twice.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nYou'll have to draw each line twice.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How many stars are on each line?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow many stars are on each line?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "What's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n",
            "text": "[spoiler title='Hint 3' collapse_link='true']\nWhat's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n[/spoiler]\n",
            "params": {
              "title": "Hint 3",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n",
                "text": "```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n",
            "text": "[spoiler title='Explanation']\n\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 2\n```\n\nOutput:\n```\n  **\n  **\n******\n******\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\n",
                "text": "```swift\nvar N = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "  **\n  **\n******\n******\n",
                "text": "```\n  **\n  **\n******\n******\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\n```\n\n",
              "Output": "```\n  **\n  **\n******\n******\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "    **\n    **\n  ******\n  ******\n**********\n**********\n",
                "text": "```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n    **\n    **\n  ******\n  ******\n**********\n**********\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to draw each line twice.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nYou'll have to draw each line twice.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How many stars are on each line?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow many stars are on each line?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "What's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n",
            "text": "[spoiler title='Hint 3' collapse_link='true']\nWhat's the general term for the sequence `2`, `6`, `10`, `14`, ... ?\n[/spoiler]\n",
            "params": {
              "title": "Hint 3",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n",
                "text": "```swift\nlet N = 3\n\nfor i in 1...N {\n    for _ in 1...2 {\n        for _ in 0..<(N-i) {\n            print(\"  \", terminator: \"\")\n        }\n        \n        for _ in 1...2*i-1 {\n            print(\"**\", terminator: \"\")\n        }\n        print(\"\")\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n",
            "text": "[spoiler title='Explanation']\n\nTo draw the aztec pyramid we are going to start from the pyramid code and double the space and the asterisk print statements(`print(\" \") -> print(\"  \") and print(\"*\") -> print(\"**\")`) - this will double the width of the pyramid. Then we are going to double the inner nested loop to draw each step twice. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_10",
        "compileCode": true,
        "code": "var N = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.11 Chess Board\nGiven an integer `N` draw a chess board of size `N x N`. Each line of the chess board should have spaces and number signs(`#`) alternating. A space represents a white cell and the number sign a black one. The chess board should be bordered using `+`, `-` and `|` like in the examples below.\n\n```swift\nvar N = 8\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nFirst consider how to draw the top and bottom border.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n[/spoiler]\n\n\n",
        "text": "### 4.11 Chess Board\nGiven an integer `N` draw a chess board of size `N x N`. Each line of the chess board should have spaces and number signs(`#`) alternating. A space represents a white cell and the number sign a black one. The chess board should be bordered using `+`, `-` and `|` like in the examples below.\n\n```swift\nvar N = 8\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nFirst consider how to draw the top and bottom border.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n[/spoiler]\n\n\n",
        "name": "Chess Board",
        "title": "4.11 Chess Board",
        "id": "11",
        "problemStatement": "### 4.11 Chess Board\nGiven an integer `N` draw a chess board of size `N x N`. Each line of the chess board should have spaces and number signs(`#`) alternating. A space represents a white cell and the number sign a black one. The chess board should be bordered using `+`, `-` and `|` like in the examples below.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 8\n\n// your code here\n",
            "text": "```swift\nvar N = 8\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+-+\n|#|\n+-+\n\n",
                "text": "```\n+-+\n|#|\n+-+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n+-+\n|#|\n+-+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+---+\n|# #|\n| # |\n|# #|\n+---+\n\n",
                "text": "```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n",
                "text": "```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 8\n",
                "text": "```swift\nvar N = 8\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n",
                "text": "```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 8\n```\n\n",
              "Output": "```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "First consider how to draw the top and bottom border.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nFirst consider how to draw the top and bottom border.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n",
                "text": "```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n",
            "text": "[spoiler title='Explanation']\n\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 1\n```\n\nOutput:\n```\n+-+\n|#|\n+-+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 1\n",
                "text": "```swift\nvar N = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+-+\n|#|\n+-+\n\n",
                "text": "```\n+-+\n|#|\n+-+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 1\n```\n\n",
              "Output": "```\n+-+\n|#|\n+-+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+---+\n|# #|\n| # |\n|# #|\n+---+\n\n",
                "text": "```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n+---+\n|# #|\n| # |\n|# #|\n+---+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar N = 5\n```\n\nOutput:\n```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n",
                "text": "```swift\nvar N = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n",
                "text": "```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\n```\n\n",
              "Output": "```\n+-----+\n|# # #|\n| # # |\n|# # #|\n| # # |\n|# # #|\n+-----+\n\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar N = 8\n```\n\nOutput:\n```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 8\n",
                "text": "```swift\nvar N = 8\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n",
                "text": "```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 8\n```\n\n",
              "Output": "```\n+--------+\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n|# # # # |\n| # # # #|\n+--------+\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "First consider how to draw the top and bottom border.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nFirst consider how to draw the top and bottom border.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow can you alternate between \" \" and \"#\" ? Consider the remainder(`%`) when dividing the indices of the loops by `2`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n",
                "text": "```swift\nlet N = 8\n\n// prints the top border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n\nfor i in 1...N {\n    // prints the left border\n    print(\"|\", terminator: \"\")\n    for j in 1...N {\n        if i % 2 == j % 2 {\n            print(\"#\", terminator: \"\")\n        } else {\n            print(\" \", terminator: \"\")\n        }\n    }\n    // prints the right border a a new line\n    print(\"|\")\n}\n\n// prints the bottom border\nprint(\"+\", terminator: \"\")\nfor _ in 1...N {\n    print(\"-\", terminator: \"\")\n}\nprint(\"+\")\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n",
            "text": "[spoiler title='Explanation']\n\nDrawing the chess board requires us to solve two problems: drawing the border and drawing the board.\nThe board can be printed with two nested loops - the coloring will depend on the indexes of each cell.\nTo draw the border we can print the top and bottom separately from the board. The left and right margins will be created by printing a `|` character before and after each line of the board.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_11",
        "compileCode": true,
        "code": "var N = 8\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.12 Fibonacci\n\nWrite a program that prints the first `N` Fibonacci numbers. The first two Fibonacci numbers are `1`, the rest of the elements are the sum of the previous two. The first seven numbers are `1`, `1`, `2`, `3`, `5`, `8` and `13`.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\n\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n[/spoiler]\n\n\n[spoiler title='Explanation']\n\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n\n\n",
        "text": "### 4.12 Fibonacci\n\nWrite a program that prints the first `N` Fibonacci numbers. The first two Fibonacci numbers are `1`, the rest of the elements are the sum of the previous two. The first seven numbers are `1`, `1`, `2`, `3`, `5`, `8` and `13`.\n\n```swift\nvar N = 3\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']\n\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n[/spoiler]\n\n\n[spoiler title='Explanation']\n\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n\n\n",
        "name": "Fibonacci",
        "title": "4.12 Fibonacci",
        "id": "12",
        "problemStatement": "### 4.12 Fibonacci\n\nWrite a program that prints the first `N` Fibonacci numbers. The first two Fibonacci numbers are `1`, the rest of the elements are the sum of the previous two. The first seven numbers are `1`, `1`, `2`, `3`, `5`, `8` and `13`.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 3\n\n// your code here\n",
            "text": "```swift\nvar N = 3\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n1\n2\n",
                "text": "```\n1\n1\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n1\n1\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n",
                "text": "```swift\nvar N = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n1\n2\n3\n5\n8\n",
                "text": "```\n1\n1\n2\n3\n5\n8\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n```\n\n",
              "Output": "```\n1\n1\n2\n3\n5\n8\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n",
                "text": "```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n```\n\nOutput:\n```\n1\n1\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n",
                "text": "```swift\nvar N = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n1\n2\n",
                "text": "```\n1\n1\n2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n```\n\n",
              "Output": "```\n1\n1\n2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n```\n\nOutput:\n```\n1\n1\n2\n3\n5\n8\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n",
                "text": "```swift\nvar N = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n1\n2\n3\n5\n8\n",
                "text": "```\n1\n1\n2\n3\n5\n8\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n```\n\n",
              "Output": "```\n1\n1\n2\n3\n5\n8\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nUse two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n",
                "text": "```swift\nvar N = 10\n\nvar a = 1\nvar b = 0\n\nfor _ in 1...N {\n    print(a)\n    var tmp = a + b\n    b = a\n    a = tmp\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe notice that the series remains the same if we start with 0, 1 and then add the last two. Use two variables `a = 1` and `b = 0`. At each step `a` should be the *i*-th Fibonacci number, and `b` the *i-1*-th. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_12",
        "compileCode": true,
        "code": "var N = 3\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.13 Leap Years\n\nWrite a program that prints the next `N` `leap years` starting with `leapYear`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. \n`Leap years` occur every `4` years, `2012` was a leap year and 2016 will be a `leap year`.  \nExcept that every `100` years special rules apply. Years that are divisible by `100` are not `leap years` if they are not divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\n\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 2016\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n[/spoiler]\n\n\n",
        "text": "### 4.13 Leap Years\n\nWrite a program that prints the next `N` `leap years` starting with `leapYear`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. \n`Leap years` occur every `4` years, `2012` was a leap year and 2016 will be a `leap year`.  \nExcept that every `100` years special rules apply. Years that are divisible by `100` are not `leap years` if they are not divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\n\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 2016\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n[/spoiler]\n\n\n",
        "name": "Leap Years",
        "title": "4.13 Leap Years",
        "id": "13",
        "problemStatement": "### 4.13 Leap Years\n\nWrite a program that prints the next `N` `leap years` starting with `leapYear`. A `leap year` is a year containing an extra day. It has `366 days` instead of the normal `365 days`. The extra day is added in February, which has `29 days` instead of the normal `28 days`. \n`Leap years` occur every `4` years, `2012` was a leap year and 2016 will be a `leap year`.  \nExcept that every `100` years special rules apply. Years that are divisible by `100` are not `leap years` if they are not divisible by `400`. For example `1900` was not a `leap year`, but `2000` was.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 3\n\n// the current leap year\nvar leapYear = 2016\n\n// your code here\n",
            "text": "```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 2016\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n\n// the current leap year\nvar leapYear = 2016\n",
                "text": "```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2016\n2020\n2024\n2028\n2032\n2036\n",
                "text": "```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\n",
              "Output": "```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\n// the current leap year\nvar leapYear = 1996\n",
                "text": "```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1996\n2000\n2004\n",
                "text": "```\n1996\n2000\n2004\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\n",
              "Output": "```\n1996\n2000\n2004\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n",
                "text": "```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\nOutput:\n```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n\n// the current leap year\nvar leapYear = 2016\n",
                "text": "```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2016\n2020\n2024\n2028\n2032\n2036\n",
                "text": "```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n\n// the current leap year\nvar leapYear = 2016\n```\n\n",
              "Output": "```\n2016\n2020\n2024\n2028\n2032\n2036\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\nOutput:\n```\n1996\n2000\n2004\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 3\n\n// the current leap year\nvar leapYear = 1996\n",
                "text": "```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1996\n2000\n2004\n",
                "text": "```\n1996\n2000\n2004\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 3\n\n// the current leap year\nvar leapYear = 1996\n```\n\n",
              "Output": "```\n1996\n2000\n2004\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that the variable `leapYear` is a leap year to begin with. Given a leap year how can you generate the next leap year ?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n",
                "text": "```swift\nvar N = 5\n\n// the current leap year\nvar leapYear = 2016\n\n// the number of leap years that were printed so far\nvar cnt = 0\n\n// until we print N years\nwhile cnt < N {\n    // print the next leap year\n    print(leapYear)\n    \n    // increase the counter\n    ++cnt\n    \n    // go to the next leap year\n    leapYear += 4 \n    if leapYear % 100 == 0 && leapYear % 400 != 0 {\n        leapYear += 4\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe start a while loop which stops after we print `N` leap years. We print the current leap year and jump to the next one - 4 years into the future - except for those special case in which the year is divisible by 100 and not by 400 - then we need to jump 4 more years.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_13",
        "compileCode": true,
        "code": "var N = 3\n\n// the current leap year\nvar leapYear = 2016\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.14 Reverse\n\nYou are given a `number`. Print the number with the digits in reversed order.\n\n```swift\nvar number = 1234\n\n//your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n[/spoiler]\n\n\n",
        "text": "### 4.14 Reverse\n\nYou are given a `number`. Print the number with the digits in reversed order.\n\n```swift\nvar number = 1234\n\n//your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n[/spoiler]\n\n\n",
        "name": "Reverse",
        "title": "4.14 Reverse",
        "id": "14",
        "problemStatement": "### 4.14 Reverse\n\nYou are given a `number`. Print the number with the digits in reversed order.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 1234\n\n//your code here\n",
            "text": "```swift\nvar number = 1234\n\n//your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\n",
                "text": "```swift\nvar number = 12345\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "54321\n",
                "text": "```\n54321\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12345\n```\n\n",
              "Output": "```\n54321\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 23432\n",
                "text": "```swift\nvar number = 23432\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "23432\n",
                "text": "```\n23432\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 23432\n```\n\n",
              "Output": "```\n23432\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1000\n",
                "text": "```swift\nvar number = 1000\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0001\n",
                "text": "```\n0001\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1000\n```\n\n",
              "Output": "```\n0001\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "To get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n",
                "text": "```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 12345\n```\n\nOutput:\n```\n54321\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\n",
                "text": "```swift\nvar number = 12345\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "54321\n",
                "text": "```\n54321\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12345\n```\n\n",
              "Output": "```\n54321\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 23432\n```\n\nOutput:\n```\n23432\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 23432\n",
                "text": "```swift\nvar number = 23432\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "23432\n",
                "text": "```\n23432\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 23432\n```\n\n",
              "Output": "```\n23432\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 1000\n```\n\nOutput:\n```\n0001\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1000\n",
                "text": "```swift\nvar number = 1000\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0001\n",
                "text": "```\n0001\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1000\n```\n\n",
              "Output": "```\n0001\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "To get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo get the last digit use the `%` operator (the reminder to `10` is the last digit). To get the number without the last digit divide by `10`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n",
                "text": "```swift\nvar number = 1234\n\nwhile number > 0 {\n    print(number % 10, terminator: \"\")\n    number /= 10\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe can get the last digit of a number if we calculate the reminder to 10. We can remove the last digit from a number if we divide it by 10. \nPrint the last digit, then remove it. If we repeat these steps until the number reaches 0 we will print all the digits in reverse order. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_14",
        "compileCode": true,
        "code": "var number = 1234\n\n//your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.15 GCD\n\nYou are given two numbers `a` and `b`. Find and print the greatest common divisor of `a` and `b`.   \nThe greatest common divisor of `a` and `b` is the largest number that divides both `a` and `b`.\n\n```swift\nvar a = 24\nvar b = 18\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']\nThe smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nFind the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n[/spoiler]\n\n\n",
        "text": "### 4.15 GCD\n\nYou are given two numbers `a` and `b`. Find and print the greatest common divisor of `a` and `b`.   \nThe greatest common divisor of `a` and `b` is the largest number that divides both `a` and `b`.\n\n```swift\nvar a = 24\nvar b = 18\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']\nThe smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nFind the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n[/spoiler]\n\n\n",
        "name": "GCD",
        "title": "4.15 GCD",
        "id": "15",
        "problemStatement": "### 4.15 GCD\n\nYou are given two numbers `a` and `b`. Find and print the greatest common divisor of `a` and `b`.   \nThe greatest common divisor of `a` and `b` is the largest number that divides both `a` and `b`.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = 24\nvar b = 18\n\n// your code here\n",
            "text": "```swift\nvar a = 24\nvar b = 18\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 24\nvar b = 18\n",
                "text": "```swift\nvar a = 24\nvar b = 18\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 24\nvar b = 18\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 21\nvar b = 13\n",
                "text": "```swift\nvar a = 21\nvar b = 13\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 21\nvar b = 13\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12\nvar b = 36\n",
                "text": "```swift\nvar a = 12\nvar b = 36\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "12\n",
                "text": "```\n12\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12\nvar b = 36\n```\n\n",
              "Output": "```\n12\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "The smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nThe smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Find the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nFind the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n",
                "text": "```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar a = 24\nvar b = 18\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 24\nvar b = 18\n",
                "text": "```swift\nvar a = 24\nvar b = 18\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 24\nvar b = 18\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar a = 21\nvar b = 13\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 21\nvar b = 13\n",
                "text": "```swift\nvar a = 21\nvar b = 13\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 21\nvar b = 13\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar a = 12\nvar b = 36\n```\n\nOutput:\n```\n12\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12\nvar b = 36\n",
                "text": "```swift\nvar a = 12\nvar b = 36\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "12\n",
                "text": "```\n12\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12\nvar b = 36\n```\n\n",
              "Output": "```\n12\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "The smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nThe smallest divisor of `a` and `b` is `1`. And the greatest value can be at most `min(a, b)`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Find the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nFind the minimum of `a` and `b` and store it in `maxDiv`.  \nWrite a for loop that goes from `1` to `maxDiv` and check each number.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n",
                "text": "```swift\nvar a = 24\nvar b = 18\n\nvar maxDiv = a\n\nif b < maxDiv {\n    maxDiv = b\n}\n\nvar gcd = 1\n\nfor i in 1...maxDiv {\n    if (a % i == 0) && (b % i == 0){\n        gcd = i\n    }\n}\n\nprint(gcd) // 6\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe smallest divisor of `a` and `b` is 1. And the greatest value can be at most `min(a, b)`, this will be stored in `maxDiv`. \nUsing a loop we check each number from 1 to `maxDiv` as a posible common divisor of `a` and `b`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_15",
        "compileCode": true,
        "code": "var a = 24\nvar b = 18\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.16 Prime numbers\n\nYou are given a `number`. Print `\"prime\"` if the number is a prime and `\"not prime\"` otherwise.  \nA number is a prime if it has **exactly** 2 distinct divisors (1 and itself).\n\n```swift\nvar number = 17\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nCount the number of divisors of the input number.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n[/spoiler]\n\n\n\n",
        "text": "### 4.16 Prime numbers\n\nYou are given a `number`. Print `\"prime\"` if the number is a prime and `\"not prime\"` otherwise.  \nA number is a prime if it has **exactly** 2 distinct divisors (1 and itself).\n\n```swift\nvar number = 17\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']  \nCount the number of divisors of the input number.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n[/spoiler]\n\n\n\n",
        "name": "Prime numbers",
        "title": "4.16 Prime numbers",
        "id": "16",
        "problemStatement": "### 4.16 Prime numbers\n\nYou are given a `number`. Print `\"prime\"` if the number is a prime and `\"not prime\"` otherwise.  \nA number is a prime if it has **exactly** 2 distinct divisors (1 and itself).\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 17\n\n// your code here\n",
            "text": "```swift\nvar number = 17\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 2\n",
                "text": "```swift\nvar number = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //2 is only divisible by 1 and 2\n",
                "text": "```\nprime //2 is only divisible by 1 and 2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 2\n```\n\n",
              "Output": "```\nprime //2 is only divisible by 1 and 2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 3\n",
                "text": "```swift\nvar number = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //3 is only divisible by 1 and 3\n",
                "text": "```\nprime //3 is only divisible by 1 and 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 3\n```\n\n",
              "Output": "```\nprime //3 is only divisible by 1 and 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 15 \n",
                "text": "```swift\nvar number = 15 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not prime //15 is divisible by 1,3,5 and 15\n",
                "text": "```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 15 \n```\n\n",
              "Output": "```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 17\n",
                "text": "```swift\nvar number = 17\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //17 is only divisible by 1 and 17\n",
                "text": "```\nprime //17 is only divisible by 1 and 17\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 17\n```\n\n",
              "Output": "```\nprime //17 is only divisible by 1 and 17\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1\n",
                "text": "```swift\nvar number = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n",
                "text": "```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1\n```\n\n",
              "Output": "```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Count the number of divisors of the input number.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCount the number of divisors of the input number.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n",
                "text": "```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 2\n```\n\nOutput:\n```\nprime //2 is only divisible by 1 and 2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 2\n",
                "text": "```swift\nvar number = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //2 is only divisible by 1 and 2\n",
                "text": "```\nprime //2 is only divisible by 1 and 2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 2\n```\n\n",
              "Output": "```\nprime //2 is only divisible by 1 and 2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 3\n```\n\nOutput:\n```\nprime //3 is only divisible by 1 and 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 3\n",
                "text": "```swift\nvar number = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //3 is only divisible by 1 and 3\n",
                "text": "```\nprime //3 is only divisible by 1 and 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 3\n```\n\n",
              "Output": "```\nprime //3 is only divisible by 1 and 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15 \n```\n\nOutput:\n```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 15 \n",
                "text": "```swift\nvar number = 15 \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not prime //15 is divisible by 1,3,5 and 15\n",
                "text": "```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 15 \n```\n\n",
              "Output": "```\nnot prime //15 is divisible by 1,3,5 and 15\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 17\n```\n\nOutput:\n```\nprime //17 is only divisible by 1 and 17\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 17\n",
                "text": "```swift\nvar number = 17\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "prime //17 is only divisible by 1 and 17\n",
                "text": "```\nprime //17 is only divisible by 1 and 17\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 17\n```\n\n",
              "Output": "```\nprime //17 is only divisible by 1 and 17\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 1\n```\n\nOutput:\n```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 1\n",
                "text": "```swift\nvar number = 1\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "not prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n",
                "text": "```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 1\n```\n\n",
              "Output": "```\nnot prime //1 is only divisible by 1 (needs exactly 2 divisors to be a prime, only has 1)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Count the number of divisors of the input number.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nCount the number of divisors of the input number.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n",
                "text": "```swift\nvar number = 17\n\nvar numberOfDivisors = 0\n\nfor i in 1...number {\n\tif number % i == 0 {\n\t\tnumberOfDivisors += 1\n\t}\n} \n\nif numberOfDivisors == 2 {\n\tprint(\"prime\")\n} else {\n\tprint(\"not prime\")\n}\n\n\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe count the number of divisor of `number` and store the result in `numberOfDivisors`. If `numberOfDivisors` if 2 then the number is prime.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_16",
        "compileCode": true,
        "code": "var number = 17\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.17 Factoring numbers\n\nYou are given a `number`. Decompose `number` into prime factor and write it as an expression(see examples).\n\n```swift\nvar number = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nDividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n[/spoiler]\n\n",
        "text": "### 4.17 Factoring numbers\n\nYou are given a `number`. Decompose `number` into prime factor and write it as an expression(see examples).\n\n```swift\nvar number = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nDividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n[/spoiler]\n\n",
        "name": "Factoring numbers",
        "title": "4.17 Factoring numbers",
        "id": "17",
        "problemStatement": "### 4.17 Factoring numbers\n\nYou are given a `number`. Decompose `number` into prime factor and write it as an expression(see examples).\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 10\n\n// your code here\n",
            "text": "```swift\nvar number = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 24\n",
                "text": "```swift\nvar number = 24\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "24 = 2 * 2 * 2 * 3\n",
                "text": "```\n24 = 2 * 2 * 2 * 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 24\n```\n\n",
              "Output": "```\n24 = 2 * 2 * 2 * 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12\n",
                "text": "```swift\nvar number = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "12 = 2 * 2 * 3\n",
                "text": "```\n12 = 2 * 2 * 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12\n```\n\n",
              "Output": "```\n12 = 2 * 2 * 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 15\n",
                "text": "```swift\nvar number = 15\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "15 = 3 * 5\n",
                "text": "```\n15 = 3 * 5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 15\n```\n\n",
              "Output": "```\n15 = 3 * 5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 7\n",
                "text": "```swift\nvar number = 7\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7 = 7\n",
                "text": "```\n7 = 7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 7\n```\n\n",
              "Output": "```\n7 = 7\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 4\n",
                "text": "```swift\nvar number = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4 = 2 * 2\n",
                "text": "```\n4 = 2 * 2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 4\n```\n\n",
              "Output": "```\n4 = 2 * 2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Dividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nDividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n",
                "text": "```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twist\n\nShow the powers of each prime factor instead of showing it multiple times.\n\n```\n12 = 2^2 * 3\n6 = 2 * 3\n72 = 2^3 * 3^2\n13 = 13\n15 = 3 * 5\n30 = 2 * 3 * 5\n```\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n[/spoiler]\n\n",
            "text": "#### Twist\n\nShow the powers of each prime factor instead of showing it multiple times.\n\n```\n12 = 2^2 * 3\n6 = 2 * 3\n72 = 2^3 * 3^2\n13 = 13\n15 = 3 * 5\n30 = 2 * 3 * 5\n```\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n[/spoiler]\n\n",
            "problemStatement": "\nShow the powers of each prime factor instead of showing it multiple times.\n\n\n\n",
            "codes": [
              {
                "type": "code",
                "content": "12 = 2^2 * 3\n6 = 2 * 3\n72 = 2^3 * 3^2\n13 = 13\n15 = 3 * 5\n30 = 2 * 3 * 5\n",
                "text": "```\n12 = 2^2 * 3\n6 = 2 * 3\n72 = 2^3 * 3^2\n13 = 13\n15 = 3 * 5\n30 = 2 * 3 * 5\n```\n",
                "language": "undefined"
              }
            ],
            "spoilers": [
              {
                "type": "spoiler",
                "content": "```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "var number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n",
                    "text": "```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n",
                    "language": "swift"
                  }
                ]
              }
            ],
            "compileSolution": true,
            "solutions": [
              {
                "type": "spoiler",
                "content": "```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "var number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n",
                    "text": "```swift\nvar number = 72 // 2^3 * 3^2\n\nprint(\"\\(number) = \", terminator: \" \")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        var put = 0\n        while (number % i == 0) {\n            number /= i\n            put += 1\n        }\n        if isFirst {\n            isFirst = false\n        } else {\n            print(\" * \", terminator: \" \")\n        }\n        print(\"\\(i)^\\(put)\", terminator: \" \")\n    }\n}\n```\n",
                    "language": "swift"
                  }
                ]
              }
            ],
            "playgroundName": "Exercise_",
            "compileCode": true,
            "misc": [

            ]
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar number = 24\n```\n\nOutput:\n```\n24 = 2 * 2 * 2 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 24\n",
                "text": "```swift\nvar number = 24\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "24 = 2 * 2 * 2 * 3\n",
                "text": "```\n24 = 2 * 2 * 2 * 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 24\n```\n\n",
              "Output": "```\n24 = 2 * 2 * 2 * 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar number = 12\n```\n\nOutput:\n```\n12 = 2 * 2 * 3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12\n",
                "text": "```swift\nvar number = 12\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "12 = 2 * 2 * 3\n",
                "text": "```\n12 = 2 * 2 * 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12\n```\n\n",
              "Output": "```\n12 = 2 * 2 * 3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \nInput:\n```swift\nvar number = 15\n```\n\nOutput:\n```\n15 = 3 * 5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 15\n",
                "text": "```swift\nvar number = 15\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "15 = 3 * 5\n",
                "text": "```\n15 = 3 * 5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 15\n```\n\n",
              "Output": "```\n15 = 3 * 5\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']  \nInput:\n```swift\nvar number = 7\n```\n\nOutput:\n```\n7 = 7\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 7\n",
                "text": "```swift\nvar number = 7\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "7 = 7\n",
                "text": "```\n7 = 7\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 7\n```\n\n",
              "Output": "```\n7 = 7\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n",
            "text": "[spoiler title='Example 5' collapse_link='true']  \nInput:\n```swift\nvar number = 4\n```\n\nOutput:\n```\n4 = 2 * 2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 4\n",
                "text": "```swift\nvar number = 4\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "4 = 2 * 2\n",
                "text": "```\n4 = 2 * 2\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 4\n```\n\n",
              "Output": "```\n4 = 2 * 2\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Dividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nDividing a number by one of it's factors will result in a smaller number. A number can have a prime factor divisor multiple times, ex: `8 = 2 * 2 * 2`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n",
                "text": "```swift\nvar number = 10\nprint(\"\\(number) = \", terminator: \"\")\n\nvar isFirst = true\n\nfor i in 2...number {\n    if number % i == 0 {\n        while (number % i == 0) {\n            number /= i\n            \n            if isFirst {\n                isFirst = false\n            } else {\n                print(\" * \", terminator: \"\")\n            }\n            \n            print(i, terminator: \"\")\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo decompose a number into prime factor we have to repeatedly divide the number by the smallest number that can divide it and continue with the result. For example to factor 12 the smallest number than can divide it is 2. 12 / 2 is 6. 6 is also divisible by 2 the remaining number is 3 which is prime - so 12 = 2 * 2 * 3.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_17",
        "compileCode": true,
        "code": "var number = 10\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 4.18 Free of squares\n\nFind all numbers free of squares less than or equal to `N`. A number is free of square if it cannot be divided by any square number except `1`.\n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n[/spoiler]\n\n\n",
        "text": "### 4.18 Free of squares\n\nFind all numbers free of squares less than or equal to `N`. A number is free of square if it cannot be divided by any square number except `1`.\n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n[/spoiler]\n\n\n",
        "name": "Free of squares",
        "title": "4.18 Free of squares",
        "id": "18",
        "problemStatement": "### 4.18 Free of squares\n\nFind all numbers free of squares less than or equal to `N`. A number is free of square if it cannot be divided by any square number except `1`.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 10\n\n// your code here\n",
            "text": "```swift\nvar N = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n",
                "text": "```swift\nvar N = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n7\n10\n",
                "text": "```\n1\n2\n3\n5\n6\n7\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 10\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n7\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\n",
                "text": "```swift\nvar N = 30\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n",
                "text": "```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 30\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n",
                "text": "```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n",
            "text": "[spoiler title='Explanation']\n\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "4",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \nInput:\n```swift\nvar N = 10\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n",
                "text": "```swift\nvar N = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n7\n10\n",
                "text": "```\n1\n2\n3\n5\n6\n7\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 10\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n7\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \nInput:\n```swift\nvar N = 30\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\n",
                "text": "```swift\nvar N = 30\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n",
                "text": "```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 30\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n7\n10\n11\n13\n14\n15\n17\n19\n21\n22\n23\n26\n29\n30\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n",
                "text": "```swift\nvar N = 10\n\nprint(1)\n\nfor i in 2...N {\n    var isFree = true\n    \n    var a = i\n    \n    for j in 2...a {\n        if a % j == 0 {\n            var put = 0\n            while (a % j == 0) {\n                a /= j\n                put += 1\n            }\n            if put > 1 {\n                isFree = false\n            }\n        }\n    }\n    \n    if isFree {\n        print(i)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n",
            "text": "[spoiler title='Explanation']\n\nTo check if a number is free of squares we are going to decompose it into prime factor and count the frequency of each one - if at leat one appeared more than one then the number is not free of squares. We are going to do this for all number smaller than `N`. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise4_18",
        "compileCode": true,
        "code": "var N = 10\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 5. Strings\n\nA string is an ordered collection of characters, such as `\"We ❤ Swift\"` or `\"eat, sleep, code, repeat!\"`. In Swift strings are represented by the `String` type which is a collection of values of `Character` type. \n\n#### Creating strings\n\nYou can include predefined `String` values within your code as string literals. A string literal is a fixed sequence of textual characters surrounded by a pair of double quotes (\"\").\n\n```swift\nlet aString = \"Hello\"\n```\n\nTake note of a special case of string, the empty string.\n\n```swift\nvar emptyString = \"\" // empty string literal\n```\n\nYou can create a new string by concatenating two strings using the `+` operator.\n\n```swift\nlet newString = \"Hello\" + \" swift lovers\" // \"Hello swift lovers\"\n```\n\nString interpolation can also be used to combine strings. By using the `\\(<value>)` syntax inside a string literal.\n\n```swift\nlet bat = \"BAT\"\nlet man = \"MAN\"\n\n// \"BATMAN\" - \\(bat) will be replaced with \"BAT\" and \\(man) with \"MAN\" \nlet batman = \"\\(bat)\\(man)\" \n\nprint(\"\\(bat) + \\(man) = \\(batman)\")\n// \"BAT + MAN = BATMAN\"\n```\n\n#### Characters\n\nIn some cases you will want to work with the individual characters that make up the string. To do that you can use the **for-in** syntax. A string exposes the list of characters with the `characters` property. \n\n```swift\nvar someString = \"this string has 29 characters\"\n\nfor character in someString.characters {\n    // to convert a Character into a String use string interpolation\n    // you will need to do this in order to compare characters\n    var characterAsString = \"\\(character)\"\n    \n    \n    print(characterAsString)\n}\n```\n\nTo see how many character a string has we can use the `count` property on the `characters` property of the string.\n\n```swift\nvar string = \"This string has 29 characters\"\nprint(string.characters.count) // 29\n```\n\n#### Comparing\n\nYou can compare string using the same operators as numbers, but usually you only care about equality.\n\n```swift\n\"We ❤ Swift\" == \"We ❤ Swift\" // true\n\"We ❤ Swift\" == \"we ❤ swift\" // false - string comparison is case sensitive\n\n\"We ❤ Swift\" != \"We ❤ Swift\" // false \n\"We ❤ Swift\" != \"we ❤ swift\" // true\n```\n\n",
    "text": "## 5. Strings\n\nA string is an ordered collection of characters, such as `\"We ❤ Swift\"` or `\"eat, sleep, code, repeat!\"`. In Swift strings are represented by the `String` type which is a collection of values of `Character` type. \n\n#### Creating strings\n\nYou can include predefined `String` values within your code as string literals. A string literal is a fixed sequence of textual characters surrounded by a pair of double quotes (\"\").\n\n```swift\nlet aString = \"Hello\"\n```\n\nTake note of a special case of string, the empty string.\n\n```swift\nvar emptyString = \"\" // empty string literal\n```\n\nYou can create a new string by concatenating two strings using the `+` operator.\n\n```swift\nlet newString = \"Hello\" + \" swift lovers\" // \"Hello swift lovers\"\n```\n\nString interpolation can also be used to combine strings. By using the `\\(<value>)` syntax inside a string literal.\n\n```swift\nlet bat = \"BAT\"\nlet man = \"MAN\"\n\n// \"BATMAN\" - \\(bat) will be replaced with \"BAT\" and \\(man) with \"MAN\" \nlet batman = \"\\(bat)\\(man)\" \n\nprint(\"\\(bat) + \\(man) = \\(batman)\")\n// \"BAT + MAN = BATMAN\"\n```\n\n#### Characters\n\nIn some cases you will want to work with the individual characters that make up the string. To do that you can use the **for-in** syntax. A string exposes the list of characters with the `characters` property. \n\n```swift\nvar someString = \"this string has 29 characters\"\n\nfor character in someString.characters {\n    // to convert a Character into a String use string interpolation\n    // you will need to do this in order to compare characters\n    var characterAsString = \"\\(character)\"\n    \n    \n    print(characterAsString)\n}\n```\n\nTo see how many character a string has we can use the `count` property on the `characters` property of the string.\n\n```swift\nvar string = \"This string has 29 characters\"\nprint(string.characters.count) // 29\n```\n\n#### Comparing\n\nYou can compare string using the same operators as numbers, but usually you only care about equality.\n\n```swift\n\"We ❤ Swift\" == \"We ❤ Swift\" // true\n\"We ❤ Swift\" == \"we ❤ swift\" // false - string comparison is case sensitive\n\n\"We ❤ Swift\" != \"We ❤ Swift\" // false \n\"We ❤ Swift\" != \"we ❤ swift\" // true\n```\n\n",
    "name": "Strings",
    "title": "Strings",
    "id": "5",
    "codes": [
      {
        "type": "code",
        "content": "let aString = \"Hello\"\n",
        "text": "```swift\nlet aString = \"Hello\"\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var emptyString = \"\" // empty string literal\n",
        "text": "```swift\nvar emptyString = \"\" // empty string literal\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "let newString = \"Hello\" + \" swift lovers\" // \"Hello swift lovers\"\n",
        "text": "```swift\nlet newString = \"Hello\" + \" swift lovers\" // \"Hello swift lovers\"\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "let bat = \"BAT\"\nlet man = \"MAN\"\n\n// \"BATMAN\" - \\(bat) will be replaced with \"BAT\" and \\(man) with \"MAN\" \nlet batman = \"\\(bat)\\(man)\" \n\nprint(\"\\(bat) + \\(man) = \\(batman)\")\n// \"BAT + MAN = BATMAN\"\n",
        "text": "```swift\nlet bat = \"BAT\"\nlet man = \"MAN\"\n\n// \"BATMAN\" - \\(bat) will be replaced with \"BAT\" and \\(man) with \"MAN\" \nlet batman = \"\\(bat)\\(man)\" \n\nprint(\"\\(bat) + \\(man) = \\(batman)\")\n// \"BAT + MAN = BATMAN\"\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var someString = \"this string has 29 characters\"\n\nfor character in someString.characters {\n    // to convert a Character into a String use string interpolation\n    // you will need to do this in order to compare characters\n    var characterAsString = \"\\(character)\"\n    \n    \n    print(characterAsString)\n}\n",
        "text": "```swift\nvar someString = \"this string has 29 characters\"\n\nfor character in someString.characters {\n    // to convert a Character into a String use string interpolation\n    // you will need to do this in order to compare characters\n    var characterAsString = \"\\(character)\"\n    \n    \n    print(characterAsString)\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var string = \"This string has 29 characters\"\nprint(string.characters.count) // 29\n",
        "text": "```swift\nvar string = \"This string has 29 characters\"\nprint(string.characters.count) // 29\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "\"We ❤ Swift\" == \"We ❤ Swift\" // true\n\"We ❤ Swift\" == \"we ❤ swift\" // false - string comparison is case sensitive\n\n\"We ❤ Swift\" != \"We ❤ Swift\" // false \n\"We ❤ Swift\" != \"we ❤ swift\" // true\n",
        "text": "```swift\n\"We ❤ Swift\" == \"We ❤ Swift\" // true\n\"We ❤ Swift\" == \"we ❤ swift\" // false - string comparison is case sensitive\n\n\"We ❤ Swift\" != \"We ❤ Swift\" // false \n\"We ❤ Swift\" != \"we ❤ swift\" // true\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 5.1 Full name\n\nYou are given the `firstName` and `lastName` of a user. Create a string variable called `fullName` that contains the full name of the user.\n\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse string concatenation or use string interpolation.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n[/spoiler]\n\n",
        "text": "### 5.1 Full name\n\nYou are given the `firstName` and `lastName` of a user. Create a string variable called `fullName` that contains the full name of the user.\n\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse string concatenation or use string interpolation.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n[/spoiler]\n\n",
        "name": "Full name",
        "title": "5.1 Full name",
        "id": "1",
        "problemStatement": "### 5.1 Full name\n\nYou are given the `firstName` and `lastName` of a user. Create a string variable called `fullName` that contains the full name of the user.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\n// your code here\n",
            "text": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = \"Andrei\"\nvar b = \"Puni\"\n",
                "text": "```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"Andrei Puni\"\n",
                "text": "```\n\"Andrei Puni\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\n",
              "Output": "```\n\"Andrei Puni\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = \"Silviu\"\nvar b = \"Pop\"\n",
                "text": "```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"Silviu Pop\"\n",
                "text": "```\n\"Silviu Pop\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\n",
              "Output": "```\n\"Silviu Pop\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use string concatenation or use string interpolation.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse string concatenation or use string interpolation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n",
                "text": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n",
                "text": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\nOutput:\n```\n\"Andrei Puni\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = \"Andrei\"\nvar b = \"Puni\"\n",
                "text": "```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"Andrei Puni\"\n",
                "text": "```\n\"Andrei Puni\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = \"Andrei\"\nvar b = \"Puni\"\n```\n\n",
              "Output": "```\n\"Andrei Puni\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\nOutput:\n```\n\"Silviu Pop\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = \"Silviu\"\nvar b = \"Pop\"\n",
                "text": "```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"Silviu Pop\"\n",
                "text": "```\n\"Silviu Pop\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = \"Silviu\"\nvar b = \"Pop\"\n```\n\n",
              "Output": "```\n\"Silviu Pop\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use string concatenation or use string interpolation.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse string concatenation or use string interpolation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n",
                "text": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = firstName + \" \" + lastName\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n",
                "text": "```swift\nvar firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\nvar fullName = \"\\(firstName) \\(lastName)\"\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe full name can be obatined in multiple ways. Either you use string concatenation between firstName, \" \" and lastName (`fullName = firstName + \" \" + lastName`) or you can use string interpolation: `fullName = \"\\(firstName) \\(lastName)\"`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_1",
        "compileCode": true,
        "code": "var firstName = \"Andrei\"\nvar lastName = \"Puni\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.2 Sum\n\nYou are given two numbers `a` and `b`. Compute the sum of `a` and `b` and create a string stored in a variable named `formattedSum` that contains the `sum` written like bellow:\n\n```\nFor a = 2 and b = 5\n  \n\"2 + 5 = 7\"\n\nFor a = 12 and b = 19\n  \n\"12 + 19 = 31\"\n```\n\n```swift\nvar a = 14\nvar b = 23\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse string interpolation.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n[/spoiler]\n\n",
        "text": "### 5.2 Sum\n\nYou are given two numbers `a` and `b`. Compute the sum of `a` and `b` and create a string stored in a variable named `formattedSum` that contains the `sum` written like bellow:\n\n```\nFor a = 2 and b = 5\n  \n\"2 + 5 = 7\"\n\nFor a = 12 and b = 19\n  \n\"12 + 19 = 31\"\n```\n\n```swift\nvar a = 14\nvar b = 23\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse string interpolation.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n[/spoiler]\n\n",
        "name": "Sum",
        "title": "5.2 Sum",
        "id": "2",
        "problemStatement": "### 5.2 Sum\n\nYou are given two numbers `a` and `b`. Compute the sum of `a` and `b` and create a string stored in a variable named `formattedSum` that contains the `sum` written like bellow:\n\n```\nFor a = 2 and b = 5\n  \n\"2 + 5 = 7\"\n\nFor a = 12 and b = 19\n  \n\"12 + 19 = 31\"\n```\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "For a = 2 and b = 5\n  \n\"2 + 5 = 7\"\n\nFor a = 12 and b = 19\n  \n\"12 + 19 = 31\"\n",
            "text": "```\nFor a = 2 and b = 5\n  \n\"2 + 5 = 7\"\n\nFor a = 12 and b = 19\n  \n\"12 + 19 = 31\"\n```\n",
            "language": "undefined"
          },
          {
            "type": "code",
            "content": "var a = 14\nvar b = 23\n\n// your code here\n",
            "text": "```swift\nvar a = 14\nvar b = 23\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 14\nvar b = 19\n",
                "text": "```swift\nvar a = 14\nvar b = 19\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "formattedSum = \"14 + 19 = 31\"\n",
                "text": "```swift\nformattedSum = \"14 + 19 = 31\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 14\nvar b = 19\n```\n\n",
              "Expected values": "```swift\nformattedSum = \"14 + 19 = 31\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12345\nvar b = 98765\n",
                "text": "```swift\nvar a = 12345\nvar b = 98765\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "formattedSum = \"12345 + 98765 = 111110\"\n",
                "text": "```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12345\nvar b = 98765\n```\n\n",
              "Expected values": "```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use string interpolation.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse string interpolation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n",
                "text": "```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n",
            "text": "[spoiler title='Explanation']\n\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 14\nvar b = 19\n```\n\nExpected values:\n```swift\nformattedSum = \"14 + 19 = 31\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 14\nvar b = 19\n",
                "text": "```swift\nvar a = 14\nvar b = 19\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "formattedSum = \"14 + 19 = 31\"\n",
                "text": "```swift\nformattedSum = \"14 + 19 = 31\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 14\nvar b = 19\n```\n\n",
              "Expected values": "```swift\nformattedSum = \"14 + 19 = 31\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar a = 12345\nvar b = 98765\n```\n\nExpected values:\n```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 12345\nvar b = 98765\n",
                "text": "```swift\nvar a = 12345\nvar b = 98765\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "formattedSum = \"12345 + 98765 = 111110\"\n",
                "text": "```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = 12345\nvar b = 98765\n```\n\n",
              "Expected values": "```swift\nformattedSum = \"12345 + 98765 = 111110\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use string interpolation.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse string interpolation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n",
                "text": "```swift\nvar a = 14\nvar b = 23\n\nvar sum = a + b\n\nvar formattedSum = \"\\(a) + \\(b) = \\(sum)\"\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n",
            "text": "[spoiler title='Explanation']\n\nThis problem is best solved via string interpolation. We just need to format our interpolated string correctly. The sum can be stored in a variable or computed directly in the interpolared string (`\"\\(a) + \\(b) = \\(a + b)\"`).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_2",
        "compileCode": true,
        "code": "var a = 14\nvar b = 23\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.3 Replace\n\nYou are given a string stored in the variable `aString`. Create new string named `replacedString` that contains the characters of the original string with all the occurrences of the character `\"e\"` replaced by `\"*\"`.\n\n```swift\nvar aString = \"Replace the letter e with *\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]\nCreate `replacedString` step by step by iterating over the characters of `aString`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n[/spoiler]\n\n\n\n",
        "text": "### 5.3 Replace\n\nYou are given a string stored in the variable `aString`. Create new string named `replacedString` that contains the characters of the original string with all the occurrences of the character `\"e\"` replaced by `\"*\"`.\n\n```swift\nvar aString = \"Replace the letter e with *\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]\nCreate `replacedString` step by step by iterating over the characters of `aString`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n[/spoiler]\n\n\n\n",
        "name": "Replace",
        "title": "5.3 Replace",
        "id": "3",
        "problemStatement": "### 5.3 Replace\n\nYou are given a string stored in the variable `aString`. Create new string named `replacedString` that contains the characters of the original string with all the occurrences of the character `\"e\"` replaced by `\"*\"`.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var aString = \"Replace the letter e with *\"\n\n// your code here\n",
            "text": "```swift\nvar aString = \"Replace the letter e with *\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"R*plac* th* l*tt*r * with *\"\n",
                "text": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"R*plac* th* l*tt*r * with *\"\n",
                "text": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"eeee eeee\"\n",
                "text": "```swift\nvar aString = \"eeee eeee\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"**** ****\"\n",
                "text": "```swift\nreplacedString = \"**** ****\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"eeee eeee\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"**** ****\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
            "text": "[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Did you know that Kathy is throwing a party tonight?\"\n",
                "text": "```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"Did you know that Kathy is throwing a party tonight?\"\n",
                "text": "```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Create `replacedString` step by step by iterating over the characters of `aString`\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]\nCreate `replacedString` step by step by iterating over the characters of `aString`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"R*plac* th* l*tt*r * with *\"\n",
                "text": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Replace the letter e with *\"\n```\n\nExpected values:\n```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"R*plac* th* l*tt*r * with *\"\n",
                "text": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Replace the letter e with *\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"R*plac* th* l*tt*r * with *\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"eeee eeee\"\n```\n\nExpected values:\n```swift\nreplacedString = \"**** ****\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"eeee eeee\"\n",
                "text": "```swift\nvar aString = \"eeee eeee\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"**** ****\"\n",
                "text": "```swift\nreplacedString = \"**** ****\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"eeee eeee\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"**** ****\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
            "text": "[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\nExpected values:\n```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Did you know that Kathy is throwing a party tonight?\"\n",
                "text": "```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "replacedString = \"Did you know that Kathy is throwing a party tonight?\"\n",
                "text": "```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n\n",
              "Expected values": "```swift\nreplacedString = \"Did you know that Kathy is throwing a party tonight?\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Create `replacedString` step by step by iterating over the characters of `aString`\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]\nCreate `replacedString` step by step by iterating over the characters of `aString`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n",
                "text": "```swift\nvar aString = \"Replace the letter e with *\"\n\nvar replacedString = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    if char == \"e\" {\n        replacedString = replacedString + \"*\"\n    } else {\n        replacedString = replacedString + char\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to construct a new string that is initially empty. We'll iterate over all the characters in our string, if the character is equal to \"e\" we add \"*\" to our new string otherwise we add the character.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_3",
        "compileCode": true,
        "code": "var aString = \"Replace the letter e with *\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.4 Reverse\n\nYou are given a string stored in variable `aString`. Create a new string called `reverse` that contains the original string in reverse order. Print the reversed string.\n\n```\n\"Hello\" -> \"olleH\"\n\"We ❤ Swift\" -> \"tfiwS ❤ eW\"\n```\n\n```swift\nvar aString = \"this string has 29 characters\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\n\nConvert each character into a string and join them in reverse order.\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n[/spoiler]\n\n",
        "text": "### 5.4 Reverse\n\nYou are given a string stored in variable `aString`. Create a new string called `reverse` that contains the original string in reverse order. Print the reversed string.\n\n```\n\"Hello\" -> \"olleH\"\n\"We ❤ Swift\" -> \"tfiwS ❤ eW\"\n```\n\n```swift\nvar aString = \"this string has 29 characters\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\n\nConvert each character into a string and join them in reverse order.\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n[/spoiler]\n\n",
        "name": "Reverse",
        "title": "5.4 Reverse",
        "id": "4",
        "problemStatement": "### 5.4 Reverse\n\nYou are given a string stored in variable `aString`. Create a new string called `reverse` that contains the original string in reverse order. Print the reversed string.\n\n```\n\"Hello\" -> \"olleH\"\n\"We ❤ Swift\" -> \"tfiwS ❤ eW\"\n```\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "\"Hello\" -> \"olleH\"\n\"We ❤ Swift\" -> \"tfiwS ❤ eW\"\n",
            "text": "```\n\"Hello\" -> \"olleH\"\n\"We ❤ Swift\" -> \"tfiwS ❤ eW\"\n```\n",
            "language": "undefined"
          },
          {
            "type": "code",
            "content": "var aString = \"this string has 29 characters\"\n\n// your code here\n",
            "text": "```swift\nvar aString = \"this string has 29 characters\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Hello\"\n",
                "text": "```swift\nvar aString = \"Hello\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"olleH\"\n",
                "text": "```swift\nreverse = \"olleH\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"olleH\"\n",
                "text": "```\n\"olleH\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Hello\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"olleH\"\n```\n\n",
              "Output": "```\n\"olleH\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"We ❤ Swift\"\n",
                "text": "```swift\nvar aString = \"We ❤ Swift\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"tfiwS ❤ eW\"\n",
                "text": "```swift\nreverse = \"tfiwS ❤ eW\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"tfiwS ❤ eW\"\n",
                "text": "```\n\"tfiwS ❤ eW\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"We ❤ Swift\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\n",
              "Output": "```\n\"tfiwS ❤ eW\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"this string has 29 characters\"\n",
                "text": "```swift\nvar aString = \"this string has 29 characters\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"sretcarahc 92 sah gnirts siht\"\n",
                "text": "```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"sretcarahc 92 sah gnirts siht\"\n",
                "text": "```\n\"sretcarahc 92 sah gnirts siht\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"this string has 29 characters\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\n",
              "Output": "```\n\"sretcarahc 92 sah gnirts siht\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nConvert each character into a string and join them in reverse order.\n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nConvert each character into a string and join them in reverse order.\n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n",
                "text": "```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nExpected values:\n```swift\nreverse = \"olleH\"\n```\n\nOutput:\n```\n\"olleH\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Hello\"\n",
                "text": "```swift\nvar aString = \"Hello\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"olleH\"\n",
                "text": "```swift\nreverse = \"olleH\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"olleH\"\n",
                "text": "```\n\"olleH\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Hello\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"olleH\"\n```\n\n",
              "Output": "```\n\"olleH\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"We ❤ Swift\"\n```\n\nExpected values:\n```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\nOutput:\n```\n\"tfiwS ❤ eW\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"We ❤ Swift\"\n",
                "text": "```swift\nvar aString = \"We ❤ Swift\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"tfiwS ❤ eW\"\n",
                "text": "```swift\nreverse = \"tfiwS ❤ eW\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"tfiwS ❤ eW\"\n",
                "text": "```\n\"tfiwS ❤ eW\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"We ❤ Swift\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"tfiwS ❤ eW\"\n```\n\n",
              "Output": "```\n\"tfiwS ❤ eW\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"this string has 29 characters\"\n```\n\nExpected values:\n```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\nOutput:\n```\n\"sretcarahc 92 sah gnirts siht\"\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"this string has 29 characters\"\n",
                "text": "```swift\nvar aString = \"this string has 29 characters\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "reverse = \"sretcarahc 92 sah gnirts siht\"\n",
                "text": "```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"sretcarahc 92 sah gnirts siht\"\n",
                "text": "```\n\"sretcarahc 92 sah gnirts siht\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"this string has 29 characters\"\n```\n\n",
              "Expected values": "```swift\nreverse = \"sretcarahc 92 sah gnirts siht\"\n```\n\n",
              "Output": "```\n\"sretcarahc 92 sah gnirts siht\"\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected values",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\nConvert each character into a string and join them in reverse order.\n\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n\nConvert each character into a string and join them in reverse order.\n\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n",
                "text": "```swift\nvar aString = \"this string has 29 characters\"\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var asString = \"\\(character)\"\n    reverse = asString + reverse\n}\n\nprint(reverse)\n//sretcarahc 92 sah gnirts siht\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll create a new string that is initially empty. We iterate all the characters in our string and add them to our reversed string in reverse order i.e. `character + reverse` instead of  `reverse + character`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_4",
        "compileCode": true,
        "code": "var aString = \"this string has 29 characters\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.5 Palindrome\n\nPrint `true` if `aString` is a palindrome, and `false` otherwise. A palindrome is a string which reads the same backward or forward.\n\n```swift\nlet aString = \"anutforajaroftuna\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nHow can reversing a string help here ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n[/spoiler]\n\n",
        "text": "### 5.5 Palindrome\n\nPrint `true` if `aString` is a palindrome, and `false` otherwise. A palindrome is a string which reads the same backward or forward.\n\n```swift\nlet aString = \"anutforajaroftuna\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nHow can reversing a string help here ?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n[/spoiler]\n\n",
        "name": "Palindrome",
        "title": "5.5 Palindrome",
        "id": "5",
        "problemStatement": "### 5.5 Palindrome\n\nPrint `true` if `aString` is a palindrome, and `false` otherwise. A palindrome is a string which reads the same backward or forward.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let aString = \"anutforajaroftuna\"\n\n// your code here\n",
            "text": "```swift\nlet aString = \"anutforajaroftuna\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"anutforajaroftuna\"\n",
                "text": "```swift\nvar aString = \"anutforajaroftuna\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"anutforajaroftuna\"\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Hello\"\n",
                "text": "```swift\nvar aString = \"Hello\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Hello\"\n```\n\n",
              "Output": "```\nfalse\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"HelloolleH\"\n",
                "text": "```swift\nvar aString = \"HelloolleH\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"HelloolleH\"\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "How can reversing a string help here ?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nHow can reversing a string help here ?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n",
                "text": "```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"anutforajaroftuna\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"anutforajaroftuna\"\n",
                "text": "```swift\nvar aString = \"anutforajaroftuna\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"anutforajaroftuna\"\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"Hello\"\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"Hello\"\n",
                "text": "```swift\nvar aString = \"Hello\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"Hello\"\n```\n\n",
              "Output": "```\nfalse\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar aString = \"HelloolleH\"\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var aString = \"HelloolleH\"\n",
                "text": "```swift\nvar aString = \"HelloolleH\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar aString = \"HelloolleH\"\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "How can reversing a string help here ?\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nHow can reversing a string help here ?\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n",
                "text": "```swift\nlet aString = \"anutforajaroftuna\"\n\nvar reverse = \"\"\n\nfor character in aString.characters {\n    var char = \"\\(character)\"\n    reverse = char + reverse\n}\n\nprint(aString == reverse)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to reverse our string and check whether our string is equal to its reverse. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_5",
        "compileCode": true,
        "code": "let aString = \"anutforajaroftuna\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.6 Words\n\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nIterate over the characters in the string. Keep track of the longest word you've encountered so far.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n[/spoiler]\n\n",
        "text": "### 5.6 Words\n\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nIterate over the characters in the string. Keep track of the longest word you've encountered so far.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n[/spoiler]\n\n",
        "name": "Words",
        "title": "5.6 Words",
        "id": "6",
        "problemStatement": "### 5.6 Words\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var problem = \"split this string into words and print them on separate lines\"\n\n// your code here\n",
            "text": "```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem =\"split this string into words and print them on separate lines\"\n",
                "text": "```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "split\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n",
                "text": "```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\n",
              "Output": "```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Iterate over the characters in the string. Keep track of the longest word you've encountered so far.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nIterate over the characters in the string. Keep track of the longest word you've encountered so far.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n",
                "text": "```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\nOutput:\n```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem =\"split this string into words and print them on separate lines\"\n",
                "text": "```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "split\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n",
                "text": "```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar problem =\"split this string into words and print them on separate lines\"\n```\n\n",
              "Output": "```\nsplit\nthis\nstring\ninto\nwords\nand\nprint\nthem\non\nseparate\nlines\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Iterate over the characters in the string. Keep track of the longest word you've encountered so far.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nIterate over the characters in the string. Keep track of the longest word you've encountered so far.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n",
                "text": "```swift\nvar problem = \"split this string into words and print them on separate lines\"\n\nvar word = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        print(word)\n        word = \"\"\n    } else {\n        word += \"\\(character)\"\n    }\n}\n\n// don't forget the last word\nprint(word)\n\n// split\n// this\n// string\n// into\n// words\n// and\n// print\n// them\n// on\n// separate\n// lines\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll start with a variable `word` which is initially empty. Next we'll iterate our string, if we encounter a `word` we print the value from the variable `word` and set its contents to empty. If we encounter something else we add that character to our `word`. We'll also have to print the word one last time outside the loop.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_6",
        "compileCode": true,
        "code": "var problem = \"split this string into words and print them on separate lines\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.7 Long word\n\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep track of the longest word you encounter and also keep track of it's length.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n[/spoiler]\n\n",
        "text": "### 5.7 Long word\n\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep track of the longest word you encounter and also keep track of it's length.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n[/spoiler]\n\n",
        "name": "Long word",
        "title": "5.7 Long word",
        "id": "7",
        "problemStatement": "### 5.7 Long word\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var problem = \"find the longest word in the problem description\"\n\n// your code here\n",
            "text": "```swift\nvar problem = \"find the longest word in the problem description\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"find the longest word in the problem description\"\n",
                "text": "```swift\nvar problem = \"find the longest word in the problem description\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "description\n",
                "text": "```\ndescription\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\n",
              "Output": "```\ndescription\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep track of the longest word you encounter and also keep track of it's length.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep track of the longest word you encounter and also keep track of it's length.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n",
                "text": "```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\nOutput:\n```\ndescription\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"find the longest word in the problem description\"\n",
                "text": "```swift\nvar problem = \"find the longest word in the problem description\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "description\n",
                "text": "```\ndescription\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar problem = \"find the longest word in the problem description\"\n```\n\n",
              "Output": "```\ndescription\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep track of the longest word you encounter and also keep track of it's length.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep track of the longest word you encounter and also keep track of it's length.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n",
                "text": "```swift\nvar problem = \"find the longest word in the problem description\"\n\n// this will help the algorithm see the last word\nproblem += \" \"\n\nvar word = \"\"\nvar length = 0\n\nvar max = 0\nvar longestWord = \"\"\n\nfor character in problem.characters {\n    if character == \" \" {\n        if length > max {\n            max = length\n            longestWord = word\n        }\n        word = \"\"\n        length = 0\n    } else {\n        word += \"\\(character)\"\n        length++\n    }\n}\n\nprint(longestWord)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to keep track of the longest word we've encountered so far and its length. The longest word will be initialised to empty and the length to 0. Each time we encounter a new word we check whether its longer than our current `longestWord`. If it is we update the longest word and the length of the longest word. Keep in mind that we'll also have to progressively compute the length of each word.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_7",
        "compileCode": true,
        "code": "var problem = \"find the longest word in the problem description\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 5.8 Magic Time!\n\nUse this magic * operator to solve the next challenge:\n\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nprint(\"cat \" * 3 + \"dog \" * 2)\n// cat cat cat dog dog \n\nvar newLine = \"\\n\" * 2\n\nprint(newLine)\n//\n//\n```\n\nBy using **only one** `print()` statement draw a rectangle of size `N x M ` out of asterisks.\n\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nvar N = 5\nvar M = 10\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThis problem can be solved by applying the magic operator exactly `2` times.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n[/spoiler]\n\n\n\n",
        "text": "### 5.8 Magic Time!\n\nUse this magic * operator to solve the next challenge:\n\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nprint(\"cat \" * 3 + \"dog \" * 2)\n// cat cat cat dog dog \n\nvar newLine = \"\\n\" * 2\n\nprint(newLine)\n//\n//\n```\n\nBy using **only one** `print()` statement draw a rectangle of size `N x M ` out of asterisks.\n\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nvar N = 5\nvar M = 10\n\n// your code here\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThis problem can be solved by applying the magic operator exactly `2` times.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n[/spoiler]\n\n\n\n",
        "name": "Magic Time!",
        "title": "5.8 Magic Time!",
        "id": "8",
        "problemStatement": "### 5.8 Magic Time!\n\nUse this magic * operator to solve the next challenge:\n\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nprint(\"cat \" * 3 + \"dog \" * 2)\n// cat cat cat dog dog \n\nvar newLine = \"\\n\" * 2\n\nprint(newLine)\n//\n//\n```\n\n\nBy using **only one** `print()` statement draw a rectangle of size `N x M ` out of asterisks.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "func *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nprint(\"cat \" * 3 + \"dog \" * 2)\n// cat cat cat dog dog \n\nvar newLine = \"\\n\" * 2\n\nprint(newLine)\n//\n//\n",
            "text": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nprint(\"cat \" * 3 + \"dog \" * 2)\n// cat cat cat dog dog \n\nvar newLine = \"\\n\" * 2\n\nprint(newLine)\n//\n//\n```\n",
            "language": "swift"
          },
          {
            "type": "code",
            "content": "func *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nvar N = 5\nvar M = 10\n\n// your code here\n",
            "text": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nvar N = 5\nvar M = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\nvar M = 10\n",
                "text": "```swift\nvar N = 5\nvar M = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**********\n**********\n**********\n**********\n**********\n",
                "text": "```\n**********\n**********\n**********\n**********\n**********\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\nvar M = 10\n```\n\n",
              "Output": "```\n**********\n**********\n**********\n**********\n**********\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\nvar M = 2\n",
                "text": "```swift\nvar N = 2\nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\nvar M = 2\n",
                "text": "```swift\nvar N = 5\nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n**\n**\n**\n",
                "text": "```\n**\n**\n**\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n**\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "This problem can be solved by applying the magic operator exactly `2` times.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThis problem can be solved by applying the magic operator exactly `2` times.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n",
                "text": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "5",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 10\n```\n\nOutput:\n```\n**********\n**********\n**********\n**********\n**********\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\nvar M = 10\n",
                "text": "```swift\nvar N = 5\nvar M = 10\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**********\n**********\n**********\n**********\n**********\n",
                "text": "```\n**********\n**********\n**********\n**********\n**********\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\nvar M = 10\n```\n\n",
              "Output": "```\n**********\n**********\n**********\n**********\n**********\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 2\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 2\nvar M = 2\n",
                "text": "```swift\nvar N = 2\nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n",
                "text": "```\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 2\nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nInput:\n```swift\nvar N = 5\nvar M = 2\n```\n\nOutput:\n```\n**\n**\n**\n**\n**\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 5\nvar M = 2\n",
                "text": "```swift\nvar N = 5\nvar M = 2\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "**\n**\n**\n**\n**\n",
                "text": "```\n**\n**\n**\n**\n**\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 5\nvar M = 2\n```\n\n",
              "Output": "```\n**\n**\n**\n**\n**\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "This problem can be solved by applying the magic operator exactly `2` times.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThis problem can be solved by applying the magic operator exactly `2` times.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n",
                "text": "```swift\nfunc *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string)\n    return array.joinWithSeparator(\"\")\n}\n\nvar newLine = \"\\n\"\n\nvar N = 5\nvar M = 10\n\nvar line = \"*\" * M\nline += newLine\n\nvar rectangle: String = line * N\n\nprint(rectangle)\n// **********\n// **********\n// **********\n// **********\n// **********\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we create the line we want to print via the `*` operator this can be done via `line = \"*\" * M + \"\\n\"`. Next we create a rectangle by applying the `*` operator on our `line` variable (`line * N`).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise5_8",
        "compileCode": true,
        "code": "func *(string: String, scalar: Int) -> String {\n    let array = Array(count: scalar, repeatedValue: string) \n    return array.joinWithSeparator(\"\")\n}\n\nvar N = 5\nvar M = 10\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 6. Arrays\n\n#### Introduction\n\nOften when you're dealing with data you don't just have a fixed amount of elements. Take for example a program where you compute the average of multiple grades in a class:\n\n```swift\nvar grade1 = 4\nvar grade2 = 3\n\nvar average = Double(grade1 + grade2) / 2.0\nprint(\"Average grade: \\(average)\")\n```\n\nWhat if we wanted the program to also work when we have 3 grades?  \nWe'd have to change our program to work with 3 grades.\n\n```swift\nvar grade1 = 4\nvar grade2 = 3\nvar grade3 = 5\n\nvar average = Double(grade1 + grade2 + grade3) / 3.0\nprint(\"Average grade: \\(average)\")\n```\n\nAfter doing this it will no longer work with 2 grades. What if we wanted our program to work with any number of grades between 1 grade and 10 grades.\n\nIt's not practical to write a separate program for each case. We would like to have something like a list of grades. This list would contain any number of grades. This is where arrays come in.\n\n#### What is an array?\n\nAn array is an ordered collection that stores multiple values of the same type. That means that an array of `Int` can only store `Int` values. And you can only insert `Int` values in it.\n\n#### Declaring Arrays\n\nTo declare an array you can use the square brackets syntax(`[Type]`).\n\n```swift\nvar arrayOfInts: [Int]\n```\n\nYou can initialize an array with an array literal. An array literal is a list of values, separated by commas, surrounded by a pair of square brackets:\n\n[`value`, `value`, `...`]\n\n\n```swift\nvar arrayOfInts: [Int] = [1, 2, 3]\nvar arrayOfStrings: [String] = [\"We\", \"❤\", \"Swift\"]\n```\n`\nKeep in mind that you can create empty arrays if you don't write any values.\n\n```\nvar emptyArray: [Int] = []\n```\n\n#### Getting values\n\nTo get all the values from an array you can use the `for-in` syntax. This is called iterating through an array.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\nvar listOfNames = [\"Andrei\", \"Silviu\", \"Claudiu\"] // an array of strings\n\nfor number in listOfNumbers {\n    print(number)\n}\n// 1\n// 2\n// 3\n// 10\n// 100\n\nfor name in listOfNames {\n    print(\"Hello \" + name + \"!\")\n}\n// Hello Andrei!\n// Hello Silviu!\n// Hello Claudiu!\n```\n\nTo get the number of elements in an array you can use the `count` property.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nprint(listOfNumbers.count) // 5\n```\n\nYou can access specific elements from an array using the subscript syntax. To do this pass the index of the value you want to retrieve within square brackets immediately after the name of the array. Also you can get a subsequence from the array if you pass a range instead of an index.  \nElement in an array are indexed from 0 to the number of elements minus one. So an array with 3 elements will have elements at index 0, 1 and 2. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nlistOfNumbers[0] // 1\nlistOfNumbers[1] // 2\nlistOfNumbers[2] // 3\nlistOfNumbers[3] // 10\nlistOfNumbers[4] // 100\n//listOfNumbers[5]// this gives an error uncomment this line to see it\n\nlistOfNumbers[1...2] // [2, 3] this is a subsequence of the original array\n```\n\n#### Adding values\n\nYou can add elements to the end of an array using the `append` method.\n\n```swift\n// create a empty array of integers\nvar numbers: [Int] = []\n\nfor i in 1...5 {\n    numbers.append(i)\n    print(numbers)\n    // [1]\n    // [1, 2]\n    // [1, 2, 3]\n    // [1, 2, 3, 4]\n    // [1, 2, 3, 4, 5]\n}\n\nprint(numbers)\n// [1, 2, 3, 4, 5]\n```\n\nTo insert an item into the array at a specified index, call the array’s `insert(atIndex:)` method.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.insert(0, atIndex: 0) // numbers will be [0, 1, 2, 3]\nnumbers.insert(9, atIndex: 1) // numbers will be [0, 9, 1, 2, 3]\n```\n\nYou can also append another array using the `+=` operator.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers += [4, 5, 6] // numbers will be [1, 2, 3, 4, 5, 6]\n\n// or just one value\nnumbers += [7] // numbers will be [1, 2, 3, 4, 5, 6, 7]\n```\n\n#### Removing Values\n\nTo remove an item from a specific index call the `removeAtIndex` method.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.removeAtIndex(0) // numbers will be [2, 3]\n```\n\n#### Changing values\n\nTo change a value use the assignment operator (`=`) after the subscript syntax.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers[0] = 7 // numbers will be [7, 2, 3]\nnumbers[1] = 5 // numbers will be [7, 5, 3]\nnumbers[2] = 4 // numbers will be [7, 5, 4]\n```\n\nOr you could replace a subsequence of values using range subscripting.\n\n```swift\nvar numbers: [Int] = [1, 2, 3, 4, 5, 6]\n\nnumbers[2...4] = [0, 0] // numbers will now be [1, 2, 0, 0, 6].\n```\n\nKeep in mind that you don't need to replace a sequence with another sequence with the same number of elements. In the example above numbers had 6 elements and after the replacement of the subsequence `2...4` (`[3, 4, 5]`) it had 5.\n\n\n#### Type Inference\n\nThanks to Swift’s type inference, you don't have to declare the type of an array if you initialize it with something other than an empty array literal(`[]`).\n\n```swift\n// arrayOfNumbers will be of type [Int]\nvar arrayOfNumbers = [1, 2, 3] \n\n// arrayOfStrings will be of type [String]\nvar arrayOfStrings = [\"We\", \"❤\", \"Swift\"] \n\n// arrayOfBools will be of type [Bool]\nvar arrayOfBools = [true, false, true, true, false] \n\n// this is the proper way of declaring a empty array of Int - [Int]\nvar emptyArrayOfInts: [Int] = [] \n\n// this will infer into [Int] because the right hand side of the \n// assignment has a known type [Int]\nvar anotherEmptyArray = emptyArrayOfInts \n```\n\n#### Copy Behavior\n\nSwift’s Array types are implemented as structures. This means that arrays are copied when they are assigned to a new constant or variable, or when they are passed to a function or method.\n\n```swift\nvar numbers = [1, 2, 3]\nvar otherNumbers = numbers // this will create a copy of numbers\n\n// this will append 4 to otherNumbers but not to numbers\notherNumbers.append(4) \n\n// numbers = [1, 2, 3]\n// otherNumbers = [1, 2, 3, 4]\n```\n\n#### Mutability\n\nIf you create an array and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created. Changes can be done by adding, removing, or changing items in the collection. Conversely, if you assign an array to a constant, that array is immutable, and its size and contents cannot be changed. In other words if you want to be able to change an array declare it using the `var` keyword, and if you don't want to be able to change it use the `let` keyword.\n\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.append(7) // [1, 2, 3, 4, 5, 6, 7]\nnumbers.removeAtIndex(0) // [2, 3, 4, 5, 6, 7]\n\nlet strings = [\"We\", \"❤\", \"Swift\"]\n\n// the next lines will not compile! \nstrings.append(\"!\") // this will give an error because strings is immutable\nstrings.removeAtIndex(0) // this will give a similar error\n```\n\n",
    "text": "## 6. Arrays\n\n#### Introduction\n\nOften when you're dealing with data you don't just have a fixed amount of elements. Take for example a program where you compute the average of multiple grades in a class:\n\n```swift\nvar grade1 = 4\nvar grade2 = 3\n\nvar average = Double(grade1 + grade2) / 2.0\nprint(\"Average grade: \\(average)\")\n```\n\nWhat if we wanted the program to also work when we have 3 grades?  \nWe'd have to change our program to work with 3 grades.\n\n```swift\nvar grade1 = 4\nvar grade2 = 3\nvar grade3 = 5\n\nvar average = Double(grade1 + grade2 + grade3) / 3.0\nprint(\"Average grade: \\(average)\")\n```\n\nAfter doing this it will no longer work with 2 grades. What if we wanted our program to work with any number of grades between 1 grade and 10 grades.\n\nIt's not practical to write a separate program for each case. We would like to have something like a list of grades. This list would contain any number of grades. This is where arrays come in.\n\n#### What is an array?\n\nAn array is an ordered collection that stores multiple values of the same type. That means that an array of `Int` can only store `Int` values. And you can only insert `Int` values in it.\n\n#### Declaring Arrays\n\nTo declare an array you can use the square brackets syntax(`[Type]`).\n\n```swift\nvar arrayOfInts: [Int]\n```\n\nYou can initialize an array with an array literal. An array literal is a list of values, separated by commas, surrounded by a pair of square brackets:\n\n[`value`, `value`, `...`]\n\n\n```swift\nvar arrayOfInts: [Int] = [1, 2, 3]\nvar arrayOfStrings: [String] = [\"We\", \"❤\", \"Swift\"]\n```\n`\nKeep in mind that you can create empty arrays if you don't write any values.\n\n```\nvar emptyArray: [Int] = []\n```\n\n#### Getting values\n\nTo get all the values from an array you can use the `for-in` syntax. This is called iterating through an array.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\nvar listOfNames = [\"Andrei\", \"Silviu\", \"Claudiu\"] // an array of strings\n\nfor number in listOfNumbers {\n    print(number)\n}\n// 1\n// 2\n// 3\n// 10\n// 100\n\nfor name in listOfNames {\n    print(\"Hello \" + name + \"!\")\n}\n// Hello Andrei!\n// Hello Silviu!\n// Hello Claudiu!\n```\n\nTo get the number of elements in an array you can use the `count` property.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nprint(listOfNumbers.count) // 5\n```\n\nYou can access specific elements from an array using the subscript syntax. To do this pass the index of the value you want to retrieve within square brackets immediately after the name of the array. Also you can get a subsequence from the array if you pass a range instead of an index.  \nElement in an array are indexed from 0 to the number of elements minus one. So an array with 3 elements will have elements at index 0, 1 and 2. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nlistOfNumbers[0] // 1\nlistOfNumbers[1] // 2\nlistOfNumbers[2] // 3\nlistOfNumbers[3] // 10\nlistOfNumbers[4] // 100\n//listOfNumbers[5]// this gives an error uncomment this line to see it\n\nlistOfNumbers[1...2] // [2, 3] this is a subsequence of the original array\n```\n\n#### Adding values\n\nYou can add elements to the end of an array using the `append` method.\n\n```swift\n// create a empty array of integers\nvar numbers: [Int] = []\n\nfor i in 1...5 {\n    numbers.append(i)\n    print(numbers)\n    // [1]\n    // [1, 2]\n    // [1, 2, 3]\n    // [1, 2, 3, 4]\n    // [1, 2, 3, 4, 5]\n}\n\nprint(numbers)\n// [1, 2, 3, 4, 5]\n```\n\nTo insert an item into the array at a specified index, call the array’s `insert(atIndex:)` method.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.insert(0, atIndex: 0) // numbers will be [0, 1, 2, 3]\nnumbers.insert(9, atIndex: 1) // numbers will be [0, 9, 1, 2, 3]\n```\n\nYou can also append another array using the `+=` operator.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers += [4, 5, 6] // numbers will be [1, 2, 3, 4, 5, 6]\n\n// or just one value\nnumbers += [7] // numbers will be [1, 2, 3, 4, 5, 6, 7]\n```\n\n#### Removing Values\n\nTo remove an item from a specific index call the `removeAtIndex` method.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.removeAtIndex(0) // numbers will be [2, 3]\n```\n\n#### Changing values\n\nTo change a value use the assignment operator (`=`) after the subscript syntax.\n\n```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers[0] = 7 // numbers will be [7, 2, 3]\nnumbers[1] = 5 // numbers will be [7, 5, 3]\nnumbers[2] = 4 // numbers will be [7, 5, 4]\n```\n\nOr you could replace a subsequence of values using range subscripting.\n\n```swift\nvar numbers: [Int] = [1, 2, 3, 4, 5, 6]\n\nnumbers[2...4] = [0, 0] // numbers will now be [1, 2, 0, 0, 6].\n```\n\nKeep in mind that you don't need to replace a sequence with another sequence with the same number of elements. In the example above numbers had 6 elements and after the replacement of the subsequence `2...4` (`[3, 4, 5]`) it had 5.\n\n\n#### Type Inference\n\nThanks to Swift’s type inference, you don't have to declare the type of an array if you initialize it with something other than an empty array literal(`[]`).\n\n```swift\n// arrayOfNumbers will be of type [Int]\nvar arrayOfNumbers = [1, 2, 3] \n\n// arrayOfStrings will be of type [String]\nvar arrayOfStrings = [\"We\", \"❤\", \"Swift\"] \n\n// arrayOfBools will be of type [Bool]\nvar arrayOfBools = [true, false, true, true, false] \n\n// this is the proper way of declaring a empty array of Int - [Int]\nvar emptyArrayOfInts: [Int] = [] \n\n// this will infer into [Int] because the right hand side of the \n// assignment has a known type [Int]\nvar anotherEmptyArray = emptyArrayOfInts \n```\n\n#### Copy Behavior\n\nSwift’s Array types are implemented as structures. This means that arrays are copied when they are assigned to a new constant or variable, or when they are passed to a function or method.\n\n```swift\nvar numbers = [1, 2, 3]\nvar otherNumbers = numbers // this will create a copy of numbers\n\n// this will append 4 to otherNumbers but not to numbers\notherNumbers.append(4) \n\n// numbers = [1, 2, 3]\n// otherNumbers = [1, 2, 3, 4]\n```\n\n#### Mutability\n\nIf you create an array and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created. Changes can be done by adding, removing, or changing items in the collection. Conversely, if you assign an array to a constant, that array is immutable, and its size and contents cannot be changed. In other words if you want to be able to change an array declare it using the `var` keyword, and if you don't want to be able to change it use the `let` keyword.\n\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.append(7) // [1, 2, 3, 4, 5, 6, 7]\nnumbers.removeAtIndex(0) // [2, 3, 4, 5, 6, 7]\n\nlet strings = [\"We\", \"❤\", \"Swift\"]\n\n// the next lines will not compile! \nstrings.append(\"!\") // this will give an error because strings is immutable\nstrings.removeAtIndex(0) // this will give a similar error\n```\n\n",
    "name": "Arrays",
    "title": "Arrays",
    "id": "6",
    "codes": [
      {
        "type": "code",
        "content": "var grade1 = 4\nvar grade2 = 3\n\nvar average = Double(grade1 + grade2) / 2.0\nprint(\"Average grade: \\(average)\")\n",
        "text": "```swift\nvar grade1 = 4\nvar grade2 = 3\n\nvar average = Double(grade1 + grade2) / 2.0\nprint(\"Average grade: \\(average)\")\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var grade1 = 4\nvar grade2 = 3\nvar grade3 = 5\n\nvar average = Double(grade1 + grade2 + grade3) / 3.0\nprint(\"Average grade: \\(average)\")\n",
        "text": "```swift\nvar grade1 = 4\nvar grade2 = 3\nvar grade3 = 5\n\nvar average = Double(grade1 + grade2 + grade3) / 3.0\nprint(\"Average grade: \\(average)\")\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var arrayOfInts: [Int]\n",
        "text": "```swift\nvar arrayOfInts: [Int]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var arrayOfInts: [Int] = [1, 2, 3]\nvar arrayOfStrings: [String] = [\"We\", \"❤\", \"Swift\"]\n",
        "text": "```swift\nvar arrayOfInts: [Int] = [1, 2, 3]\nvar arrayOfStrings: [String] = [\"We\", \"❤\", \"Swift\"]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var emptyArray: [Int] = []\n",
        "text": "```\nvar emptyArray: [Int] = []\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "var listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\nvar listOfNames = [\"Andrei\", \"Silviu\", \"Claudiu\"] // an array of strings\n\nfor number in listOfNumbers {\n    print(number)\n}\n// 1\n// 2\n// 3\n// 10\n// 100\n\nfor name in listOfNames {\n    print(\"Hello \" + name + \"!\")\n}\n// Hello Andrei!\n// Hello Silviu!\n// Hello Claudiu!\n",
        "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\nvar listOfNames = [\"Andrei\", \"Silviu\", \"Claudiu\"] // an array of strings\n\nfor number in listOfNumbers {\n    print(number)\n}\n// 1\n// 2\n// 3\n// 10\n// 100\n\nfor name in listOfNames {\n    print(\"Hello \" + name + \"!\")\n}\n// Hello Andrei!\n// Hello Silviu!\n// Hello Claudiu!\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nprint(listOfNumbers.count) // 5\n",
        "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nprint(listOfNumbers.count) // 5\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nlistOfNumbers[0] // 1\nlistOfNumbers[1] // 2\nlistOfNumbers[2] // 3\nlistOfNumbers[3] // 10\nlistOfNumbers[4] // 100\n//listOfNumbers[5]// this gives an error uncomment this line to see it\n\nlistOfNumbers[1...2] // [2, 3] this is a subsequence of the original array\n",
        "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100] // an array of numbers\n\nlistOfNumbers[0] // 1\nlistOfNumbers[1] // 2\nlistOfNumbers[2] // 3\nlistOfNumbers[3] // 10\nlistOfNumbers[4] // 100\n//listOfNumbers[5]// this gives an error uncomment this line to see it\n\nlistOfNumbers[1...2] // [2, 3] this is a subsequence of the original array\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// create a empty array of integers\nvar numbers: [Int] = []\n\nfor i in 1...5 {\n    numbers.append(i)\n    print(numbers)\n    // [1]\n    // [1, 2]\n    // [1, 2, 3]\n    // [1, 2, 3, 4]\n    // [1, 2, 3, 4, 5]\n}\n\nprint(numbers)\n// [1, 2, 3, 4, 5]\n",
        "text": "```swift\n// create a empty array of integers\nvar numbers: [Int] = []\n\nfor i in 1...5 {\n    numbers.append(i)\n    print(numbers)\n    // [1]\n    // [1, 2]\n    // [1, 2, 3]\n    // [1, 2, 3, 4]\n    // [1, 2, 3, 4, 5]\n}\n\nprint(numbers)\n// [1, 2, 3, 4, 5]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers: [Int] = [1, 2, 3]\n\nnumbers.insert(0, atIndex: 0) // numbers will be [0, 1, 2, 3]\nnumbers.insert(9, atIndex: 1) // numbers will be [0, 9, 1, 2, 3]\n",
        "text": "```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.insert(0, atIndex: 0) // numbers will be [0, 1, 2, 3]\nnumbers.insert(9, atIndex: 1) // numbers will be [0, 9, 1, 2, 3]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers: [Int] = [1, 2, 3]\n\nnumbers += [4, 5, 6] // numbers will be [1, 2, 3, 4, 5, 6]\n\n// or just one value\nnumbers += [7] // numbers will be [1, 2, 3, 4, 5, 6, 7]\n",
        "text": "```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers += [4, 5, 6] // numbers will be [1, 2, 3, 4, 5, 6]\n\n// or just one value\nnumbers += [7] // numbers will be [1, 2, 3, 4, 5, 6, 7]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers: [Int] = [1, 2, 3]\n\nnumbers.removeAtIndex(0) // numbers will be [2, 3]\n",
        "text": "```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers.removeAtIndex(0) // numbers will be [2, 3]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers: [Int] = [1, 2, 3]\n\nnumbers[0] = 7 // numbers will be [7, 2, 3]\nnumbers[1] = 5 // numbers will be [7, 5, 3]\nnumbers[2] = 4 // numbers will be [7, 5, 4]\n",
        "text": "```swift\nvar numbers: [Int] = [1, 2, 3]\n\nnumbers[0] = 7 // numbers will be [7, 2, 3]\nnumbers[1] = 5 // numbers will be [7, 5, 3]\nnumbers[2] = 4 // numbers will be [7, 5, 4]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers: [Int] = [1, 2, 3, 4, 5, 6]\n\nnumbers[2...4] = [0, 0] // numbers will now be [1, 2, 0, 0, 6].\n",
        "text": "```swift\nvar numbers: [Int] = [1, 2, 3, 4, 5, 6]\n\nnumbers[2...4] = [0, 0] // numbers will now be [1, 2, 0, 0, 6].\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// arrayOfNumbers will be of type [Int]\nvar arrayOfNumbers = [1, 2, 3] \n\n// arrayOfStrings will be of type [String]\nvar arrayOfStrings = [\"We\", \"❤\", \"Swift\"] \n\n// arrayOfBools will be of type [Bool]\nvar arrayOfBools = [true, false, true, true, false] \n\n// this is the proper way of declaring a empty array of Int - [Int]\nvar emptyArrayOfInts: [Int] = [] \n\n// this will infer into [Int] because the right hand side of the \n// assignment has a known type [Int]\nvar anotherEmptyArray = emptyArrayOfInts \n",
        "text": "```swift\n// arrayOfNumbers will be of type [Int]\nvar arrayOfNumbers = [1, 2, 3] \n\n// arrayOfStrings will be of type [String]\nvar arrayOfStrings = [\"We\", \"❤\", \"Swift\"] \n\n// arrayOfBools will be of type [Bool]\nvar arrayOfBools = [true, false, true, true, false] \n\n// this is the proper way of declaring a empty array of Int - [Int]\nvar emptyArrayOfInts: [Int] = [] \n\n// this will infer into [Int] because the right hand side of the \n// assignment has a known type [Int]\nvar anotherEmptyArray = emptyArrayOfInts \n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3]\nvar otherNumbers = numbers // this will create a copy of numbers\n\n// this will append 4 to otherNumbers but not to numbers\notherNumbers.append(4) \n\n// numbers = [1, 2, 3]\n// otherNumbers = [1, 2, 3, 4]\n",
        "text": "```swift\nvar numbers = [1, 2, 3]\nvar otherNumbers = numbers // this will create a copy of numbers\n\n// this will append 4 to otherNumbers but not to numbers\notherNumbers.append(4) \n\n// numbers = [1, 2, 3]\n// otherNumbers = [1, 2, 3, 4]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.append(7) // [1, 2, 3, 4, 5, 6, 7]\nnumbers.removeAtIndex(0) // [2, 3, 4, 5, 6, 7]\n\nlet strings = [\"We\", \"❤\", \"Swift\"]\n\n// the next lines will not compile! \nstrings.append(\"!\") // this will give an error because strings is immutable\nstrings.removeAtIndex(0) // this will give a similar error\n",
        "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.append(7) // [1, 2, 3, 4, 5, 6, 7]\nnumbers.removeAtIndex(0) // [2, 3, 4, 5, 6, 7]\n\nlet strings = [\"We\", \"❤\", \"Swift\"]\n\n// the next lines will not compile! \nstrings.append(\"!\") // this will give an error because strings is immutable\nstrings.removeAtIndex(0) // this will give a similar error\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 6.1 Max\n\nPrint the maximum value from `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nAssume that the first element of the array is also the largest.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n[/spoiler]\n\n",
        "text": "### 6.1 Max\n\nPrint the maximum value from `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nAssume that the first element of the array is also the largest.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n[/spoiler]\n\n",
        "name": "Max",
        "title": "6.1 Max",
        "id": "1",
        "problemStatement": "### 6.1 Max\n\nPrint the maximum value from `listOfNumbers`.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33\n",
                "text": "```\n33\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n33\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Assume that the first element of the array is also the largest.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nAssume that the first element of the array is also the largest.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33\n",
                "text": "```\n33\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n33\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Assume that the first element of the array is also the largest.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nAssume that the first element of the array is also the largest.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar maxVal = listOfNumbers[0]\n\nfor number in listOfNumbers {\n    if maxVal < number {\n        maxVal = number\n    }\n}\n\nprint(maxVal)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo get the maximum number from a list of numbers we are going to take each number and remember the biggest so far in temporary variable. After we look ar each of the numbers that variable will have the bigest one of them.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise6_1",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.2 Odd\n\nPrint all the odd numbers from  `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n[/spoiler]\n\n",
        "text": "### 6.2 Odd\n\nPrint all the odd numbers from  `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n[/spoiler]\n\n",
        "name": "Odd",
        "title": "6.2 Odd",
        "id": "2",
        "problemStatement": "### 6.2 Odd\n\nPrint all the odd numbers from  `listOfNumbers`.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n3\n",
                "text": "```\n1\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n1\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33\n11\n1\n",
                "text": "```\n33\n11\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n33\n11\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n3\n",
                "text": "```\n1\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n1\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n33\n11\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "33\n11\n1\n",
                "text": "```\n33\n11\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n33\n11\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor number in listOfNumbers {\n    if number % 2 != 0 {\n        print(number)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through our array of numbers and print only the numbers that are odd.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_2",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.3 Sum\n\nPrint the sum of all the numbers from `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nStore the sum in a variable. Keep increasing it.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n[/spoiler]\n\n\n",
        "text": "### 6.3 Sum\n\nPrint the sum of all the numbers from `listOfNumbers`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nStore the sum in a variable. Keep increasing it.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n[/spoiler]\n\n\n",
        "name": "Sum",
        "title": "6.3 Sum",
        "id": "3",
        "problemStatement": "### 6.3 Sum\n\nPrint the sum of all the numbers from `listOfNumbers`.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "116\n",
                "text": "```\n116\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n116\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "67\n",
                "text": "```\n67\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n67\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Store the sum in a variable. Keep increasing it.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nStore the sum in a variable. Keep increasing it.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n116\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "116\n",
                "text": "```\n116\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n116\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "67\n",
                "text": "```\n67\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n67\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Store the sum in a variable. Keep increasing it.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nStore the sum in a variable. Keep increasing it.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar sum = 0\n\nfor number in listOfNumbers {\n    sum += number\n}\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo calculate the sum of all the number we are going to use a variable initialized with 0 and then add each number to that variable. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise6_3",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.4 Odd Index\n\nPrint all the numbers from `listOfNumbers` that are located at odd indexes. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse a while loop and the index subscripts.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n[/spoiler]\n\n\n",
        "text": "### 6.4 Odd Index\n\nPrint all the numbers from `listOfNumbers` that are located at odd indexes. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse a while loop and the index subscripts.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n[/spoiler]\n\n\n",
        "name": "Odd Index",
        "title": "6.4 Odd Index",
        "id": "4",
        "problemStatement": "### 6.4 Odd Index\n\nPrint all the numbers from `listOfNumbers` that are located at odd indexes. \n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n10\n",
                "text": "```\n2\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n2\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "10\n33\n1\n",
                "text": "```\n10\n33\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n10\n33\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a while loop and the index subscripts.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse a while loop and the index subscripts.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n2\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n10\n",
                "text": "```\n2\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n2\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\nOutput:\n```\n10\n33\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 10, 12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "10\n33\n1\n",
                "text": "```\n10\n33\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 10, 12, 33, 11, 1]\n```\n\n",
              "Output": "```\n10\n33\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a while loop and the index subscripts.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse a while loop and the index subscripts.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar i = 1\n\nwhile i < listOfNumbers.count {\n    print(listOfNumbers[i])\n    i += 2\n}\n// 2\n// 10\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nfor var i = 1; i < listOfNumbers.count; i += 2 {\n    print(listOfNumbers[i])\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate through our array with an index. We'll initialize the index to 1 and at each step we'll increase the index by 2 this will result in printing only the elements at odd indices in the array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_4",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.5 Going back\n\nPrint the numbers from `listOfNumbers` in reverse order on separate lines.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse a loop that counts from the last index down to the first one.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n[/spoiler]\n\n\n[spoiler title='Solution 3' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n[/spoiler]\n\n",
        "text": "### 6.5 Going back\n\nPrint the numbers from `listOfNumbers` in reverse order on separate lines.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse a loop that counts from the last index down to the first one.\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n[/spoiler]\n\n\n[spoiler title='Solution 3' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n[/spoiler]\n\n",
        "name": "Going back",
        "title": "6.5 Going back",
        "id": "5",
        "problemStatement": "### 6.5 Going back\n\nPrint the numbers from `listOfNumbers` in reverse order on separate lines.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n10\n3\n2\n1\n",
                "text": "```\n100\n10\n3\n2\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n100\n10\n3\n2\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n11\n33\n22\n",
                "text": "```\n1\n11\n33\n22\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\n",
              "Output": "```\n1\n11\n33\n22\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a loop that counts from the last index down to the first one.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse a loop that counts from the last index down to the first one.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n",
            "text": "[spoiler title='Solution 3' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n100\n10\n3\n2\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n10\n3\n2\n1\n",
                "text": "```\n100\n10\n3\n2\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n100\n10\n3\n2\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nOutput:\n```\n1\n11\n33\n22\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n11\n33\n22\n",
                "text": "```\n1\n11\n33\n22\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\n",
              "Output": "```\n1\n11\n33\n22\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a loop that counts from the last index down to the first one.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse a loop that counts from the last index down to the first one.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nvar i = listOfNumbers.count - 1\n\nwhile i >= 0 {\n    print(listOfNumbers[i])\n    i--\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor i in 1...listOfNumbers.count {\n    print(listOfNumbers[listOfNumbers.count - i])\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n",
            "text": "[spoiler title='Solution 3' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100, 2]\n\nfor var i = listOfNumbers.count - 1; i >= 0; --i {\n    print(listOfNumbers[i])\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through our array with a loop that counts backwards. Keep in mind that the last element of the array is at index `listNumbers.count - 1` and the first element of the array is at index `0`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_5",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.6 Reverse\n\nReverse the order of the elements in `listOfNumbers` without creating any additional arrays.\n\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']\nUse 2 indices.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nAt each step advance with the indices one step closer to the middle of the `array`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n[/spoiler]\n\n",
        "text": "### 6.6 Reverse\n\nReverse the order of the elements in `listOfNumbers` without creating any additional arrays.\n\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n[/spoiler]\n\n\n[spoiler title='Hint 1' collapse_link='true']\nUse 2 indices.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nAt each step advance with the indices one step closer to the middle of the `array`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n[/spoiler]\n\n",
        "name": "Reverse",
        "title": "6.6 Reverse",
        "id": "6",
        "problemStatement": "### 6.6 Reverse\n\nReverse the order of the elements in `listOfNumbers` without creating any additional arrays.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "listOfNumbers = [3, 2, 1]\n",
                "text": "```swift\nlistOfNumbers = [3, 2, 1]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\n",
              "Expected value": "```swift\nlistOfNumbers = [3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "listOfNumbers = [1, 11, 33, 12]\n",
                "text": "```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\n",
              "Expected value": "```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use 2 indices.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse 2 indices.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "At each step advance with the indices one step closer to the middle of the `array`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nAt each step advance with the indices one step closer to the middle of the `array`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "listOfNumbers = [3, 2, 1]\n",
                "text": "```swift\nlistOfNumbers = [3, 2, 1]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3]\n```\n\n",
              "Expected value": "```swift\nlistOfNumbers = [3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\nExpected value:\n```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [12, 33, 11, 1]\n",
                "text": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "listOfNumbers = [1, 11, 33, 12]\n",
                "text": "```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [12, 33, 11, 1]\n```\n\n",
              "Expected value": "```swift\nlistOfNumbers = [1, 11, 33, 12]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use 2 indices.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse 2 indices.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "At each step advance with the indices one step closer to the middle of the `array`.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nAt each step advance with the indices one step closer to the middle of the `array`.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar firstIndex = 0\nvar lastIndex = listOfNumbers.count - 1\n\nwhile firstIndex < lastIndex {\n    // swap\n    var tmp = listOfNumbers[firstIndex]\n    listOfNumbers[firstIndex] = listOfNumbers[lastIndex]\n    listOfNumbers[lastIndex] = tmp\n\n    // go to next pair\n    ++firstIndex\n    --lastIndex\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate the array using 2 indices. One starting at the end of the array.\nOne starting at the beginning of the array. At each iteration we'll swap the elements at these indices.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_6",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.7 Sorting\n\nSort the values in `listOfNumbers` in descending order. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Solution 1: Insertion Sort' collapse_link='true'] \n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2: Bubble Sort' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 3: The Swift way' collapse_link='true']\nIn real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n[/spoiler]\n\n",
        "text": "### 6.7 Sorting\n\nSort the values in `listOfNumbers` in descending order. \n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n\n[spoiler title='Solution 1: Insertion Sort' collapse_link='true'] \n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 2: Bubble Sort' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Solution 3: The Swift way' collapse_link='true']\nIn real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n[/spoiler]\n\n",
        "name": "Sorting",
        "title": "6.7 Sorting",
        "id": "7",
        "problemStatement": "### 6.7 Sorting\n\nSort the values in `listOfNumbers` in descending order. \n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 1: Insertion Sort' collapse_link='true'] \n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1: Insertion Sort",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 2: Bubble Sort' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2: Bubble Sort",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "In real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n",
            "text": "[spoiler title='Solution 3: The Swift way' collapse_link='true']\nIn real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 3: The Swift way",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "array.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n",
                "text": "```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "var listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n",
                "text": "```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "var listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n",
                "text": "```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "",
            "text": "[spoiler title='Explanation']\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 1: Insertion Sort' collapse_link='true'] \n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1: Insertion Sort",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nfor fixedIndex in 0..<nElements {\n    for i in fixedIndex+1..<nElements {\n        if listOfNumbers[fixedIndex] < listOfNumbers[i] {\n            var tmp = listOfNumbers[fixedIndex]\n            listOfNumbers[fixedIndex] = listOfNumbers[i]\n            listOfNumbers[i] = tmp\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 2: Bubble Sort' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2: Bubble Sort",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar nElements = listOfNumbers.count\n\nvar didSwap = true\n\nwhile didSwap {\n    didSwap = false\n\n    for i in 0..<nElements - 1 {\n        if listOfNumbers[i] < listOfNumbers[i+1] {\n            var tmp = listOfNumbers[i]\n            listOfNumbers[i] = listOfNumbers[i+1]\n            listOfNumbers[i+1] = tmp\n            didSwap = true\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "In real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n",
            "text": "[spoiler title='Solution 3: The Swift way' collapse_link='true']\nIn real life people don't implement sorting anymore, they just call it.  \n\n```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n\nSo to solve the problem we would write:\n\n```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 3: The Swift way",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "array.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n",
                "text": "```swift\narray.sortInPlace(<) // will sort the array in ascending order\narray.sortInPlace(>) // will sort the array in descending order\n\n// you can also use the sort method to create a sorted copy\nlet sortedArray = array.sort(<)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "var listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n",
                "text": "```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n\nprint(listOfNumbers)\n// [1, 2, 3, 10, 100]\n\nlistOfNumbers.sortInPlace(>)\n\nprint(listOfNumbers)\n// [100, 10, 3, 2, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "var listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n",
                "text": "```swift\nvar listOfNumbers = [3, 2, 100, 10, 1]\n\nlistOfNumbers.sortInPlace(<)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "",
            "text": "[spoiler title='Explanation']\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_7",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.8 Search\n\nFind out if `x` appears in `listOfNumbers`. Print `yes` if true and `no` otherwise.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nFirst assume that the element does not appear in the array. Store that state in a boolean variable.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n[/spoiler]\n\n",
        "text": "### 6.8 Search\n\nFind out if `x` appears in `listOfNumbers`. Print `yes` if true and `no` otherwise.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nFirst assume that the element does not appear in the array. Store that state in a boolean variable.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n[/spoiler]\n\n",
        "name": "Search",
        "title": "6.8 Search",
        "id": "8",
        "problemStatement": "### 6.8 Search\n\nFind out if `x` appears in `listOfNumbers`. Print `yes` if true and `no` otherwise.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 10\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "yes\n",
                "text": "```\nyes\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\n",
              "Output": "```\nyes\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "no\n",
                "text": "```\nno\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\n",
              "Output": "```\nno\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "First assume that the element does not appear in the array. Store that state in a boolean variable.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nFirst assume that the element does not appear in the array. Store that state in a boolean variable.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\nOutput:\n```\nyes\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "yes\n",
                "text": "```\nyes\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 3\n```\n\n",
              "Output": "```\nyes\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\nOutput:\n```\nno\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "no\n",
                "text": "```\nno\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 5\n```\n\n",
              "Output": "```\nno\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "First assume that the element does not appear in the array. Store that state in a boolean variable.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nFirst assume that the element does not appear in the array. Store that state in a boolean variable.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar x = 10\n\nvar xAppears = false\n\nfor number in listOfNumbers {\n    if number == x {\n        xAppears = true\n    }\n}\n\nif xAppears {\n    print(\"yes\")\n} else {\n    print(\"no\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll asume that the element does not appear in the array. We'll store `false` in a boolean variable `xAppears`. Next will iterate through all the element in the array. If one of the elements is equal to the element we're searching for we'll update the `xAppears` variable to true. The printed message will depend on `xAppears`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_8",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar x = 10\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.9 Intersection\n\nPrint all the elements from `otherNumbers` that appear in `listOfNumbers`. Don't print anything if `listOfNumbers` and `otherNumbers` have no common elements.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the `Search` problem for each element from `otherNumbers`.\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n[/spoiler]\n\n",
        "text": "### 6.9 Intersection\n\nPrint all the elements from `otherNumbers` that appear in `listOfNumbers`. Don't print anything if `listOfNumbers` and `otherNumbers` have no common elements.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the `Search` problem for each element from `otherNumbers`.\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n[/spoiler]\n\n",
        "name": "Intersection",
        "title": "6.9 Intersection",
        "id": "9",
        "problemStatement": "### 6.9 Intersection\n\nPrint all the elements from `otherNumbers` that appear in `listOfNumbers`. Don't print anything if `listOfNumbers` and `otherNumbers` have no common elements.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n",
                "text": "```\n1\n2\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Output": "```\n1\n2\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n10\n",
                "text": "```\n2\n3\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\n",
              "Output": "```\n2\n3\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " \n",
                "text": "```\n \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\n",
              "Output": "```\n \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use an approach similar to the `Search` problem for each element from `otherNumbers`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the `Search` problem for each element from `otherNumbers`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n1\n2\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n",
                "text": "```\n1\n2\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Output": "```\n1\n2\n3\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\nOutput:\n```\n2\n3\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n10\n",
                "text": "```\n2\n3\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 2, 3, 10, 13]\n```\n\n",
              "Output": "```\n2\n3\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " \n",
                "text": "```\n \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [5, 6]\n```\n\n",
              "Output": "```\n \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use an approach similar to the `Search` problem for each element from `otherNumbers`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the `Search` problem for each element from `otherNumbers`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\n\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\nfor otherNumber in otherNumbers {\n    for number in listOfNumbers {\n        if number == otherNumber {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe will first iterate through the array `otherNumbers`, for each `otherNumber` in `otherNumbers` we'll search for that number in our `numbers`, we print the number if we find it.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_9",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar otherNumbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.10 Divisors\n\nPrint all the numbers from `listOfNumbers` that are divisible by at least one number from `divisors`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTry solving the problem for the case when `listOfNumbers` contains a single element.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n[/spoiler]\n\n",
        "text": "### 6.10 Divisors\n\nPrint all the numbers from `listOfNumbers` that are divisible by at least one number from `divisors`.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTry solving the problem for the case when `listOfNumbers` contains a single element.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n[/spoiler]\n\n",
        "name": "Divisors",
        "title": "6.10 Divisors",
        "id": "10",
        "problemStatement": "### 6.10 Divisors\n\nPrint all the numbers from `listOfNumbers` that are divisible by at least one number from `divisors`.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n10\n100\n",
                "text": "```\n2\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\n",
              "Output": "```\n2\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n10\n100\n",
                "text": "```\n3\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\n",
              "Output": "```\n3\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " \n",
                "text": "```\n \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\n",
              "Output": "```\n \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Try solving the problem for the case when `listOfNumbers` contains a single element.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTry solving the problem for the case when `listOfNumbers` contains a single element.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\nOutput:\n```\n2\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n10\n100\n",
                "text": "```\n2\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n```\n\n",
              "Output": "```\n2\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\nOutput:\n```\n3\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n10\n100\n",
                "text": "```\n3\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [5, 3]\n```\n\n",
              "Output": "```\n3\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\nOutput:\n```\n \n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": " \n",
                "text": "```\n \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 9, 13]\n```\n\n",
              "Output": "```\n \n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Try solving the problem for the case when `listOfNumbers` contains a single element.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTry solving the problem for the case when `listOfNumbers` contains a single element.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [7, 5]\n\nfor number in listOfNumbers {\n    for divisor in divisors {\n        if number % divisor == 0 {\n            print(number)\n            break\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll iterate through all the numbers in our `listOfNumbers`, for each number we'll iterate through the `divisors` array and check if the number is divisible by an element from the `divisors` array, if the condition is true we break out of the inner loop.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_10",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 10, 100]\nvar divisors = [2, 5]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.11 Greatest divisor of all\n\nFind and print the greatest common divisor of all the numbers in `numbers`. A common divisor of a list of numbers is a number that divides all of them.\n\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the case with only 2 numbers.\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n[/spoiler]\n\n",
        "text": "### 6.11 Greatest divisor of all\n\nFind and print the greatest common divisor of all the numbers in `numbers`. A common divisor of a list of numbers is a number that divides all of them.\n\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the case with only 2 numbers.\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n[/spoiler]\n\n",
        "name": "Greatest divisor of all",
        "title": "6.11 Greatest divisor of all",
        "id": "11",
        "problemStatement": "### 6.11 Greatest divisor of all\n\nFind and print the greatest common divisor of all the numbers in `numbers`. A common divisor of a list of numbers is a number that divides all of them.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numbers = [12, 36, 720, 18]\n\n// your code here\n",
            "text": "```swift\nvar numbers = [12, 36, 720, 18]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [12, 36, 720, 18]\n",
                "text": "```swift\nvar numbers = [12, 36, 720, 18]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [12, 36, 720, 18]\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [3, 12, 36, 18, 7]\n",
                "text": "```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use an approach similar to the case with only 2 numbers.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the case with only 2 numbers.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n",
                "text": "```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar numbers = [12, 36, 720, 18]\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [12, 36, 720, 18]\n",
                "text": "```swift\nvar numbers = [12, 36, 720, 18]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [12, 36, 720, 18]\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [3, 12, 36, 18, 7]\n",
                "text": "```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [3, 12, 36, 18, 7]\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use an approach similar to the case with only 2 numbers.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nUse an approach similar to the case with only 2 numbers.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n",
                "text": "```swift\nvar numbers = [12, 36, 720, 18]\n\n// find the minimum value in numbers\nvar maxDiv = numbers[0]\n\nfor number in numbers {\n    if number < maxDiv {\n        maxDiv = number\n    }\n}\n\nvar gcd = 1\n\n// find the biggest number that divides all the numbers\nfor divisor in 1...maxDiv {\n    // we assume that divisor divides all numbers\n    var dividesAll = true\n    for number in numbers {\n        // if we find one that does not divide by divisor\n        if number % divisor != 0 {\n            // we remeber and stop searching\n            dividesAll = false\n            break\n        }\n    }\n\n    // if divisor divides all numbers then it's the biggest one so far\n    if dividesAll {\n        gcd = divisor\n    }\n}\n\nprint(gcd)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll find the largest number in our numbers array (`maxDiv`), we know that whatever greatest common divisor we're looking for will be less than the largest number in our array. We keep track of the greatest common divisor in a variable `gcd`. Next we iterate through all possible divisors between `1` and `maxDiv`, for each divisor we check if it divides all numbers if it does we update our `gcd` variable.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_11",
        "compileCode": true,
        "code": "var numbers = [12, 36, 720, 18]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.12 Fibonacci\n\nGenerate the first `N` numbers in the fibonacci sequence and store them in an array named `fibonacci`.\n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n[/spoiler]\n\n[spoiler title='Approach 1' collapse_link='true']\n\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Approach 2' collapse_link='true']\n\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation 1']\n\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n[/spoiler]\n\n[spoiler title='Explanation 2']\n\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n[/spoiler]\n\n",
        "text": "### 6.12 Fibonacci\n\nGenerate the first `N` numbers in the fibonacci sequence and store them in an array named `fibonacci`.\n\n```swift\nvar N = 10\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n[/spoiler]\n\n[spoiler title='Approach 1' collapse_link='true']\n\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Approach 2' collapse_link='true']\n\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation 1']\n\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n[/spoiler]\n\n[spoiler title='Explanation 2']\n\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n[/spoiler]\n\n",
        "name": "Fibonacci",
        "title": "6.12 Fibonacci",
        "id": "12",
        "problemStatement": "### 6.12 Fibonacci\n\nGenerate the first `N` numbers in the fibonacci sequence and store them in an array named `fibonacci`.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var N = 10\n\n// your code here\n",
            "text": "```swift\nvar N = 10\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n",
                "text": "```swift\nvar N = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fibonacci = [1, 1, 2, 3, 5, 8]\n",
                "text": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n```\n\n",
              "Expected value": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 9\n",
                "text": "```swift\nvar N = 9\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n",
                "text": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 9\n```\n\n",
              "Expected value": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n",
            "text": "[spoiler title='Approach 1' collapse_link='true']\n\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Approach 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n",
                "text": "```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n",
                "text": "```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n",
            "text": "[spoiler title='Approach 2' collapse_link='true']\n\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Approach 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n",
                "text": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n",
                "text": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n",
            "text": "[spoiler title='Explanation 1']\n\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation 1"
            }
          },
          {
            "type": "spoiler",
            "content": "\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n",
            "text": "[spoiler title='Explanation 2']\n\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation 2"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar N = 6\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 6\n",
                "text": "```swift\nvar N = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fibonacci = [1, 1, 2, 3, 5, 8]\n",
                "text": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 6\n```\n\n",
              "Expected value": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar N = 9\n```\n\nExpected value:\n```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 9\n",
                "text": "```swift\nvar N = 9\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n",
                "text": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar N = 9\n```\n\n",
              "Expected value": "```swift\nfibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value"
            ]
          }
        ],
        "approaches": [
          {
            "type": "spoiler",
            "content": "\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n",
            "text": "[spoiler title='Approach 1' collapse_link='true']\n\nUse append to add the next numbers\n\n```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Approach 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n",
                "text": "```swift\nvar N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n",
            "text": "[spoiler title='Approach 2' collapse_link='true']\n\nCreate an array with ones and compute all the numbers\n\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Approach 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n",
                "text": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\n// your code here \n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n",
                "text": "```swift\nvar N = 30\n\nvar fibonacci = [1, 1]\n\nfor i in 2...N - 1 {\n    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n}\n\nfor number in fibonacci {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n",
                "text": "```swift\nlet N = 30\nvar fib = [Int](count: N, repeatedValue: 1)\n\nfor i in 2..<N {\n    fib[i] = fib[i-1] + fib[i-2]\n}\n\nfor number in fib {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n",
            "text": "[spoiler title='Explanation 1']\n\nThe fibbonaci sequence is defined as `F0 = 1` `F1 = 1` `Fn = Fn - 1 + Fn - 2` for `N > 1`. We already have the first 2 elements of our sequence in the array `fibonacci`. We'll want to iterate from `2` to `N - 1` and add a new element to the `fibbonaci` array at each step using the above formula. Note that our array is indexed starting from 0.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation 1"
            }
          },
          {
            "type": "spoiler",
            "content": "\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n",
            "text": "[spoiler title='Explanation 2']\n\nThe second approach is similar to the first one but we don't add the new elements to the array instead we alreadyt have the array initialized to the correct dimension and we just overwrite the value at each index from `2` to `N - 1`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation 2"
            }
          }
        ],
        "playgroundName": "Exercise6_12",
        "compileCode": true,
        "code": "var N = 30\nvar fibonacci = [1, 1]\n\n// your code here \n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.13 Divisors\n\nGiven a `number` find and store all it's divisors in an array called `divisors`, then print the divisors in ascending order on separate lines.\n\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nAny value between `1` and `number` can be a divisor of `number`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n[/spoiler]\n\n",
        "text": "### 6.13 Divisors\n\nGiven a `number` find and store all it's divisors in an array called `divisors`, then print the divisors in ascending order on separate lines.\n\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\n// your code here\n```\n\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nAny value between `1` and `number` can be a divisor of `number`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n[/spoiler]\n\n",
        "name": "Divisors",
        "title": "6.13 Divisors",
        "id": "13",
        "problemStatement": "### 6.13 Divisors\n\nGiven a `number` find and store all it's divisors in an array called `divisors`, then print the divisors in ascending order on separate lines.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 60\nvar divisors: [Int] = []\n\n// your code here\n",
            "text": "```swift\nvar number = 60\nvar divisors: [Int] = []\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 6\n",
                "text": "```swift\nvar number = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisors = [1, 2, 3, 6]\n",
                "text": "```swift\ndivisors = [1, 2, 3, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n6\n",
                "text": "```\n1\n2\n3\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 6\n```\n\n",
              "Expected value": "```swift\ndivisors = [1, 2, 3, 6]\n```\n\n",
              "Output": "```\n1\n2\n3\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 30\n",
                "text": "```swift\nvar number = 30\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisors = [1, 2, 3, 5, 6, 10, 15, 30]\n",
                "text": "```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n10\n15\n30\n",
                "text": "```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 30\n```\n\n",
              "Expected value": "```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Any value between `1` and `number` can be a divisor of `number`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nAny value between `1` and `number` can be a divisor of `number`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n",
                "text": "```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 6\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 6]\n```\n\nOutput:\n```\n1\n2\n3\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 6\n",
                "text": "```swift\nvar number = 6\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisors = [1, 2, 3, 6]\n",
                "text": "```swift\ndivisors = [1, 2, 3, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n6\n",
                "text": "```\n1\n2\n3\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 6\n```\n\n",
              "Expected value": "```swift\ndivisors = [1, 2, 3, 6]\n```\n\n",
              "Output": "```\n1\n2\n3\n6\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 30\n```\n\nExpected value:\n```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\nOutput:\n```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 30\n",
                "text": "```swift\nvar number = 30\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "divisors = [1, 2, 3, 5, 6, 10, 15, 30]\n",
                "text": "```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n5\n6\n10\n15\n30\n",
                "text": "```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 30\n```\n\n",
              "Expected value": "```swift\ndivisors = [1, 2, 3, 5, 6, 10, 15, 30]\n```\n\n",
              "Output": "```\n1\n2\n3\n5\n6\n10\n15\n30\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Any value between `1` and `number` can be a divisor of `number`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nAny value between `1` and `number` can be a divisor of `number`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n",
                "text": "```swift\nvar number = 60\nvar divisors: [Int] = []\n\nfor divisor in 1...number {\n    if number % divisor == 0 {\n        divisors.append(divisor)\n    }\n}\n\nfor divisor in divisors {\n    print(divisor)\n}    \n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo get all the divisors of a `number` we'll want to check if it's divisible by any divisor between `1` and `number`. We'll write a `for` loop that checks for this and saves the result in the `divisors` array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_13",
        "compileCode": true,
        "code": "var number = 60\nvar divisors: [Int] = []\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.14 Digits\n\nFind and store the digits of `number` from left to right in an array `digits`, and then print the digits on separate lines.\n\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nStore the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n[/spoiler]\n\n",
        "text": "### 6.14 Digits\n\nFind and store the digits of `number` from left to right in an array `digits`, and then print the digits on separate lines.\n\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nStore the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n[/spoiler]\n\n",
        "name": "Digits",
        "title": "6.14 Digits",
        "id": "14",
        "problemStatement": "### 6.14 Digits\n\nFind and store the digits of `number` from left to right in an array `digits`, and then print the digits on separate lines.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var number = 12345\nvar digits: [Int] = []\n\n// your code here\n",
            "text": "```swift\nvar number = 12345\nvar digits: [Int] = []\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\n",
                "text": "```swift\nvar number = 12345\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "digits = [1, 2, 3, 4, 5]\n",
                "text": "```swift\ndigits = [1, 2, 3, 4, 5]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n4\n5\n",
                "text": "```\n1\n2\n3\n4\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12345\n```\n\n",
              "Expected value": "```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\n",
              "Output": "```\n1\n2\n3\n4\n5\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 232121\n",
                "text": "```swift\nvar number = 232121\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "digits = [2, 3, 2, 1, 2, 1]\n",
                "text": "```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n2\n1\n2\n1\n",
                "text": "```\n2\n3\n2\n1\n2\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 232121\n```\n\n",
              "Expected value": "```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\n",
              "Output": "```\n2\n3\n2\n1\n2\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Store the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nStore the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n",
                "text": "```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar number = 12345\n```\n\nExpected value:\n```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\nOutput:\n```\n1\n2\n3\n4\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\n",
                "text": "```swift\nvar number = 12345\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "digits = [1, 2, 3, 4, 5]\n",
                "text": "```swift\ndigits = [1, 2, 3, 4, 5]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n4\n5\n",
                "text": "```\n1\n2\n3\n4\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 12345\n```\n\n",
              "Expected value": "```swift\ndigits = [1, 2, 3, 4, 5]\n```\n\n",
              "Output": "```\n1\n2\n3\n4\n5\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar number = 232121\n```\n\nExpected value:\n```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\nOutput:\n```\n2\n3\n2\n1\n2\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 232121\n",
                "text": "```swift\nvar number = 232121\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "digits = [2, 3, 2, 1, 2, 1]\n",
                "text": "```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n2\n1\n2\n1\n",
                "text": "```\n2\n3\n2\n1\n2\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar number = 232121\n```\n\n",
              "Expected value": "```swift\ndigits = [2, 3, 2, 1, 2, 1]\n```\n\n",
              "Output": "```\n2\n3\n2\n1\n2\n1\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Store the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nStore the digits from right to left if you find it easier. The digits from left to right are the reversed array.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n",
                "text": "```swift\nvar number = 12345\nvar digits: [Int] = []\n\nwhile number > 0 {\n    var digit = number % 10\n\n    digits = [digit] + digits\n\n    number /= 10 // 12345 -> 1234 -> 123 -> 12 -> 1\n}\n\nfor digit in digits {\n    print(digit)\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll use a while loop to get all the digits of a number. In the while loop we'll be getting the digits from right to left, to reverse their order we'll use a trick similar to reversing a string, adding each new digit at the beginning of the array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_14",
        "compileCode": true,
        "code": "var number = 12345\nvar digits: [Int] = []\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 6.15 Unique\n\nCreate a list `unique` with all the unique numbers from `listOfNumbers`, and then print the numbers on separate lines.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n[/spoiler]\n",
        "text": "### 6.15 Unique\n\nCreate a list `unique` with all the unique numbers from `listOfNumbers`, and then print the numbers on separate lines.\n\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n[/spoiler]\n",
        "name": "Unique",
        "title": "6.15 Unique",
        "id": "15",
        "problemStatement": "### 6.15 Unique\n\nCreate a list `unique` with all the unique numbers from `listOfNumbers`, and then print the numbers on separate lines.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\n// your code here\n",
            "text": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "unique = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nunique = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n10\n100\n",
                "text": "```\n1\n2\n3\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\n",
              "Expected value": "```swift\nunique = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n1\n2\n3\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n",
                "text": "```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "unique = [2, 3, 1, 10]\n",
                "text": "```swift\nunique = [2, 3, 1, 10]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n1\n10\n",
                "text": "```\n2\n3\n1\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\n",
              "Expected value": "```swift\nunique = [2, 3, 1, 10]\n```\n\n",
              "Output": "```\n2\n3\n1\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "6",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\nExpected value:\n```swift\nunique = [1, 2, 3, 10, 100]\n```\n\nOutput:\n```\n1\n2\n3\n10\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "unique = [1, 2, 3, 10, 100]\n",
                "text": "```swift\nunique = [1, 2, 3, 10, 100]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n2\n3\n10\n100\n",
                "text": "```\n1\n2\n3\n10\n100\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n```\n\n",
              "Expected value": "```swift\nunique = [1, 2, 3, 10, 100]\n```\n\n",
              "Output": "```\n1\n2\n3\n10\n100\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\nExpected value:\n```swift\nunique = [2, 3, 1, 10]\n```\n\nOutput:\n```\n2\n3\n1\n10\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n",
                "text": "```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "unique = [2, 3, 1, 10]\n",
                "text": "```swift\nunique = [2, 3, 1, 10]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n1\n10\n",
                "text": "```\n2\n3\n1\n10\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar listOfNumbers = [2, 3, 1, 1, 1, 2, 2, 2, 10]\n```\n\n",
              "Expected value": "```swift\nunique = [2, 3, 1, 10]\n```\n\n",
              "Output": "```\n2\n3\n1\n10\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected value",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n",
                "text": "```swift\nvar listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\nfor number in listOfNumbers {\n    var numberIsNew = true\n\n    for otherNumber in unique {\n        if number == otherNumber {\n            numberIsNew = false\n            break\n        }\n    }\n\n    if numberIsNew {\n        unique.append(number)\n    }\n}\n\nfor number in unique {\n    print(number)\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialize our `unique` array to be empty. Next we iterate through all the numberes in `listOfNumbers` for each number we check if its already in our `unique` array, if it is not we add it to the `unique` array. This will result in an array with all the unique numbers from `listOfNumbers`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise6_15",
        "compileCode": true,
        "code": "var listOfNumbers = [1, 2, 3, 1, 2, 10, 100]\n\nvar unique: [Int] = []\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 7. Functions\n\nA function is a chunk of code that performs a specific task. Functions have a name that describes their purpose, that name is used to call the function to perform the task when needed.\nYou can provide data to a function by sending parameters to it, and the function can give data back using a result value.\nFor example here is a function that takes an `Int` and returns a `Bool`:\n\n```swift\nfunc isOdd(number: Int) -> Bool {\n    if number % 2 == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nprint(isOdd(1)) // true\nprint(isOdd(2)) // false\nprint(isOdd(3)) // true\n```\n\nIn the above example `isOdd` is the name of the function, `number` is the parameter and `Bool` is the return type.\n\n#### Defining a function\n\nWhen you define a function, you can optionally define one or more named, typed values that the function takes as input (known as parameters), and/or a type of value that the function will pass back as output when it is done (known as its return type).\n\nThe general syntax for a function is:\n\n**func** `name`(`list of parameters`) -> `return type` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nSome functions don't return any values. In that case the syntax doesn't have the arrow(->) and the return type.\n\n**func** `name`(`list of parameters`) {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\n\n##### Functions with no parameters with no return value\n\n```swift\nfunc sayHello() {\n    print(\"Hello!\")\n}\n\nsayHello() // Hello!\n```\n\n##### Functions with one parameter with no return value\n\nParameters are followed by their type.\n\n```swift \nfunc sayHelloTo(name: String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHelloTo(\"Swift\") // Hello Swift!\n\n\nfunc printNumber(number: Int) {\n    print(number)\n}\n\nprintNumber(12345) // 12345\n```\n\n##### Functions with one parameter and return value\n\nTo add a return value to a function write `->` after the list of parameter followed by the type of the result.\nFunctions that return a value must do so using the `return` keyword. When calling return inside a function the code execution will stop at that line - similar to the `break` statement inside a loop. \n\n```swift\nfunc double(number: Int) -> Int {\n    return number * 2\n}\n\nprint(double(1)) // 2\nprint(double(2)) // 4\nprint(double(3)) // 6\n```\n\n##### Functions with multiples parameters with no return value\n\nTo declare multiple parameters use commas to separate them.\n\n```swift\nfunc count(from: Int, to: Int) {\n    for i in from...to {\n        print(i)\n    }\n}\n\ncount(5, to: 10) \n// 5\n// 6 \n// 7\n// 8\n// 9\n// 10\n```\n\nNotice that the second parameter has the name visible from outside. Starting with the second parameter all parameters have an implicit external parameter name. The same as the local parameter name. \n\n##### Functions with multiples parameters and return value\n\n```swift\nfunc sum(a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nprint(sum(1, 2)) // 3\n```\n\nNotice that the second parameter doesn't have an external name in this example. This is because of the `_` character in front of `b`. It this case `_` means don't give this parameter an external name. Remember this because you are going to use it in the exercises.\n\n#### External parameter names\n\nParameter names are only used inside the functions body. They are know as *local parameter names*.\n\nSometimes it's useful to name your parameters when you call a function. To do this you must define *external parameter names* for them. You can write external parameter names before the local name. \nStarting with the second parameter all parameters have the external parameter name set to the local one. You can change it by writing a different name before it.\n\n```swift\nfunc sayHello(to name:String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHello(to: \"Batman\")\n// Hello Batman!\n\n\n```\n\nExternal parameter names should be used when the purpose of a function's arguments is unclear to someone using your code for the first time.\n\nI think you agree that this code is clear:\n\n```swift\nsum(1, 2) // adds 1 and 2\n```\n\nWhile this one isn't that clear:\n\n```swift\nprintNumbers(1, 10)\n```\n\nDoes it print `1` and `10` or the numbers from `1` to `10`?\n\nBy adding an external parameter name we can make the purpose of the function clear.\n\n```swift\nprintNumbers(1, to: 10)\n```\n\n\n#### Default Parameter Values\n\nYou can define a default value for any parameter in a function definition. You do this by following the parameter definition with a `=` sign and the value for that parameter. If a parameter has a default value set you can omit that parameter when calling the function. To keep things clean it's recommended that you write all the parameters with default value at the end of the parameter list. \n\n```swift\nfunc countdown(from: Int, to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, to: 3)\n// 5\n// 4\n// 3\n```\n\nNote that Swift will automatically assign an external parameter name to any parameter with a default value so that it's purpose is clear. To stop this from happening write an underline (`_`) before the parameter with default value.\n\n```swift\nfunc countdown(from: Int, _ to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, 3)\n// 5\n// 4\n// 3\n```\n\n#### Constant and Variable Parameters\n\nFunction parameters are constant by default, that means that you cannot change the value of a parameter inside a function. Trying to change the value of a parameter will result in a compile error.  \nIn some case you will want to change the value of a parameter. To do that declare the parameter with the `var` keyword. The changes made to the parameter will only be present inside the function call.\n\n```swift \nfunc digits(var number: Int) -> [Int] {\n    var result: [Int] = []\n    repeat {\n        let digit = number % 10\n        result.insert(digit, atIndex: 0)\n        number = number / 10\n    } while number > 0\n    return result\n}\n\nvar number = 12345\n\nprint(digits(number)) // [1, 2, 3, 4, 5]\nprint(number) // 12345 \n```\n\n#### In-Out Parameters\n\nVariable parameters can only be changed inside a function. If you want the function to change the value of a parameter and you want those changes to persist after the function call, define the parameter as an `inout` parameter.\n\nKeep in mind that you can only pass variables as in-out parameters. You cannot pass a constant or a literal value, because they cannot be changed. You have to write an ampersand (`&`) in front of the variable name when calling the function. That will indicate that the variable can be modified by the function.\n\n```swift\nfunc doubleANumber(inout number: Int) {\n    number = number * 2\n}\n\nvar n = 10\n\ndoubleANumber(&n)\n\nprint(n) // 20\n```\n\n\n",
    "text": "## 7. Functions\n\nA function is a chunk of code that performs a specific task. Functions have a name that describes their purpose, that name is used to call the function to perform the task when needed.\nYou can provide data to a function by sending parameters to it, and the function can give data back using a result value.\nFor example here is a function that takes an `Int` and returns a `Bool`:\n\n```swift\nfunc isOdd(number: Int) -> Bool {\n    if number % 2 == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nprint(isOdd(1)) // true\nprint(isOdd(2)) // false\nprint(isOdd(3)) // true\n```\n\nIn the above example `isOdd` is the name of the function, `number` is the parameter and `Bool` is the return type.\n\n#### Defining a function\n\nWhen you define a function, you can optionally define one or more named, typed values that the function takes as input (known as parameters), and/or a type of value that the function will pass back as output when it is done (known as its return type).\n\nThe general syntax for a function is:\n\n**func** `name`(`list of parameters`) -> `return type` {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nSome functions don't return any values. In that case the syntax doesn't have the arrow(->) and the return type.\n\n**func** `name`(`list of parameters`) {  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\n\n##### Functions with no parameters with no return value\n\n```swift\nfunc sayHello() {\n    print(\"Hello!\")\n}\n\nsayHello() // Hello!\n```\n\n##### Functions with one parameter with no return value\n\nParameters are followed by their type.\n\n```swift \nfunc sayHelloTo(name: String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHelloTo(\"Swift\") // Hello Swift!\n\n\nfunc printNumber(number: Int) {\n    print(number)\n}\n\nprintNumber(12345) // 12345\n```\n\n##### Functions with one parameter and return value\n\nTo add a return value to a function write `->` after the list of parameter followed by the type of the result.\nFunctions that return a value must do so using the `return` keyword. When calling return inside a function the code execution will stop at that line - similar to the `break` statement inside a loop. \n\n```swift\nfunc double(number: Int) -> Int {\n    return number * 2\n}\n\nprint(double(1)) // 2\nprint(double(2)) // 4\nprint(double(3)) // 6\n```\n\n##### Functions with multiples parameters with no return value\n\nTo declare multiple parameters use commas to separate them.\n\n```swift\nfunc count(from: Int, to: Int) {\n    for i in from...to {\n        print(i)\n    }\n}\n\ncount(5, to: 10) \n// 5\n// 6 \n// 7\n// 8\n// 9\n// 10\n```\n\nNotice that the second parameter has the name visible from outside. Starting with the second parameter all parameters have an implicit external parameter name. The same as the local parameter name. \n\n##### Functions with multiples parameters and return value\n\n```swift\nfunc sum(a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nprint(sum(1, 2)) // 3\n```\n\nNotice that the second parameter doesn't have an external name in this example. This is because of the `_` character in front of `b`. It this case `_` means don't give this parameter an external name. Remember this because you are going to use it in the exercises.\n\n#### External parameter names\n\nParameter names are only used inside the functions body. They are know as *local parameter names*.\n\nSometimes it's useful to name your parameters when you call a function. To do this you must define *external parameter names* for them. You can write external parameter names before the local name. \nStarting with the second parameter all parameters have the external parameter name set to the local one. You can change it by writing a different name before it.\n\n```swift\nfunc sayHello(to name:String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHello(to: \"Batman\")\n// Hello Batman!\n\n\n```\n\nExternal parameter names should be used when the purpose of a function's arguments is unclear to someone using your code for the first time.\n\nI think you agree that this code is clear:\n\n```swift\nsum(1, 2) // adds 1 and 2\n```\n\nWhile this one isn't that clear:\n\n```swift\nprintNumbers(1, 10)\n```\n\nDoes it print `1` and `10` or the numbers from `1` to `10`?\n\nBy adding an external parameter name we can make the purpose of the function clear.\n\n```swift\nprintNumbers(1, to: 10)\n```\n\n\n#### Default Parameter Values\n\nYou can define a default value for any parameter in a function definition. You do this by following the parameter definition with a `=` sign and the value for that parameter. If a parameter has a default value set you can omit that parameter when calling the function. To keep things clean it's recommended that you write all the parameters with default value at the end of the parameter list. \n\n```swift\nfunc countdown(from: Int, to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, to: 3)\n// 5\n// 4\n// 3\n```\n\nNote that Swift will automatically assign an external parameter name to any parameter with a default value so that it's purpose is clear. To stop this from happening write an underline (`_`) before the parameter with default value.\n\n```swift\nfunc countdown(from: Int, _ to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, 3)\n// 5\n// 4\n// 3\n```\n\n#### Constant and Variable Parameters\n\nFunction parameters are constant by default, that means that you cannot change the value of a parameter inside a function. Trying to change the value of a parameter will result in a compile error.  \nIn some case you will want to change the value of a parameter. To do that declare the parameter with the `var` keyword. The changes made to the parameter will only be present inside the function call.\n\n```swift \nfunc digits(var number: Int) -> [Int] {\n    var result: [Int] = []\n    repeat {\n        let digit = number % 10\n        result.insert(digit, atIndex: 0)\n        number = number / 10\n    } while number > 0\n    return result\n}\n\nvar number = 12345\n\nprint(digits(number)) // [1, 2, 3, 4, 5]\nprint(number) // 12345 \n```\n\n#### In-Out Parameters\n\nVariable parameters can only be changed inside a function. If you want the function to change the value of a parameter and you want those changes to persist after the function call, define the parameter as an `inout` parameter.\n\nKeep in mind that you can only pass variables as in-out parameters. You cannot pass a constant or a literal value, because they cannot be changed. You have to write an ampersand (`&`) in front of the variable name when calling the function. That will indicate that the variable can be modified by the function.\n\n```swift\nfunc doubleANumber(inout number: Int) {\n    number = number * 2\n}\n\nvar n = 10\n\ndoubleANumber(&n)\n\nprint(n) // 20\n```\n\n\n",
    "name": "Functions",
    "title": "Functions",
    "id": "7",
    "codes": [
      {
        "type": "code",
        "content": "func isOdd(number: Int) -> Bool {\n    if number % 2 == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nprint(isOdd(1)) // true\nprint(isOdd(2)) // false\nprint(isOdd(3)) // true\n",
        "text": "```swift\nfunc isOdd(number: Int) -> Bool {\n    if number % 2 == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nprint(isOdd(1)) // true\nprint(isOdd(2)) // false\nprint(isOdd(3)) // true\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func sayHello() {\n    print(\"Hello!\")\n}\n\nsayHello() // Hello!\n",
        "text": "```swift\nfunc sayHello() {\n    print(\"Hello!\")\n}\n\nsayHello() // Hello!\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func sayHelloTo(name: String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHelloTo(\"Swift\") // Hello Swift!\n\n\nfunc printNumber(number: Int) {\n    print(number)\n}\n\nprintNumber(12345) // 12345\n",
        "text": "```swift \nfunc sayHelloTo(name: String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHelloTo(\"Swift\") // Hello Swift!\n\n\nfunc printNumber(number: Int) {\n    print(number)\n}\n\nprintNumber(12345) // 12345\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func double(number: Int) -> Int {\n    return number * 2\n}\n\nprint(double(1)) // 2\nprint(double(2)) // 4\nprint(double(3)) // 6\n",
        "text": "```swift\nfunc double(number: Int) -> Int {\n    return number * 2\n}\n\nprint(double(1)) // 2\nprint(double(2)) // 4\nprint(double(3)) // 6\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func count(from: Int, to: Int) {\n    for i in from...to {\n        print(i)\n    }\n}\n\ncount(5, to: 10) \n// 5\n// 6 \n// 7\n// 8\n// 9\n// 10\n",
        "text": "```swift\nfunc count(from: Int, to: Int) {\n    for i in from...to {\n        print(i)\n    }\n}\n\ncount(5, to: 10) \n// 5\n// 6 \n// 7\n// 8\n// 9\n// 10\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func sum(a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nprint(sum(1, 2)) // 3\n",
        "text": "```swift\nfunc sum(a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nprint(sum(1, 2)) // 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func sayHello(to name:String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHello(to: \"Batman\")\n// Hello Batman!\n\n\n",
        "text": "```swift\nfunc sayHello(to name:String) {\n    print(\"Hello \" + name + \"!\")\n}\n\nsayHello(to: \"Batman\")\n// Hello Batman!\n\n\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "sum(1, 2) // adds 1 and 2\n",
        "text": "```swift\nsum(1, 2) // adds 1 and 2\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "printNumbers(1, 10)\n",
        "text": "```swift\nprintNumbers(1, 10)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "printNumbers(1, to: 10)\n",
        "text": "```swift\nprintNumbers(1, to: 10)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func countdown(from: Int, to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, to: 3)\n// 5\n// 4\n// 3\n",
        "text": "```swift\nfunc countdown(from: Int, to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, to: 3)\n// 5\n// 4\n// 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func countdown(from: Int, _ to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, 3)\n// 5\n// 4\n// 3\n",
        "text": "```swift\nfunc countdown(from: Int, _ to: Int = 1) {\n    for var i = from; i >= to; --i {\n        print(i)\n    }\n}\n\ncountdown(3)\n// 3\n// 2\n// 1\n\ncountdown(5, 3)\n// 5\n// 4\n// 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func digits(var number: Int) -> [Int] {\n    var result: [Int] = []\n    repeat {\n        let digit = number % 10\n        result.insert(digit, atIndex: 0)\n        number = number / 10\n    } while number > 0\n    return result\n}\n\nvar number = 12345\n\nprint(digits(number)) // [1, 2, 3, 4, 5]\nprint(number) // 12345 \n",
        "text": "```swift \nfunc digits(var number: Int) -> [Int] {\n    var result: [Int] = []\n    repeat {\n        let digit = number % 10\n        result.insert(digit, atIndex: 0)\n        number = number / 10\n    } while number > 0\n    return result\n}\n\nvar number = 12345\n\nprint(digits(number)) // [1, 2, 3, 4, 5]\nprint(number) // 12345 \n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func doubleANumber(inout number: Int) {\n    number = number * 2\n}\n\nvar n = 10\n\ndoubleANumber(&n)\n\nprint(n) // 20\n",
        "text": "```swift\nfunc doubleANumber(inout number: Int) {\n    number = number * 2\n}\n\nvar n = 10\n\ndoubleANumber(&n)\n\nprint(n) // 20\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 7.1 Min\n\nWrite a function named `min2` that takes two `Int` values, `a` and `b`, and returns the smallest one. \n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou can have multiple `return` statements in one function. \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n[/spoiler]\n\n",
        "text": "### 7.1 Min\n\nWrite a function named `min2` that takes two `Int` values, `a` and `b`, and returns the smallest one. \n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou can have multiple `return` statements in one function. \n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n[/spoiler]\n\n",
        "name": "Min",
        "title": "7.1 Min",
        "id": "1",
        "problemStatement": "### 7.1 Min\n\nWrite a function named `min2` that takes two `Int` values, `a` and `b`, and returns the smallest one. \n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func min2(a: Int, _ b: Int) -> Int\n",
                "text": "```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "min2(1,2)\n",
                "text": "```swift\nmin2(1,2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nmin2(1,2)\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "min2(10,5)\n",
                "text": "```swift\nmin2(10,5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nmin2(10,5)\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You can have multiple `return` statements in one function. \n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou can have multiple `return` statements in one function. \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n",
                "text": "```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n",
            "text": "[spoiler title='Explanation']\n\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "twists": [
          {
            "type": "twist",
            "content": "#### Twist\n\nUse the `min2` function to write `min3`. A function that takes three numbers and returns the one with the minimum value.\n\n```swift\nmin3(1, 2, 3) // 1\nmin3(4, 8, 2) // 2\n```\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n[/spoiler]\n\n",
            "text": "#### Twist\n\nUse the `min2` function to write `min3`. A function that takes three numbers and returns the one with the minimum value.\n\n```swift\nmin3(1, 2, 3) // 1\nmin3(4, 8, 2) // 2\n```\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n[/spoiler]\n\n",
            "problemStatement": "\nUse the `min2` function to write `min3`. A function that takes three numbers and returns the one with the minimum value.\n\n\n\n",
            "codes": [
              {
                "type": "code",
                "content": "min3(1, 2, 3) // 1\nmin3(4, 8, 2) // 2\n",
                "text": "```swift\nmin3(1, 2, 3) // 1\nmin3(4, 8, 2) // 2\n```\n",
                "language": "swift"
              }
            ],
            "spoilers": [
              {
                "type": "spoiler",
                "content": "```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "func min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n",
                    "text": "```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n",
                    "language": "swift"
                  }
                ]
              }
            ],
            "compileSolution": true,
            "solutions": [
              {
                "type": "spoiler",
                "content": "```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n",
                "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n[/spoiler]\n",
                "params": {
                  "title": "Solution",
                  "collapse_link": "true"
                },
                "codes": [
                  {
                    "type": "code",
                    "content": "func min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n",
                    "text": "```swift\nfunc min3(a: Int, _ b: Int, _ c: Int) -> Int {\n    return min2(min2(a, b), c)\n}\n```\n",
                    "language": "swift"
                  }
                ]
              }
            ],
            "playgroundName": "Exercise_",
            "compileCode": true,
            "misc": [

            ]
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func min2(a: Int, _ b: Int) -> Int\n",
                "text": "```swift\nfunc min2(a: Int, _ b: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(1,2)\n```\n\nOutput:\n```\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "min2(1,2)\n",
                "text": "```swift\nmin2(1,2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```\n1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nmin2(1,2)\n```\n\n",
              "Output": "```\n1\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nmin2(10,5)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "min2(10,5)\n",
                "text": "```swift\nmin2(10,5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nmin2(10,5)\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You can have multiple `return` statements in one function. \n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou can have multiple `return` statements in one function. \n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n",
                "text": "```swift\nfunc min2(a: Int, _ b: Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n",
            "text": "[spoiler title='Explanation']\n\nIf `a > b` we return `a` from the function otherwise we return `b`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_1",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.2 Last Digit\n\nWrite a function that takes an `Int` and returns it's last digit. Name the function `lastDigit`.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc lastDigit(number: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the modulo(`%`) operator.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n",
        "text": "### 7.2 Last Digit\n\nWrite a function that takes an `Int` and returns it's last digit. Name the function `lastDigit`.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc lastDigit(number: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the modulo(`%`) operator.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n",
        "name": "Last Digit",
        "title": "7.2 Last Digit",
        "id": "2",
        "problemStatement": "### 7.2 Last Digit\n\nWrite a function that takes an `Int` and returns it's last digit. Name the function `lastDigit`.\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc lastDigit(number: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc lastDigit(number: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func lastDigit(number: Int) -> Int\n",
                "text": "```swift\nfunc lastDigit(number: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(12345)\n",
                "text": "```swift\nlastDigit(12345)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(12345)\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(1000)\n",
                "text": "```swift\nlastDigit(1000)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0\n",
                "text": "```\n0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(1000)\n```\n\n",
              "Output": "```\n0\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(123)\n",
                "text": "```swift\nlastDigit(123)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(123)\n```\n\n",
              "Output": "```\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the modulo(`%`) operator.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the modulo(`%`) operator.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func lastDigit(number: Int) -> Int {\n    return number % 10\n}\n",
                "text": "```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc lastDigit(number: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc lastDigit(number: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func lastDigit(number: Int) -> Int\n",
                "text": "```swift\nfunc lastDigit(number: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(12345)\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(12345)\n",
                "text": "```swift\nlastDigit(12345)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(12345)\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(1000)\n```\n\nOutput:\n```\n0\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(1000)\n",
                "text": "```swift\nlastDigit(1000)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0\n",
                "text": "```\n0\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(1000)\n```\n\n",
              "Output": "```\n0\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nlastDigit(123)\n```\n\nOutput:\n```\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "lastDigit(123)\n",
                "text": "```swift\nlastDigit(123)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```\n3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nlastDigit(123)\n```\n\n",
              "Output": "```\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the modulo(`%`) operator.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the modulo(`%`) operator.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func lastDigit(number: Int) -> Int {\n    return number % 10\n}\n",
                "text": "```swift\nfunc lastDigit(number: Int) -> Int {\n    return number % 10\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe just have to return the last digit from the function. The last digit si given by `number % 10`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_2",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.3 First Numbers\n\nWrite a function named `first` that takes an `Int` named `N` and returns an array with the first `N` numbers starting from `1`.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc first(N: Int) -> [Int]\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `append` function on arrays to create the required result.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n",
        "text": "### 7.3 First Numbers\n\nWrite a function named `first` that takes an `Int` named `N` and returns an array with the first `N` numbers starting from `1`.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc first(N: Int) -> [Int]\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `append` function on arrays to create the required result.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n",
        "name": "First Numbers",
        "title": "7.3 First Numbers",
        "id": "3",
        "problemStatement": "### 7.3 First Numbers\n\nWrite a function named `first` that takes an `Int` named `N` and returns an array with the first `N` numbers starting from `1`.\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc first(N: Int) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc first(N: Int) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func first(N: Int) -> [Int]\n",
                "text": "```swift\nfunc first(N: Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(3)\n",
                "text": "```swift\nfirst(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3]\n",
                "text": "```\n[1, 2, 3]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(3)\n```\n\n",
              "Output": "```\n[1, 2, 3]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(1)\n",
                "text": "```swift\nfirst(1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1]\n",
                "text": "```\n[1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(1)\n```\n\n",
              "Output": "```\n[1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(10)\n",
                "text": "```swift\nfirst(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
                "text": "```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(10)\n```\n\n",
              "Output": "```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the `append` function on arrays to create the required result.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `append` function on arrays to create the required result.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n",
                "text": "```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc first(N: Int) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc first(N: Int) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func first(N: Int) -> [Int]\n",
                "text": "```swift\nfunc first(N: Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(3)\n```\n\nOutput:\n```\n[1, 2, 3]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(3)\n",
                "text": "```swift\nfirst(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3]\n",
                "text": "```\n[1, 2, 3]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(3)\n```\n\n",
              "Output": "```\n[1, 2, 3]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(1)\n```\n\nOutput:\n```\n[1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(1)\n",
                "text": "```swift\nfirst(1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1]\n",
                "text": "```\n[1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(1)\n```\n\n",
              "Output": "```\n[1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nfirst(10)\n```\n\nOutput:\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "first(10)\n",
                "text": "```swift\nfirst(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
                "text": "```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nfirst(10)\n```\n\n",
              "Output": "```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the `append` function on arrays to create the required result.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `append` function on arrays to create the required result.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n",
                "text": "```swift\nfunc first(N: Int) -> [Int] {\n    var numbers:[Int] = []\n    \n    for number in 1...N {\n        numbers.append(number)\n    }\n    \n    return numbers\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll create a new array in which we'll add `number` N times. At the end of the function we'll return that array.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_3",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.4 Countdown\n\nWrite a function named `countdown` that takes a number `N`. The function should print the numbers from `N` to `1` with a one second pause in between and then write `GO!` in the end. To make the computer wait for one second call the `sleep` function from the standard library. The `sleep` function takes one parameter, the number of seconds to sleep.\n\n[spoiler title='Using the sleep function' collapse_link='true']\n\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc countdown(N: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\nimport Foundation\n\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example\" collapse_link=\"true\"]  \nFunction call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n[/spoiler]\n\n",
        "text": "### 7.4 Countdown\n\nWrite a function named `countdown` that takes a number `N`. The function should print the numbers from `N` to `1` with a one second pause in between and then write `GO!` in the end. To make the computer wait for one second call the `sleep` function from the standard library. The `sleep` function takes one parameter, the number of seconds to sleep.\n\n[spoiler title='Using the sleep function' collapse_link='true']\n\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc countdown(N: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\nimport Foundation\n\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example\" collapse_link=\"true\"]  \nFunction call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n[/spoiler]\n\n",
        "name": "Countdown",
        "title": "7.4 Countdown",
        "id": "4",
        "problemStatement": "### 7.4 Countdown\n\nWrite a function named `countdown` that takes a number `N`. The function should print the numbers from `N` to `1` with a one second pause in between and then write `GO!` in the end. To make the computer wait for one second call the `sleep` function from the standard library. The `sleep` function takes one parameter, the number of seconds to sleep.\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n",
            "text": "[spoiler title='Using the sleep function' collapse_link='true']\n\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Using the sleep function",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n",
                "text": "```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc countdown(N: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc countdown(N: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func countdown(N: Int)\n",
                "text": "```swift\nfunc countdown(N: Int)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\nimport Foundation\n\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\n// your code here\n",
                "text": "```swift\nimport Foundation\n\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n",
            "text": "[spoiler title=\"Example\" collapse_link=\"true\"]  \nFunction call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "coutdown(3)\n",
                "text": "```swift\ncoutdown(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3  \n2  \n1  \nGO!  \n",
                "text": "```\n3  \n2  \n1  \nGO!  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ncoutdown(3)\n```\n\n",
              "Output": "```\n3  \n2  \n1  \nGO!  \n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n",
                "text": "```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n",
            "text": "[spoiler title='Using the sleep function' collapse_link='true']\n\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Using the sleep function",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n",
                "text": "```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc countdown(N: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc countdown(N: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func countdown(N: Int)\n",
                "text": "```swift\nfunc countdown(N: Int)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n",
            "text": "[spoiler title=\"Example\" collapse_link=\"true\"]  \nFunction call:\n```swift\ncoutdown(3)\n```\n\nOutput:\n```\n3  \n2  \n1  \nGO!  \n```\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "coutdown(3)\n",
                "text": "```swift\ncoutdown(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3  \n2  \n1  \nGO!  \n",
                "text": "```\n3  \n2  \n1  \nGO!  \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ncoutdown(3)\n```\n\n",
              "Output": "```\n3  \n2  \n1  \nGO!  \n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n",
                "text": "```swift\nimport Foundation\n\nfunc countdown(N: Int) {\n    var i = N\n    \n    while i > 0 {\n        print(i)\n        \n        if i > 1 {\n            sleep(1)\n        }\n        \n        i--\n    }\n    \n    print(\"GO!\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll use a `while` loop that counts down from `N` to 0. At each step we'll print the `number` making sure to also call the `sleep` function. After the loop we'll print \"GO!\"\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_4",
        "compileCode": true,
        "code": "import Foundation\n\n// your code here\n",
        "misc": [
          {
            "type": "spoiler",
            "content": "\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n",
            "text": "[spoiler title='Using the sleep function' collapse_link='true']\n\nIn order to use the `sleep` function you will need to import the Foundation framework.\n\n```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Using the sleep function",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "import Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n",
                "text": "```swift\nimport Foundation\n// now you can use the sleep function\n\nsleep(1) //will wait for one second before executing the next line\n```\n",
                "language": "swift"
              }
            ]
          }
        ]
      },
      {
        "type": "exercise",
        "content": "### 7.5 Prime Numbers\n\nImplement the following functions. The `divides` function returns `true` if `a` is divisible by `b` and `false` otherwise. The `countDivisors` function should use the `divides` function to return the number of divisors of `number`. The `isPrime` function should use the `countDivisors` function to determine if `number` is prime.\n\n[spoiler title='Divides Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n[/spoiler]\n\n[spoiler title='CountDivisors Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc countDivisors(number: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='IsPrime Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc isPrime(number: Int) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\nExamples:\n\n```swift\ndivides(3, 2) // false - 3 is not divisible by 2\ndivides(6, 3) // true - 6 is divisible by 3\n\ncountDivisors(2) // 2 - 1 and 2\ncountDivisors(6) // 4 - 1, 2, 3 and 6\ncountDivisors(12) // 6 - 1, 2, 3, 4, 6 and 12\n\nisPrime(2) // true\nisPrime(3) // true\nisPrime(10) // false\nisPrime(13) // true\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n\n[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThe `isPrime` function can be implemented in a single line using the `countDivisors` function.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n[/spoiler]\n\n",
        "text": "### 7.5 Prime Numbers\n\nImplement the following functions. The `divides` function returns `true` if `a` is divisible by `b` and `false` otherwise. The `countDivisors` function should use the `divides` function to return the number of divisors of `number`. The `isPrime` function should use the `countDivisors` function to determine if `number` is prime.\n\n[spoiler title='Divides Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n[/spoiler]\n\n[spoiler title='CountDivisors Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc countDivisors(number: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='IsPrime Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc isPrime(number: Int) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\nExamples:\n\n```swift\ndivides(3, 2) // false - 3 is not divisible by 2\ndivides(6, 3) // true - 6 is divisible by 3\n\ncountDivisors(2) // 2 - 1 and 2\ncountDivisors(6) // 4 - 1, 2, 3 and 6\ncountDivisors(12) // 6 - 1, 2, 3, 4, 6 and 12\n\nisPrime(2) // true\nisPrime(3) // true\nisPrime(10) // false\nisPrime(13) // true\n```\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n\n[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThe `isPrime` function can be implemented in a single line using the `countDivisors` function.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n[/spoiler]\n\n",
        "name": "Prime Numbers",
        "title": "7.5 Prime Numbers",
        "id": "5",
        "problemStatement": "### 7.5 Prime Numbers\n\nImplement the following functions. The `divides` function returns `true` if `a` is divisible by `b` and `false` otherwise. The `countDivisors` function should use the `divides` function to return the number of divisors of `number`. The `isPrime` function should use the `countDivisors` function to determine if `number` is prime.\n\n\n\n\n\nExamples:\n\n```swift\ndivides(3, 2) // false - 3 is not divisible by 2\ndivides(6, 3) // true - 6 is divisible by 3\n\ncountDivisors(2) // 2 - 1 and 2\ncountDivisors(6) // 4 - 1, 2, 3 and 6\ncountDivisors(12) // 6 - 1, 2, 3, 4, 6 and 12\n\nisPrime(2) // true\nisPrime(3) // true\nisPrime(10) // false\nisPrime(13) // true\n```\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n",
            "text": "[spoiler title='Divides Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Divides Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func divides(a: Int, _ b: Int) -> Bool\n",
                "text": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc countDivisors(number: Int) -> Int\n```\n",
            "text": "[spoiler title='CountDivisors Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc countDivisors(number: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "CountDivisors Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func countDivisors(number: Int) -> Int\n",
                "text": "```swift\nfunc countDivisors(number: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc isPrime(number: Int) -> Bool\n```\n",
            "text": "[spoiler title='IsPrime Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc isPrime(number: Int) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "IsPrime Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isPrime(number: Int) -> Bool\n",
                "text": "```swift\nfunc isPrime(number: Int) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(2)\n",
                "text": "```swift\nisPrime(2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(2)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(3)\n",
                "text": "```swift\nisPrime(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(3)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(10)\n",
                "text": "```swift\nisPrime(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(10)\n```\n\n",
              "Output": "```\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(13)\n",
                "text": "```swift\nisPrime(13)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(13)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "The `isPrime` function can be implemented in a single line using the `countDivisors` function.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThe `isPrime` function can be implemented in a single line using the `countDivisors` function.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n",
                "text": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "codes": [
          {
            "type": "code",
            "content": "divides(3, 2) // false - 3 is not divisible by 2\ndivides(6, 3) // true - 6 is divisible by 3\n\ncountDivisors(2) // 2 - 1 and 2\ncountDivisors(6) // 4 - 1, 2, 3 and 6\ncountDivisors(12) // 6 - 1, 2, 3, 4, 6 and 12\n\nisPrime(2) // true\nisPrime(3) // true\nisPrime(10) // false\nisPrime(13) // true\n",
            "text": "```swift\ndivides(3, 2) // false - 3 is not divisible by 2\ndivides(6, 3) // true - 6 is divisible by 3\n\ncountDivisors(2) // 2 - 1 and 2\ncountDivisors(6) // 4 - 1, 2, 3 and 6\ncountDivisors(12) // 6 - 1, 2, 3, 4, 6 and 12\n\nisPrime(2) // true\nisPrime(3) // true\nisPrime(10) // false\nisPrime(13) // true\n```\n",
            "language": "swift"
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n",
            "text": "[spoiler title='Divides Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Divides Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func divides(a: Int, _ b: Int) -> Bool\n",
                "text": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc countDivisors(number: Int) -> Int\n```\n",
            "text": "[spoiler title='CountDivisors Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc countDivisors(number: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "CountDivisors Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func countDivisors(number: Int) -> Int\n",
                "text": "```swift\nfunc countDivisors(number: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc isPrime(number: Int) -> Bool\n```\n",
            "text": "[spoiler title='IsPrime Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc isPrime(number: Int) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "IsPrime Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isPrime(number: Int) -> Bool\n",
                "text": "```swift\nfunc isPrime(number: Int) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(2)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(2)\n",
                "text": "```swift\nisPrime(2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(2)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(3)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(3)\n",
                "text": "```swift\nisPrime(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(3)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n",
            "text": "[spoiler title=\"Example 3\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(10)\n```\n\nOutput:\n```\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(10)\n",
                "text": "```swift\nisPrime(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(10)\n```\n\n",
              "Output": "```\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n",
            "text": "[spoiler title=\"Example 4\" collapse_link=\"true\"]  \nFunction call:\n```swift\nisPrime(13)\n```\n\nOutput:\n```\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "isPrime(13)\n",
                "text": "```swift\nisPrime(13)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nisPrime(13)\n```\n\n",
              "Output": "```\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "The `isPrime` function can be implemented in a single line using the `countDivisors` function.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThe `isPrime` function can be implemented in a single line using the `countDivisors` function.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n",
                "text": "```swift\nfunc divides(a: Int, _ b: Int) -> Bool {\n    return a % b == 0\n}\n\nfunc countDivisors(number: Int) -> Int {\n    var cnt = 0\n    for i in 1...number {\n        if divides(number, i) {\n            ++cnt\n        }\n    }\n    return cnt\n}\n\nfunc isPrime(number: Int) -> Bool {\n    return countDivisors(number) == 2\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe `divides` function returns true if `a % b == 0` and false otherwise, this is equivalent to returning the value of the condition `a % b == 0`\n\nThe `countDivisors` function keeps track of the number of encountered divisors in a `cnt` variable. We loop from `1` to `number` and at each step increment `cnt` if `divides(n,i)` returns true.\n\nThe `isPrime` function simply returns `true` when the `number` of divisors of the number is equal to `2` using a call to the `countDivisors` function.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_5",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.6 First Primes\n\nUsing `isPrime` write a function named `printFirstPrimes` that takes a parameter named `count` of type `Int` that prints the first `count` prime numbers.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc printFirstPrimes(count: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `isPrime` function from the previous exercise.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true' compile='false']\n```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n[/spoiler]\n\n",
        "text": "### 7.6 First Primes\n\nUsing `isPrime` write a function named `printFirstPrimes` that takes a parameter named `count` of type `Int` that prints the first `count` prime numbers.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc printFirstPrimes(count: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `isPrime` function from the previous exercise.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true' compile='false']\n```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n[/spoiler]\n\n",
        "name": "First Primes",
        "title": "7.6 First Primes",
        "id": "6",
        "problemStatement": "### 7.6 First Primes\n\nUsing `isPrime` write a function named `printFirstPrimes` that takes a parameter named `count` of type `Int` that prints the first `count` prime numbers.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc printFirstPrimes(count: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc printFirstPrimes(count: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func printFirstPrimes(count: Int)\n",
                "text": "```swift\nfunc printFirstPrimes(count: Int)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "printFirstPrimes(3)\n",
                "text": "```swift\nprintFirstPrimes(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n5\n",
                "text": "```\n2\n3\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nprintFirstPrimes(3)\n```\n\n",
              "Output": "```\n2\n3\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "printFirstPrimes(10)\n",
                "text": "```swift\nprintFirstPrimes(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n",
                "text": "```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nprintFirstPrimes(10)\n```\n\n",
              "Output": "```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use the `isPrime` function from the previous exercise.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `isPrime` function from the previous exercise.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true' compile='false']\n```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n",
                "text": "```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": false,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc printFirstPrimes(count: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc printFirstPrimes(count: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func printFirstPrimes(count: Int)\n",
                "text": "```swift\nfunc printFirstPrimes(count: Int)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(3)\n```\n\nOutput:\n```\n2\n3\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "printFirstPrimes(3)\n",
                "text": "```swift\nprintFirstPrimes(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n5\n",
                "text": "```\n2\n3\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nprintFirstPrimes(3)\n```\n\n",
              "Output": "```\n2\n3\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nprintFirstPrimes(10)\n```\n\nOutput:\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "printFirstPrimes(10)\n",
                "text": "```swift\nprintFirstPrimes(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n",
                "text": "```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nprintFirstPrimes(10)\n```\n\n",
              "Output": "```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use the `isPrime` function from the previous exercise.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse the `isPrime` function from the previous exercise.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true' compile='false']\n```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n",
                "text": "```swift\nfunc printFirstPrimes(count: Int) {\n    var i = 2\n    var printed = 0\n    while printed < count {\n        if isPrime(i) {\n            print(i)\n            ++printed\n        }\n        ++i\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll make use of the `isPrime` function from the previous exercise. We'll keep track of how many numbers we already printed in the `printed` variable. We'll also use a variable `i` to keep track of the number we're currently testing. We'll execute a `while` loop until `printed` becomes equal to `count`. At each step we'll check if `i` is prime, we'll print it and increment `printed` if that's the case, otherwise we just increment `i`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_6",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.7 Repeat Print\n\nImplement a function named `repeatPrint` that takes a string `message` and a integer `count` as parameters. The function should print the `message` `count` times and then print a newline.\n\n[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nDon't forget about the newline at the end.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n[/spoiler]\n\n",
        "text": "### 7.7 Repeat Print\n\nImplement a function named `repeatPrint` that takes a string `message` and a integer `count` as parameters. The function should print the `message` `count` times and then print a newline.\n\n[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nDon't forget about the newline at the end.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n[/spoiler]\n\n",
        "name": "Repeat Print",
        "title": "7.7 Repeat Print",
        "id": "7",
        "problemStatement": "### 7.7 Repeat Print\n\nImplement a function named `repeatPrint` that takes a string `message` and a integer `count` as parameters. The function should print the `message` `count` times and then print a newline.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func repeatPrint(message: String, _ count: Int)\n",
                "text": "```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "repeatPrint(\"+\", 10)\n",
                "text": "```swift\nrepeatPrint(\"+\", 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "++++++++++\n",
                "text": "```\n++++++++++\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nrepeatPrint(\"+\", 10)\n```\n\n",
              "Output": "```\n++++++++++\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "repeatPrint(\"<->\", 3)\n",
                "text": "```swift\nrepeatPrint(\"<->\", 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "<-><-><->\n",
                "text": "```\n<-><-><->\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nrepeatPrint(\"<->\", 3)\n```\n\n",
              "Output": "```\n<-><-><->\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Don't forget about the newline at the end.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nDon't forget about the newline at the end.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func repeatPrint(message: String, _ count: Int)\n",
                "text": "```swift\nfunc repeatPrint(message: String, _ count: Int)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"+\", 10)\n```\n\nOutput:\n```\n++++++++++\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "repeatPrint(\"+\", 10)\n",
                "text": "```swift\nrepeatPrint(\"+\", 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "++++++++++\n",
                "text": "```\n++++++++++\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nrepeatPrint(\"+\", 10)\n```\n\n",
              "Output": "```\n++++++++++\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nrepeatPrint(\"<->\", 3)\n```\n\nOutput:\n```\n<-><-><->\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "repeatPrint(\"<->\", 3)\n",
                "text": "```swift\nrepeatPrint(\"<->\", 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "<-><-><->\n",
                "text": "```\n<-><-><->\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nrepeatPrint(\"<->\", 3)\n```\n\n",
              "Output": "```\n<-><-><->\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Don't forget about the newline at the end.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nDon't forget about the newline at the end.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n",
                "text": "```swift\nfunc repeatPrint(message: String, _ count: Int) {\n    for i in 1...count {\n        print(message, terminator: \"\")\n    }\n    print(\"\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe have to print the `message` `count` times using a `for` loop. After we're done printing we run a final `print()` statement.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_7",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.8 Reverse\n\nWrite a function named `reverse` that takes an array of integers named `numbers` as a parameter. The function should return an array with the numbers from `numbers` in reverse order.\n\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n[/spoiler]\n\n",
        "text": "### 7.8 Reverse\n\nWrite a function named `reverse` that takes an array of integers named `numbers` as a parameter. The function should return an array with the numbers from `numbers` in reverse order.\n\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n[/spoiler]\n\n",
        "name": "Reverse",
        "title": "7.8 Reverse",
        "id": "8",
        "problemStatement": "### 7.8 Reverse\n\nWrite a function named `reverse` that takes an array of integers named `numbers` as a parameter. The function should return an array with the numbers from `numbers` in reverse order.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func reverse(numbers: [Int]) -> [Int]\n",
                "text": "```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "reverse([1, 2, 3])\n",
                "text": "```swift\nreverse([1, 2, 3])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[3, 2, 1]\n",
                "text": "```\n[3, 2, 1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nreverse([1, 2, 3])\n```\n\n",
              "Output": "```\n[3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "reverse([1, 2, 1, 2, 1, 2])\n",
                "text": "```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[2, 1, 2, 1, 2, 1]\n",
                "text": "```\n[2, 1, 2, 1, 2, 1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\n",
              "Output": "```\n[2, 1, 2, 1, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n",
                "text": "```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func reverse(numbers: [Int]) -> [Int]\n",
                "text": "```swift\nfunc reverse(numbers: [Int]) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 3])\n```\n\nOutput:\n```\n[3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "reverse([1, 2, 3])\n",
                "text": "```swift\nreverse([1, 2, 3])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[3, 2, 1]\n",
                "text": "```\n[3, 2, 1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nreverse([1, 2, 3])\n```\n\n",
              "Output": "```\n[3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\nOutput:\n```\n[2, 1, 2, 1, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "reverse([1, 2, 1, 2, 1, 2])\n",
                "text": "```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[2, 1, 2, 1, 2, 1]\n",
                "text": "```\n[2, 1, 2, 1, 2, 1]\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nreverse([1, 2, 1, 2, 1, 2])\n```\n\n",
              "Output": "```\n[2, 1, 2, 1, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n",
                "text": "```swift\nfunc reverse(numbers: [Int]) -> [Int] {\n    var reversed: [Int] = []\n    \n    for number in numbers {\n        reversed.insert(number, atIndex: 0)\n    }\n    \n    return reversed\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution to this problem is very similar to the solution from `Problem 6.14` the difference is that we implement it as a function.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_8",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.9 Sum\n\nWrite a function named `sum` that takes an array of integers and returns their sum.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc sum(numbers: [Int]) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n[/spoiler]\n\n",
        "text": "### 7.9 Sum\n\nWrite a function named `sum` that takes an array of integers and returns their sum.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc sum(numbers: [Int]) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n[/spoiler]\n\n",
        "name": "Sum",
        "title": "7.9 Sum",
        "id": "9",
        "problemStatement": "### 7.9 Sum\n\nWrite a function named `sum` that takes an array of integers and returns their sum.\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc sum(numbers: [Int]) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc sum(numbers: [Int]) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func sum(numbers: [Int]) -> Int\n",
                "text": "```swift\nfunc sum(numbers: [Int]) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum([1, 2, 3])\n",
                "text": "```swift\nsum([1, 2, 3])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nsum([1, 2, 3])\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum([1, 1, 1, 1, 1])\n",
                "text": "```swift\nsum([1, 1, 1, 1, 1])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nsum([1, 1, 1, 1, 1])\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n",
                "text": "```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc sum(numbers: [Int]) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc sum(numbers: [Int]) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func sum(numbers: [Int]) -> Int\n",
                "text": "```swift\nfunc sum(numbers: [Int]) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 2, 3])\n```\n\nOutput:\n```\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum([1, 2, 3])\n",
                "text": "```swift\nsum([1, 2, 3])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```\n6\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nsum([1, 2, 3])\n```\n\n",
              "Output": "```\n6\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\nsum([1, 1, 1, 1, 1])\n```\n\nOutput:\n```\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "sum([1, 1, 1, 1, 1])\n",
                "text": "```swift\nsum([1, 1, 1, 1, 1])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nsum([1, 1, 1, 1, 1])\n```\n\n",
              "Output": "```\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n",
                "text": "```swift\nfunc sum(numbers: [Int]) -> Int {\n    var sum = 0\n\n    for number in numbers {\n        sum += number\n    }\n    \n    return sum\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll keep track of the current sum in `sum` variable initialized to 0. We iterate through our array adding each `number` to our `sum`. Finally we return the `sum`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_9",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.10 Parse number\n\nWrite a function named `parseDigit` that takes a string with one character as parameter. The function should return `-1` if the input is not a digit character and the digit otherwise.\n\n```swift\nparseDigit(\"1\") // 1\nparseDigit(\"3\") // 3\nparseDigit(\"a\") // -1\n```\n\n[spoiler title=\"Code\"]\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='parseDigit Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc parseDigit(digit: String) -> Int\n```\n[/spoiler]\n\n\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse a string of digits `let digits = \"0123456789\"`.\n[/spoiler]\n\n[spoiler title='Solution: parseDigit' collapse_link='true']\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n[/spoiler]\n\n\nUsing the `parseDigit` function you can determine if a string of length one is a digit or not. Implement a function named `isNumber` that takes an arbitrary length string and return `true` if the string contains only digits and `false` otherwise. Note that empty strings should not be considered numbers.\n\n```swift\nisNumber(\"a\") // false\nisNumber(\"1\") // true\nisNumber(\"1234567890\") // true\nisNumber(\"12345abc\") // false\nisNumber(\"\") // false\n```\n\n[spoiler title='isNumber Function Definition' collapse_link='true']\n```swift\nfunc isNumber(string: String) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Solution: isNumber' collapse_link='true']\n\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n[/spoiler]\n\n\nUsing the `isNumber` and `parseDigit` functions, write a function named `parseNumber` that takes a string and returns it's values as an integer or `-1` if the string does not contain only digits.\n\n```swift\nparseNumber(\"1\") // 1\nparseNumber(\"54321\") // 54321\nparseNumber(\"1337\") // 1337\nparseNumber(\"12cd\") // -1\n```\n\n[spoiler title='parseNumber Function Definition' collapse_link='true']\n```swift\nfunc parseNumber(number: String) -> Int\n```\n[/spoiler]\n\n[spoiler title='Solution: parseNumber' collapse_link='true']\n\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n\n[/spoiler]\n\n",
        "text": "### 7.10 Parse number\n\nWrite a function named `parseDigit` that takes a string with one character as parameter. The function should return `-1` if the input is not a digit character and the digit otherwise.\n\n```swift\nparseDigit(\"1\") // 1\nparseDigit(\"3\") // 3\nparseDigit(\"a\") // -1\n```\n\n[spoiler title=\"Code\"]\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='parseDigit Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc parseDigit(digit: String) -> Int\n```\n[/spoiler]\n\n\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse a string of digits `let digits = \"0123456789\"`.\n[/spoiler]\n\n[spoiler title='Solution: parseDigit' collapse_link='true']\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n[/spoiler]\n\n\nUsing the `parseDigit` function you can determine if a string of length one is a digit or not. Implement a function named `isNumber` that takes an arbitrary length string and return `true` if the string contains only digits and `false` otherwise. Note that empty strings should not be considered numbers.\n\n```swift\nisNumber(\"a\") // false\nisNumber(\"1\") // true\nisNumber(\"1234567890\") // true\nisNumber(\"12345abc\") // false\nisNumber(\"\") // false\n```\n\n[spoiler title='isNumber Function Definition' collapse_link='true']\n```swift\nfunc isNumber(string: String) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Solution: isNumber' collapse_link='true']\n\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n[/spoiler]\n\n\nUsing the `isNumber` and `parseDigit` functions, write a function named `parseNumber` that takes a string and returns it's values as an integer or `-1` if the string does not contain only digits.\n\n```swift\nparseNumber(\"1\") // 1\nparseNumber(\"54321\") // 54321\nparseNumber(\"1337\") // 1337\nparseNumber(\"12cd\") // -1\n```\n\n[spoiler title='parseNumber Function Definition' collapse_link='true']\n```swift\nfunc parseNumber(number: String) -> Int\n```\n[/spoiler]\n\n[spoiler title='Solution: parseNumber' collapse_link='true']\n\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n\n[/spoiler]\n\n",
        "name": "Parse number",
        "title": "7.10 Parse number",
        "id": "10",
        "problemStatement": "### 7.10 Parse number\n\nWrite a function named `parseDigit` that takes a string with one character as parameter. The function should return `-1` if the input is not a digit character and the digit otherwise.\n\n```swift\nparseDigit(\"1\") // 1\nparseDigit(\"3\") // 3\nparseDigit(\"a\") // -1\n```\n\n\n\n\n\n\n\n\n\nUsing the `parseDigit` function you can determine if a string of length one is a digit or not. Implement a function named `isNumber` that takes an arbitrary length string and return `true` if the string contains only digits and `false` otherwise. Note that empty strings should not be considered numbers.\n\n```swift\nisNumber(\"a\") // false\nisNumber(\"1\") // true\nisNumber(\"1234567890\") // true\nisNumber(\"12345abc\") // false\nisNumber(\"\") // false\n```\n\n\n\n\n\nUsing the `isNumber` and `parseDigit` functions, write a function named `parseNumber` that takes a string and returns it's values as an integer or `-1` if the string does not contain only digits.\n\n```swift\nparseNumber(\"1\") // 1\nparseNumber(\"54321\") // 54321\nparseNumber(\"1337\") // 1337\nparseNumber(\"12cd\") // -1\n```\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "parseDigit(\"1\") // 1\nparseDigit(\"3\") // 3\nparseDigit(\"a\") // -1\n",
            "text": "```swift\nparseDigit(\"1\") // 1\nparseDigit(\"3\") // 3\nparseDigit(\"a\") // -1\n```\n",
            "language": "swift"
          },
          {
            "type": "code",
            "content": "isNumber(\"a\") // false\nisNumber(\"1\") // true\nisNumber(\"1234567890\") // true\nisNumber(\"12345abc\") // false\nisNumber(\"\") // false\n",
            "text": "```swift\nisNumber(\"a\") // false\nisNumber(\"1\") // true\nisNumber(\"1234567890\") // true\nisNumber(\"12345abc\") // false\nisNumber(\"\") // false\n```\n",
            "language": "swift"
          },
          {
            "type": "code",
            "content": "parseNumber(\"1\") // 1\nparseNumber(\"54321\") // 54321\nparseNumber(\"1337\") // 1337\nparseNumber(\"12cd\") // -1\n",
            "text": "```swift\nparseNumber(\"1\") // 1\nparseNumber(\"54321\") // 54321\nparseNumber(\"1337\") // 1337\nparseNumber(\"12cd\") // -1\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title=\"Code\"]\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc parseDigit(digit: String) -> Int\n```\n",
            "text": "[spoiler title='parseDigit Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc parseDigit(digit: String) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "parseDigit Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseDigit(digit: String) -> Int\n",
                "text": "```swift\nfunc parseDigit(digit: String) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a string of digits `let digits = \"0123456789\"`.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse a string of digits `let digits = \"0123456789\"`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "First we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n",
            "text": "[spoiler title='Solution: parseDigit' collapse_link='true']\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: parseDigit",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n",
                "text": "```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc isNumber(string: String) -> Bool\n```\n",
            "text": "[spoiler title='isNumber Function Definition' collapse_link='true']\n```swift\nfunc isNumber(string: String) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "isNumber Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isNumber(string: String) -> Bool\n",
                "text": "```swift\nfunc isNumber(string: String) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n",
            "text": "[spoiler title='Solution: isNumber' collapse_link='true']\n\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: isNumber",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n",
                "text": "```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc parseNumber(number: String) -> Int\n```\n",
            "text": "[spoiler title='parseNumber Function Definition' collapse_link='true']\n```swift\nfunc parseNumber(number: String) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "parseNumber Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseNumber(number: String) -> Int\n",
                "text": "```swift\nfunc parseNumber(number: String) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution: parseNumber' collapse_link='true']\n\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: parseNumber",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n\n",
            "text": "[spoiler title='Explanation']\n\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc parseDigit(digit: String) -> Int\n```\n",
            "text": "[spoiler title='parseDigit Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc parseDigit(digit: String) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "parseDigit Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseDigit(digit: String) -> Int\n",
                "text": "```swift\nfunc parseDigit(digit: String) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc isNumber(string: String) -> Bool\n```\n",
            "text": "[spoiler title='isNumber Function Definition' collapse_link='true']\n```swift\nfunc isNumber(string: String) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "isNumber Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isNumber(string: String) -> Bool\n",
                "text": "```swift\nfunc isNumber(string: String) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc parseNumber(number: String) -> Int\n```\n",
            "text": "[spoiler title='parseNumber Function Definition' collapse_link='true']\n```swift\nfunc parseNumber(number: String) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "parseNumber Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseNumber(number: String) -> Int\n",
                "text": "```swift\nfunc parseNumber(number: String) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a string of digits `let digits = \"0123456789\"`.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nUse a string of digits `let digits = \"0123456789\"`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "First we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n",
            "text": "[spoiler title='Solution: parseDigit' collapse_link='true']\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: parseDigit",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n",
                "text": "```swift\nfunc parseDigit(digit: String) -> Int {\n    let digits = \"0123456789\"\n    \n    var result = 0\n    \n    for character in digits.characters {\n        var d = \"\\(character)\"\n        \n        if d == digit {\n            return result\n        }\n        \n        result += 1\n    }\n    \n    return -1\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n",
            "text": "[spoiler title='Solution: isNumber' collapse_link='true']\n\nIf the string we're given is empty we return `false` otherwise we iterate through all the characters in our string, if any of these characters returns `-1` from our `parseDigit` function we return `false`. If none of them return `-1` from parseDigit it means that all characters in our string are digits and we return `true`\n\n```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: isNumber",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n",
                "text": "```swift\nfunc isNumber(string: String) -> Bool {\n    if countElements(string) == 0 {\n        return false\n    }\n\n    for character in string.character {\n        if parseDigit(\"\\(character)\") == -1 {\n            return false\n        }\n    }\n    return true\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution: parseNumber' collapse_link='true']\n\nFirst we check if the given string is a number, if it is not we return `-1`. Next we initialize our result to `0`. For each character in the given string we multiply the result by 10, shifting all digits with 1 position to the left and we add the result of `parseDigit` for the current digit.\n\n```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution: parseNumber",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc parseNumber(number: String) -> Int {\n    if isNumber(number) != true {\n        return -1\n    }\n    \n    var result = 0\n    for character in number.characters {\n        var digit = \"\\(character)\"\n        \n        result = result * 10 + parseDigit(digit)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n\n",
            "text": "[spoiler title='Explanation']\n\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_10",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.11 Time Difference\n\nWrite a function named `timeDifference`. It takes as input four numbers that represent two times in a day and returns the difference in minutes between them. The first two parameters `firstHour` and `firstMinute` represent the hour and minute of the first time. The last two `secondHour` and `secondMinute` represent the hour and minute of the second time. All parameters should have external parameter names with the same name as the local ones.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to handle the case when the difference between minutes is less than `0`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n[/spoiler]\n\n",
        "text": "### 7.11 Time Difference\n\nWrite a function named `timeDifference`. It takes as input four numbers that represent two times in a day and returns the difference in minutes between them. The first two parameters `firstHour` and `firstMinute` represent the hour and minute of the first time. The last two `secondHour` and `secondMinute` represent the hour and minute of the second time. All parameters should have external parameter names with the same name as the local ones.\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n\n[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to handle the case when the difference between minutes is less than `0`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n[/spoiler]\n\n",
        "name": "Time Difference",
        "title": "7.11 Time Difference",
        "id": "11",
        "problemStatement": "### 7.11 Time Difference\n\nWrite a function named `timeDifference`. It takes as input four numbers that represent two times in a day and returns the difference in minutes between them. The first two parameters `firstHour` and `firstMinute` represent the hour and minute of the first time. The last two `secondHour` and `secondMinute` represent the hour and minute of the second time. All parameters should have external parameter names with the same name as the local ones.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n",
                "text": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "timeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n",
                "text": "```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "67\n",
                "text": "```\n67\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\n",
              "Output": "```\n67\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "timeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n",
                "text": "```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "560\n",
                "text": "```\n560\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\n",
              "Output": "```\n560\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to handle the case when the difference between minutes is less than `0`.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to handle the case when the difference between minutes is less than `0`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n",
                "text": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n",
                "text": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int,\n                    secondHour: Int,\n                    secondMinute: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n",
            "text": "[spoiler title=\"Example 1\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\nOutput:\n```\n67\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "timeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n",
                "text": "```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "67\n",
                "text": "```\n67\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ntimeDifference(firstHour: 12, firstMinute: 3, secondHour: 13, secondMinute: 10) \n```\n\n",
              "Output": "```\n67\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n",
            "text": "[spoiler title=\"Example 2\" collapse_link=\"true\"]  \nFunction call:\n```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\nOutput:\n```\n560\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "timeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n",
                "text": "```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "560\n",
                "text": "```\n560\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\ntimeDifference(firstHour: 8, firstMinute: 10, secondHour: 17, secondMinute: 30)\n```\n\n",
              "Output": "```\n560\n```\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to handle the case when the difference between minutes is less than `0`.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to handle the case when the difference between minutes is less than `0`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n",
                "text": "```swift\nfunc timeDifference(firstHour firstHour: Int, \n                    firstMinute: Int, \n                    secondHour: Int, \n                    secondMinute: Int) -> Int {\n    var hourDifference = secondHour - firstHour\n    var minuteDifference = secondMinute - firstMinute\n    \n    if minuteDifference < 0 {\n        hourDifference -= 1\n        minuteDifference += 60\n    }\n    \n    return hourDifference * 60 + minuteDifference\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n",
            "text": "[spoiler title='Explanation']\n\nTo compute the time difference we have to determine the hour difference and the minute difference between them. \nIf they are in the same hour the minute difference will be negative - in that case we have to add 60 minutes to the time difference and take an hour from the hour one. \nThe final timeDifference in minutes will be `hourDifference * 60 + minuteDifference`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_11",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.12 Correct Pairs\n\nWrite a function named `verifyParentheses` that takes a string `expression` of open and closed parentheses (`(`, `)`) and returns `true` if they are correctly paired and `false` otherwise.  \n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title='Example 6' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title=\"Hint 1\" collapse_link=\"true\"]  \nKeep track of how many open parentheses you've encountered and how many closed parentheses.\n[/spoiler]\n\n[spoiler title=\"Hint 2\" collapse_link=\"true\"]  \nIn a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n[/spoiler]\n\n\n",
        "text": "### 7.12 Correct Pairs\n\nWrite a function named `verifyParentheses` that takes a string `expression` of open and closed parentheses (`(`, `)`) and returns `true` if they are correctly paired and `false` otherwise.  \n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n\n[spoiler title='Example 5' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title='Example 6' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n\n[spoiler title=\"Hint 1\" collapse_link=\"true\"]  \nKeep track of how many open parentheses you've encountered and how many closed parentheses.\n[/spoiler]\n\n[spoiler title=\"Hint 2\" collapse_link=\"true\"]  \nIn a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n[/spoiler]\n\n\n",
        "name": "Correct Pairs",
        "title": "7.12 Correct Pairs",
        "id": "12",
        "problemStatement": "### 7.12 Correct Pairs\n\nWrite a function named `verifyParentheses` that takes a string `expression` of open and closed parentheses (`(`, `)`) and returns `true` if they are correctly paired and `false` otherwise.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func verifyParentheses(expression: String) -> Bool\n",
                "text": "```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"()\")\n",
                "text": "```swift\nverifyParentheses(\"()\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"()\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"((\")\n",
                "text": "```swift\nverifyParentheses(\"((\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"((\")\n```\n\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"(())\")\n",
                "text": "```swift\nverifyParentheses(\"(())\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"(())\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"()()\")\n",
                "text": "```swift\nverifyParentheses(\"()()\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"()()\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 5' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"(()))\")\n",
                "text": "```swift\nverifyParentheses(\"(()))\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"(()))\")\n```\n\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 6' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 6",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\")(\")\n\n",
                "text": "```swift\nverifyParentheses(\")(\")\n\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\")(\")\n\n```\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep track of how many open parentheses you've encountered and how many closed parentheses.\n",
            "text": "[spoiler title=\"Hint 1\" collapse_link=\"true\"]  \nKeep track of how many open parentheses you've encountered and how many closed parentheses.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "In a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n",
            "text": "[spoiler title=\"Hint 2\" collapse_link=\"true\"]  \nIn a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n",
                "text": "```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func verifyParentheses(expression: String) -> Bool\n",
                "text": "```swift\nfunc verifyParentheses(expression: String) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"()\")\n",
                "text": "```swift\nverifyParentheses(\"()\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"()\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"((\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"((\")\n",
                "text": "```swift\nverifyParentheses(\"((\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"((\")\n```\n\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(())\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"(())\")\n",
                "text": "```swift\nverifyParentheses(\"(())\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"(())\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"()()\")\n```\n\nOutput:\n```\ntrue\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"()()\")\n",
                "text": "```swift\nverifyParentheses(\"()()\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```\ntrue\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"()()\")\n```\n\n",
              "Output": "```\ntrue\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 5' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\"(()))\")\n```\n\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 5",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\"(()))\")\n",
                "text": "```swift\nverifyParentheses(\"(()))\")\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\"(()))\")\n```\n\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n",
            "text": "[spoiler title='Example 6' collapse_link='true']\n\nFunction call:\n```swift\nverifyParentheses(\")(\")\n\n```\nOutput:\n```\nfalse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 6",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "verifyParentheses(\")(\")\n\n",
                "text": "```swift\nverifyParentheses(\")(\")\n\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```\nfalse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\nverifyParentheses(\")(\")\n\n```\n",
              "Output": "```\nfalse\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep track of how many open parentheses you've encountered and how many closed parentheses.\n",
            "text": "[spoiler title=\"Hint 1\" collapse_link=\"true\"]  \nKeep track of how many open parentheses you've encountered and how many closed parentheses.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "In a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n",
            "text": "[spoiler title=\"Hint 2\" collapse_link=\"true\"]  \nIn a correct pairing the number of closed parentheses you encounter can never be greater than the number of open parentheses.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n",
                "text": "```swift\nfunc verifyParentheses(expression: String) -> Bool {\n    var open = 0\n    var closed = 0\n    for char in expression.characters {\n        var character = \"\\(char)\"\n        if character == \"(\" {\n            ++open\n        } else {\n            ++closed\n            if closed > open {\n                return false\n            }\n        }\n    }\n    return open == closed\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to use two counters - `open` and `closed` - that count the number of open and closed parentheses so far. The expression will be valid if at any point the number of open parentheses is greater than or equal to the number of closed ones and in the end the number of closed parentheses is equal to the number of open ones.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_12",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.13 Mario\n\nMario uses energy points to walk and jump. He can jump maximum `maxJump` meters up or down. You have the height of each 1 meter portion of a level in the `heights` array. Determine if Mario can finish the level and how much energy he needs to do it. Mario uses 1 energy point to walk one meter and `2 * jumpHeight` energy points to `jumpHeight` meters. Write a function named `levelCost` that takes `heights` and `maxJump` as parameters and returns `-1` if Mario cannot finish the level or the total energy cost that he would need to finish the level.\n\nIn the beginning Mario will be on the first 1 meter section of the level and the `heights` array will always have more than one element. All heights have a value greater or equal to 1.\n\n```swift\nlevelCost(heights: [1, 1, 2, 2, 5, 2, 1, 1], maxJump: 3) // 19\n// 1 point to walk\n// 2 to jump from 1 to 2\n// 1 point to walk\n// 6 to jump from 2 to 5\n// 6 to jump from 5 to 2\n// 2 to jump from 2 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 3, 1, 1], maxJump: 2) // 10\n// 1 point to walk\n// 4 to jump from 1 to 3\n// 4 to jump from 3 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 8, 1], maxJump: 5) // -1\n// Mario cannot jump from 1 to 8\n```\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThink about how you can compute the energy required for a single step.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n[/spoiler]\n\n\n",
        "text": "### 7.13 Mario\n\nMario uses energy points to walk and jump. He can jump maximum `maxJump` meters up or down. You have the height of each 1 meter portion of a level in the `heights` array. Determine if Mario can finish the level and how much energy he needs to do it. Mario uses 1 energy point to walk one meter and `2 * jumpHeight` energy points to `jumpHeight` meters. Write a function named `levelCost` that takes `heights` and `maxJump` as parameters and returns `-1` if Mario cannot finish the level or the total energy cost that he would need to finish the level.\n\nIn the beginning Mario will be on the first 1 meter section of the level and the `heights` array will always have more than one element. All heights have a value greater or equal to 1.\n\n```swift\nlevelCost(heights: [1, 1, 2, 2, 5, 2, 1, 1], maxJump: 3) // 19\n// 1 point to walk\n// 2 to jump from 1 to 2\n// 1 point to walk\n// 6 to jump from 2 to 5\n// 6 to jump from 5 to 2\n// 2 to jump from 2 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 3, 1, 1], maxJump: 2) // 10\n// 1 point to walk\n// 4 to jump from 1 to 3\n// 4 to jump from 3 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 8, 1], maxJump: 5) // -1\n// Mario cannot jump from 1 to 8\n```\n\n[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThink about how you can compute the energy required for a single step.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n[/spoiler]\n\n\n",
        "name": "Mario",
        "title": "7.13 Mario",
        "id": "13",
        "problemStatement": "### 7.13 Mario\n\nMario uses energy points to walk and jump. He can jump maximum `maxJump` meters up or down. You have the height of each 1 meter portion of a level in the `heights` array. Determine if Mario can finish the level and how much energy he needs to do it. Mario uses 1 energy point to walk one meter and `2 * jumpHeight` energy points to `jumpHeight` meters. Write a function named `levelCost` that takes `heights` and `maxJump` as parameters and returns `-1` if Mario cannot finish the level or the total energy cost that he would need to finish the level.\n\nIn the beginning Mario will be on the first 1 meter section of the level and the `heights` array will always have more than one element. All heights have a value greater or equal to 1.\n\n```swift\nlevelCost(heights: [1, 1, 2, 2, 5, 2, 1, 1], maxJump: 3) // 19\n// 1 point to walk\n// 2 to jump from 1 to 2\n// 1 point to walk\n// 6 to jump from 2 to 5\n// 6 to jump from 5 to 2\n// 2 to jump from 2 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 3, 1, 1], maxJump: 2) // 10\n// 1 point to walk\n// 4 to jump from 1 to 3\n// 4 to jump from 3 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 8, 1], maxJump: 5) // -1\n// Mario cannot jump from 1 to 8\n```\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "levelCost(heights: [1, 1, 2, 2, 5, 2, 1, 1], maxJump: 3) // 19\n// 1 point to walk\n// 2 to jump from 1 to 2\n// 1 point to walk\n// 6 to jump from 2 to 5\n// 6 to jump from 5 to 2\n// 2 to jump from 2 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 3, 1, 1], maxJump: 2) // 10\n// 1 point to walk\n// 4 to jump from 1 to 3\n// 4 to jump from 3 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 8, 1], maxJump: 5) // -1\n// Mario cannot jump from 1 to 8\n",
            "text": "```swift\nlevelCost(heights: [1, 1, 2, 2, 5, 2, 1, 1], maxJump: 3) // 19\n// 1 point to walk\n// 2 to jump from 1 to 2\n// 1 point to walk\n// 6 to jump from 2 to 5\n// 6 to jump from 5 to 2\n// 2 to jump from 2 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 3, 1, 1], maxJump: 2) // 10\n// 1 point to walk\n// 4 to jump from 1 to 3\n// 4 to jump from 3 to 1\n// 1 point to walk\n\nlevelCost(heights: [1, 1, 8, 1], maxJump: 5) // -1\n// Mario cannot jump from 1 to 8\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func levelCost(#heights: [Int], maxJump: Int) -> Int\n",
                "text": "```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Think about how you can compute the energy required for a single step.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThink about how you can compute the energy required for a single step.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n",
                "text": "```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile=\"false\"]\n```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func levelCost(#heights: [Int], maxJump: Int) -> Int\n",
                "text": "```swift\nfunc levelCost(#heights: [Int], maxJump: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Think about how you can compute the energy required for a single step.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nThink about how you can compute the energy required for a single step.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n",
                "text": "```swift\nfunc levelCost(heights heights: [Int], maxJump: Int) -> Int {\n    var totalEnergy = 0\n    var lastHeight = 0\n    \n    for height in heights {\n        if lastHeight == 0 {\n            lastHeight = height\n        } else {\n            var jumpHeight = lastHeight - height\n            if jumpHeight < 0 {\n                jumpHeight = -jumpHeight\n            }\n            \n            if jumpHeight > maxJump {\n                return -1\n            }\n            \n            if jumpHeight == 0 {\n                totalEnergy += 1\n            } else {\n                totalEnergy += 2 * jumpHeight\n            }\n\n            lastHeight = height\n        }\n    }\n    \n    return totalEnergy\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to go ever each portion of the level remembering the height of the previous one in `lastHeight`. This will help us determine the height difference at each step. Then we can determine if this is a jump (difference > 0) or just a step (difference = 0).\nIf Mario has to jump we have to check if he can jump as high/low - otherwise he cannot complete the level.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_13",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.14 Queue\n\nA queue is a data structure that can perform two operations:\n\n- **push** which takes a value and adds it at the end of the queue\n- **pop** which returns the value from the start of the queue and removes it from the queue\n\nYour task is to implement the `push` and `pop` operations.\nThe most simple way to represent a queue is using an array. Here are some example operations.\n\n```swift\n// here we define an empty queue\nvar queue: [Int] = []\n\n// add 1 in the queue\npush(1, &queue) // queue = [1]\n\n// add 2 in the queue\npush(2, &queue) // queue = [1, 2]\n\n// pop the first element\npop(&queue) // 1, queue = [2, 3]\n\n// add 3 in the queue\npush(3, &queue) // queue = [2, 3]\n\n// pop the first element\npop(&queue) // 2, queue = [3]\n\n// pop the first element\npop(&queue) // 3, queue = []\n\n// pop the first element \npop(&queue) // returns nil because there are no elements in the queue\n// queue = []\n```\n\nThe `push` function should take two parameters, the `number` and the `queue` as an inout parameter.\n\n[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n[/spoiler]\n\n\nThe `pop` function should take `queue` as an inout parameter and return the first number from the queue after removing it. If the queue is empty it should return nil - the result type should be an optional integer(`Int?`).\n\n[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nFor the `pop` function you'll have to retrieve the first element in the queue.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n[/spoiler]\n\n",
        "text": "### 7.14 Queue\n\nA queue is a data structure that can perform two operations:\n\n- **push** which takes a value and adds it at the end of the queue\n- **pop** which returns the value from the start of the queue and removes it from the queue\n\nYour task is to implement the `push` and `pop` operations.\nThe most simple way to represent a queue is using an array. Here are some example operations.\n\n```swift\n// here we define an empty queue\nvar queue: [Int] = []\n\n// add 1 in the queue\npush(1, &queue) // queue = [1]\n\n// add 2 in the queue\npush(2, &queue) // queue = [1, 2]\n\n// pop the first element\npop(&queue) // 1, queue = [2, 3]\n\n// add 3 in the queue\npush(3, &queue) // queue = [2, 3]\n\n// pop the first element\npop(&queue) // 2, queue = [3]\n\n// pop the first element\npop(&queue) // 3, queue = []\n\n// pop the first element \npop(&queue) // returns nil because there are no elements in the queue\n// queue = []\n```\n\nThe `push` function should take two parameters, the `number` and the `queue` as an inout parameter.\n\n[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n[/spoiler]\n\n\nThe `pop` function should take `queue` as an inout parameter and return the first number from the queue after removing it. If the queue is empty it should return nil - the result type should be an optional integer(`Int?`).\n\n[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nFor the `pop` function you'll have to retrieve the first element in the queue.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n[/spoiler]\n\n",
        "name": "Queue",
        "title": "7.14 Queue",
        "id": "14",
        "problemStatement": "### 7.14 Queue\n\nA queue is a data structure that can perform two operations:\n\n- **push** which takes a value and adds it at the end of the queue\n- **pop** which returns the value from the start of the queue and removes it from the queue\n\nYour task is to implement the `push` and `pop` operations.\nThe most simple way to represent a queue is using an array. Here are some example operations.\n\n```swift\n// here we define an empty queue\nvar queue: [Int] = []\n\n// add 1 in the queue\npush(1, &queue) // queue = [1]\n\n// add 2 in the queue\npush(2, &queue) // queue = [1, 2]\n\n// pop the first element\npop(&queue) // 1, queue = [2, 3]\n\n// add 3 in the queue\npush(3, &queue) // queue = [2, 3]\n\n// pop the first element\npop(&queue) // 2, queue = [3]\n\n// pop the first element\npop(&queue) // 3, queue = []\n\n// pop the first element \npop(&queue) // returns nil because there are no elements in the queue\n// queue = []\n```\n\n\nThe `push` function should take two parameters, the `number` and the `queue` as an inout parameter.\n\n\n\nThe `pop` function should take `queue` as an inout parameter and return the first number from the queue after removing it. If the queue is empty it should return nil - the result type should be an optional integer(`Int?`).\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "// here we define an empty queue\nvar queue: [Int] = []\n\n// add 1 in the queue\npush(1, &queue) // queue = [1]\n\n// add 2 in the queue\npush(2, &queue) // queue = [1, 2]\n\n// pop the first element\npop(&queue) // 1, queue = [2, 3]\n\n// add 3 in the queue\npush(3, &queue) // queue = [2, 3]\n\n// pop the first element\npop(&queue) // 2, queue = [3]\n\n// pop the first element\npop(&queue) // 3, queue = []\n\n// pop the first element \npop(&queue) // returns nil because there are no elements in the queue\n// queue = []\n",
            "text": "```swift\n// here we define an empty queue\nvar queue: [Int] = []\n\n// add 1 in the queue\npush(1, &queue) // queue = [1]\n\n// add 2 in the queue\npush(2, &queue) // queue = [1, 2]\n\n// pop the first element\npop(&queue) // 1, queue = [2, 3]\n\n// add 3 in the queue\npush(3, &queue) // queue = [2, 3]\n\n// pop the first element\npop(&queue) // 2, queue = [3]\n\n// pop the first element\npop(&queue) // 3, queue = []\n\n// pop the first element \npop(&queue) // returns nil because there are no elements in the queue\n// queue = []\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n",
            "text": "[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n[/spoiler]\n",
            "params": {
              "title": "Push Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ queue: [Int])\n",
                "text": "```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Pop Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pop(inout queue: [Int]) -> Int?\n",
                "text": "```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "For the `pop` function you'll have to retrieve the first element in the queue.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nFor the `pop` function you'll have to retrieve the first element in the queue.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation']\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n",
            "text": "[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n[/spoiler]\n",
            "params": {
              "title": "Push Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ queue: [Int])\n",
                "text": "```swift\nfunc push(number: Int, inout _ queue: [Int])\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Pop Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pop(inout queue: [Int]) -> Int?\n",
                "text": "```swift\nfunc pop(inout queue: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "For the `pop` function you'll have to retrieve the first element in the queue.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nFor the `pop` function you'll have to retrieve the first element in the queue.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc push(number: Int, inout _ queue: [Int]) {\n    queue.append(number)\n}\n\n\nfunc pop(inout queue: [Int]) -> Int? {\n    var result = queue.first\n    \n    if queue.count > 0 {\n        queue.removeAtIndex(0)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation']\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_14",
        "compileCode": false,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 7.15 Stack\n\nA stack is a data structure that can perform three operations:\n\n- **push** adds a value on the top of the stack\n- **top** returns the value from the top of the stack\n- **pop** returns the value from the top of the stack and removes it from there\n\nYour task is to implement the `push`, `top` and `pop` operations.\nThe most simple way to represent a stack is using an array. Here are some example operations.\n\n```swift\nvar stack: [Int] = []\n\npush(1, &stack) // stack = [1]\n\npush(2, &stack) // stack = [1, 2]\n\npop(&stack) // 2, stack = [1]\n\npush(3, &stack) // stack = [1, 3]\n\npop(&stack) // 3, stack = [1]\n\npop(&stack) // 1, stack = []\n\npop(&stack) // returns nil because there are no elements in the stack\n// stack = []\n```\n\n`push` takes two parameters, the `number` that will be pushed and the `stack` as an inout parameter.\n\n[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n[/spoiler]\n\n`top` takes one parameter, the `stack`, and returns the value of the top element or nil if the stack is empty - the result type should be and optional integer(`Int?`)\n\n[spoiler title='Top Function Definition' collapse_link='true']\n```swift\nfunc top(stack: [Int]) -> Int?\n```\n[/spoiler]\n\n`pop` takes the `stack` as an inout parameter, and returns the value of the top element after it removes it. If the `stack` is empty it should return nil - the result type should be and optional integer(`Int?`)\n\n[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to get the last element from the stack for the `top` operation.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n[/spoiler]\n\n\n",
        "text": "### 7.15 Stack\n\nA stack is a data structure that can perform three operations:\n\n- **push** adds a value on the top of the stack\n- **top** returns the value from the top of the stack\n- **pop** returns the value from the top of the stack and removes it from there\n\nYour task is to implement the `push`, `top` and `pop` operations.\nThe most simple way to represent a stack is using an array. Here are some example operations.\n\n```swift\nvar stack: [Int] = []\n\npush(1, &stack) // stack = [1]\n\npush(2, &stack) // stack = [1, 2]\n\npop(&stack) // 2, stack = [1]\n\npush(3, &stack) // stack = [1, 3]\n\npop(&stack) // 3, stack = [1]\n\npop(&stack) // 1, stack = []\n\npop(&stack) // returns nil because there are no elements in the stack\n// stack = []\n```\n\n`push` takes two parameters, the `number` that will be pushed and the `stack` as an inout parameter.\n\n[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n[/spoiler]\n\n`top` takes one parameter, the `stack`, and returns the value of the top element or nil if the stack is empty - the result type should be and optional integer(`Int?`)\n\n[spoiler title='Top Function Definition' collapse_link='true']\n```swift\nfunc top(stack: [Int]) -> Int?\n```\n[/spoiler]\n\n`pop` takes the `stack` as an inout parameter, and returns the value of the top element after it removes it. If the `stack` is empty it should return nil - the result type should be and optional integer(`Int?`)\n\n[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to get the last element from the stack for the `top` operation.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\n[/spoiler]\n\n\n",
        "name": "Stack",
        "title": "7.15 Stack",
        "id": "15",
        "problemStatement": "### 7.15 Stack\n\nA stack is a data structure that can perform three operations:\n\n- **push** adds a value on the top of the stack\n- **top** returns the value from the top of the stack\n- **pop** returns the value from the top of the stack and removes it from there\n\nYour task is to implement the `push`, `top` and `pop` operations.\nThe most simple way to represent a stack is using an array. Here are some example operations.\n\n```swift\nvar stack: [Int] = []\n\npush(1, &stack) // stack = [1]\n\npush(2, &stack) // stack = [1, 2]\n\npop(&stack) // 2, stack = [1]\n\npush(3, &stack) // stack = [1, 3]\n\npop(&stack) // 3, stack = [1]\n\npop(&stack) // 1, stack = []\n\npop(&stack) // returns nil because there are no elements in the stack\n// stack = []\n```\n\n\n`push` takes two parameters, the `number` that will be pushed and the `stack` as an inout parameter.\n\n\n`top` takes one parameter, the `stack`, and returns the value of the top element or nil if the stack is empty - the result type should be and optional integer(`Int?`)\n\n\n`pop` takes the `stack` as an inout parameter, and returns the value of the top element after it removes it. If the `stack` is empty it should return nil - the result type should be and optional integer(`Int?`)\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var stack: [Int] = []\n\npush(1, &stack) // stack = [1]\n\npush(2, &stack) // stack = [1, 2]\n\npop(&stack) // 2, stack = [1]\n\npush(3, &stack) // stack = [1, 3]\n\npop(&stack) // 3, stack = [1]\n\npop(&stack) // 1, stack = []\n\npop(&stack) // returns nil because there are no elements in the stack\n// stack = []\n",
            "text": "```swift\nvar stack: [Int] = []\n\npush(1, &stack) // stack = [1]\n\npush(2, &stack) // stack = [1, 2]\n\npop(&stack) // 2, stack = [1]\n\npush(3, &stack) // stack = [1, 3]\n\npop(&stack) // 3, stack = [1]\n\npop(&stack) // 1, stack = []\n\npop(&stack) // returns nil because there are no elements in the stack\n// stack = []\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n",
            "text": "[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n[/spoiler]\n",
            "params": {
              "title": "Push Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ stack: [Int])\n",
                "text": "```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc top(stack: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Top Function Definition' collapse_link='true']\n```swift\nfunc top(stack: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Top Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func top(stack: [Int]) -> Int?\n",
                "text": "```swift\nfunc top(stack: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Pop Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pop(inout stack: [Int]) -> Int?\n",
                "text": "```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true' compile='false']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to get the last element from the stack for the `top` operation.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to get the last element from the stack for the `top` operation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation']\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "7",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n",
            "text": "[spoiler title='Push Function Definition' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n[/spoiler]\n",
            "params": {
              "title": "Push Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ stack: [Int])\n",
                "text": "```swift\nfunc push(number: Int, inout _ stack: [Int])\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc top(stack: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Top Function Definition' collapse_link='true']\n```swift\nfunc top(stack: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Top Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func top(stack: [Int]) -> Int?\n",
                "text": "```swift\nfunc top(stack: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n",
            "text": "[spoiler title='Pop Function Definition' collapse_link='true']\n```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n[/spoiler]\n",
            "params": {
              "title": "Pop Function Definition",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pop(inout stack: [Int]) -> Int?\n",
                "text": "```swift\nfunc pop(inout stack: [Int]) -> Int?\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to get the last element from the stack for the `top` operation.\n",
            "text": "[spoiler title=\"Hint\" collapse_link=\"true\"]  \nYou'll have to get the last element from the stack for the `top` operation.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n",
                "text": "```swift\nfunc push(number: Int, inout _ stack: [Int]) {\n    stack.append(number)\n}\n\nfunc top(stack: [Int]) -> Int? {\n    if stack.count == 0 {\n        return nil\n    }\n    return stack[stack.count - 1]\n}\n\nfunc pop(inout stack: [Int]) -> Int? {\n    var result = top(stack)\n    \n    if stack.count > 0 {\n        stack.removeAtIndex(stack.count - 1)\n    }\n    \n    return result\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation']\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise7_15",
        "compileCode": false,
        "code": "// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 8. Recursion\n\nRecursion is the process of repeating items in a self-similar way.\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/4300558654_ac82e99df0_z.jpg)\n> picture by [Pavlos Mavridis](https://www.flickr.com/photos/_pvl_/4300558654)\n\nThe same way you can call a function inside of other functions, you can call a function inside of itself. A function that calls itself is called a recursive function. \nRecursion is important because you can solve some problems by solving similar sub-problems. Recursive solutions usually have less code and are more elegant that their iterative equivalents if the problem you solve is recursive in nature.\n\nLet's take a simple example. To print all the numbers from `1` to `N`, the first thing we have to do is print all the numbers from `1` to `N-1` and then print `N`.\n\n```swift\nfunc printFirstNumbers(N: Int) {\n    if N > 1 {\n        printFirstNumbers(N - 1)\n    }\n    print(N)\n}\n\nprintFirstNumbers(3)\n// 1\n// 2\n// 3\n```\n\nOkay ... the example from above works ... but what really happens? \n\nTo understand what happens we can take a look at a modified version of the `printFirstNumbers` function. This version will print all the steps it takes.\n\n```swift\nfunc printFirstNumbers(N: Int) {\n    print(\"start printFirstNumbers(\\(N))\")\n    \n    if N > 1 {\n        print(\"printFirstNumbers(\\(N)) calls printFirstNumbers(\\(N-1))\")\n        \n        printFirstNumbers(N - 1)\n    }\n    \n    print(\"printFirstNumbers(\\(N)) will print \\(N)\")\n    \n    print(\"end printFirstNumbers(\\(N))\")\n}\n\nprintFirstNumbers(3)\n// start printFirstNumbers(3)\n// printFirstNumbers(3) calls printFirstNumbers(2)\n// start printFirstNumbers(2)\n// printFirstNumbers(2) calls printFirstNumbers(1)\n// start printFirstNumbers(1)\n// printFirstNumbers(1) will print 1\n// end printFirstNumbers(1)\n// printFirstNumbers(2) will print 2\n// end printFirstNumbers(2)\n// printFirstNumbers(3) will print 3\n// end printFirstNumbers(3)\n```\n\nThe computer knows where to continue the execution of `printFirstNumbers(2)` after `printFirstNumbers(1)` finishes by using a data structure known as a [call stack](http://en.wikipedia.org/wiki/Call_stack). The call stack keeps information about the currently active functions. When `printFirstNumbers(1)` starts executing `printFirstNumbers(3)` and `printFirstNumbers(2)` are still active and they need to resume control right after the if statement.\n\nNotice that `printFirstNumbers(1)` did not call `printFirstNumbers` again. That's known as a base case. You need to have at least one base case inside a recursive function in order to prevent infinite calls - or what is known as stack overflow.\n\nLet's take another example. This time instead of printing the numbers from `1` to `N` let's do it from `N` to `1`.  \nTo count from `N` to `1` all we need to do is print `N` then print all the numbers from `N-1` to `1`.\n\n```swift\nfunc printFrom(N: Int) {\n    print(N)\n    if N > 1 {\n        printFrom(N - 1)\n    }\n}\n\nprintFrom(5)\n// 5\n// 4\n// 3\n// 2\n// 1\n```\n\nYou can find another example of recursion if you google [recursion](https://www.google.com/?q=recursion). The results page will ask you \"Did you mean: recursion\" which will take you to the same page...\n\nHere are some visual examples of recursion. The Sierpinski triangle and carpet.\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/sierpinski_gasket.gif)\n> Sierpinski triangle\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/download.png)\n> Sierpinski carpet\n\nAnd [here](http://recursivedrawing.com/) you can find a recursive drawing editor made by Toby Schachman. It's super easy to use - and a lot of fun. If you didn't understand what recursion is all about I highly encourage you to take a few minutes to play with it. \n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/Screen-Shot-2014-12-27-at-02.28.58.png)\n> An example image that could be generated using recursive drawing\n\n\nThings to remember about recursion:\n- you can call a function inside of itself\n- you always have at least one base case in order to prevent the function calling itself infinite times\n\n\n",
    "text": "## 8. Recursion\n\nRecursion is the process of repeating items in a self-similar way.\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/4300558654_ac82e99df0_z.jpg)\n> picture by [Pavlos Mavridis](https://www.flickr.com/photos/_pvl_/4300558654)\n\nThe same way you can call a function inside of other functions, you can call a function inside of itself. A function that calls itself is called a recursive function. \nRecursion is important because you can solve some problems by solving similar sub-problems. Recursive solutions usually have less code and are more elegant that their iterative equivalents if the problem you solve is recursive in nature.\n\nLet's take a simple example. To print all the numbers from `1` to `N`, the first thing we have to do is print all the numbers from `1` to `N-1` and then print `N`.\n\n```swift\nfunc printFirstNumbers(N: Int) {\n    if N > 1 {\n        printFirstNumbers(N - 1)\n    }\n    print(N)\n}\n\nprintFirstNumbers(3)\n// 1\n// 2\n// 3\n```\n\nOkay ... the example from above works ... but what really happens? \n\nTo understand what happens we can take a look at a modified version of the `printFirstNumbers` function. This version will print all the steps it takes.\n\n```swift\nfunc printFirstNumbers(N: Int) {\n    print(\"start printFirstNumbers(\\(N))\")\n    \n    if N > 1 {\n        print(\"printFirstNumbers(\\(N)) calls printFirstNumbers(\\(N-1))\")\n        \n        printFirstNumbers(N - 1)\n    }\n    \n    print(\"printFirstNumbers(\\(N)) will print \\(N)\")\n    \n    print(\"end printFirstNumbers(\\(N))\")\n}\n\nprintFirstNumbers(3)\n// start printFirstNumbers(3)\n// printFirstNumbers(3) calls printFirstNumbers(2)\n// start printFirstNumbers(2)\n// printFirstNumbers(2) calls printFirstNumbers(1)\n// start printFirstNumbers(1)\n// printFirstNumbers(1) will print 1\n// end printFirstNumbers(1)\n// printFirstNumbers(2) will print 2\n// end printFirstNumbers(2)\n// printFirstNumbers(3) will print 3\n// end printFirstNumbers(3)\n```\n\nThe computer knows where to continue the execution of `printFirstNumbers(2)` after `printFirstNumbers(1)` finishes by using a data structure known as a [call stack](http://en.wikipedia.org/wiki/Call_stack). The call stack keeps information about the currently active functions. When `printFirstNumbers(1)` starts executing `printFirstNumbers(3)` and `printFirstNumbers(2)` are still active and they need to resume control right after the if statement.\n\nNotice that `printFirstNumbers(1)` did not call `printFirstNumbers` again. That's known as a base case. You need to have at least one base case inside a recursive function in order to prevent infinite calls - or what is known as stack overflow.\n\nLet's take another example. This time instead of printing the numbers from `1` to `N` let's do it from `N` to `1`.  \nTo count from `N` to `1` all we need to do is print `N` then print all the numbers from `N-1` to `1`.\n\n```swift\nfunc printFrom(N: Int) {\n    print(N)\n    if N > 1 {\n        printFrom(N - 1)\n    }\n}\n\nprintFrom(5)\n// 5\n// 4\n// 3\n// 2\n// 1\n```\n\nYou can find another example of recursion if you google [recursion](https://www.google.com/?q=recursion). The results page will ask you \"Did you mean: recursion\" which will take you to the same page...\n\nHere are some visual examples of recursion. The Sierpinski triangle and carpet.\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/sierpinski_gasket.gif)\n> Sierpinski triangle\n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/download.png)\n> Sierpinski carpet\n\nAnd [here](http://recursivedrawing.com/) you can find a recursive drawing editor made by Toby Schachman. It's super easy to use - and a lot of fun. If you didn't understand what recursion is all about I highly encourage you to take a few minutes to play with it. \n\n![](https://www.weheartswift.com/wp-content/uploads/2014/12/Screen-Shot-2014-12-27-at-02.28.58.png)\n> An example image that could be generated using recursive drawing\n\n\nThings to remember about recursion:\n- you can call a function inside of itself\n- you always have at least one base case in order to prevent the function calling itself infinite times\n\n\n",
    "name": "Recursion",
    "title": "Recursion",
    "id": "8",
    "codes": [
      {
        "type": "code",
        "content": "func printFirstNumbers(N: Int) {\n    if N > 1 {\n        printFirstNumbers(N - 1)\n    }\n    print(N)\n}\n\nprintFirstNumbers(3)\n// 1\n// 2\n// 3\n",
        "text": "```swift\nfunc printFirstNumbers(N: Int) {\n    if N > 1 {\n        printFirstNumbers(N - 1)\n    }\n    print(N)\n}\n\nprintFirstNumbers(3)\n// 1\n// 2\n// 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func printFirstNumbers(N: Int) {\n    print(\"start printFirstNumbers(\\(N))\")\n    \n    if N > 1 {\n        print(\"printFirstNumbers(\\(N)) calls printFirstNumbers(\\(N-1))\")\n        \n        printFirstNumbers(N - 1)\n    }\n    \n    print(\"printFirstNumbers(\\(N)) will print \\(N)\")\n    \n    print(\"end printFirstNumbers(\\(N))\")\n}\n\nprintFirstNumbers(3)\n// start printFirstNumbers(3)\n// printFirstNumbers(3) calls printFirstNumbers(2)\n// start printFirstNumbers(2)\n// printFirstNumbers(2) calls printFirstNumbers(1)\n// start printFirstNumbers(1)\n// printFirstNumbers(1) will print 1\n// end printFirstNumbers(1)\n// printFirstNumbers(2) will print 2\n// end printFirstNumbers(2)\n// printFirstNumbers(3) will print 3\n// end printFirstNumbers(3)\n",
        "text": "```swift\nfunc printFirstNumbers(N: Int) {\n    print(\"start printFirstNumbers(\\(N))\")\n    \n    if N > 1 {\n        print(\"printFirstNumbers(\\(N)) calls printFirstNumbers(\\(N-1))\")\n        \n        printFirstNumbers(N - 1)\n    }\n    \n    print(\"printFirstNumbers(\\(N)) will print \\(N)\")\n    \n    print(\"end printFirstNumbers(\\(N))\")\n}\n\nprintFirstNumbers(3)\n// start printFirstNumbers(3)\n// printFirstNumbers(3) calls printFirstNumbers(2)\n// start printFirstNumbers(2)\n// printFirstNumbers(2) calls printFirstNumbers(1)\n// start printFirstNumbers(1)\n// printFirstNumbers(1) will print 1\n// end printFirstNumbers(1)\n// printFirstNumbers(2) will print 2\n// end printFirstNumbers(2)\n// printFirstNumbers(3) will print 3\n// end printFirstNumbers(3)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func printFrom(N: Int) {\n    print(N)\n    if N > 1 {\n        printFrom(N - 1)\n    }\n}\n\nprintFrom(5)\n// 5\n// 4\n// 3\n// 2\n// 1\n",
        "text": "```swift\nfunc printFrom(N: Int) {\n    print(N)\n    if N > 1 {\n        printFrom(N - 1)\n    }\n}\n\nprintFrom(5)\n// 5\n// 4\n// 3\n// 2\n// 1\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 8.1 Fibonacci\n\nImplement a recursive function named `fibonacci` that takes a number `N` and returns the `N`-th fibonacci number. The first two fibonacci numbers are `1` and the rest are the sum of the previous two.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc fibonacci(i: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n[/spoiler]\n\n\n[spoiler title='Explanation' collapse_link='true']  \nFirst consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n[/spoiler]\n\n",
        "text": "### 8.1 Fibonacci\n\nImplement a recursive function named `fibonacci` that takes a number `N` and returns the `N`-th fibonacci number. The first two fibonacci numbers are `1` and the rest are the sum of the previous two.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc fibonacci(i: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n[/spoiler]\n\n\n[spoiler title='Explanation' collapse_link='true']  \nFirst consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n[/spoiler]\n\n",
        "name": "Fibonacci",
        "title": "8.1 Fibonacci",
        "id": "1",
        "problemStatement": "### 8.1 Fibonacci\n\nImplement a recursive function named `fibonacci` that takes a number `N` and returns the `N`-th fibonacci number. The first two fibonacci numbers are `1` and the rest are the sum of the previous two.\n\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc fibonacci(i: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc fibonacci(i: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func fibonacci(i: Int) -> Int\n",
                "text": "```swift\nfunc fibonacci(i: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(3)\n",
                "text": "```swift\nfibonacci(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```swift\n2\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(3)\n```\n\n",
              "Function output": "```swift\n2\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(4)\n",
                "text": "```swift\nfibonacci(4)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```swift\n3\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(4)\n```\n\n",
              "Function output": "```swift\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(5)\n",
                "text": "```swift\nfibonacci(5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```swift\n5\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(5)\n```\n\n",
              "Function output": "```swift\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(6)\n",
                "text": "```swift\nfibonacci(6)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "8\n",
                "text": "```swift\n8\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(6)\n```\n\n",
              "Function output": "```swift\n8\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Remember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n",
                "text": "```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "First consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nFirst consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc fibonacci(i: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc fibonacci(i: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func fibonacci(i: Int) -> Int\n",
                "text": "```swift\nfunc fibonacci(i: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfibonacci(3)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(3)\n",
                "text": "```swift\nfibonacci(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```swift\n2\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(3)\n```\n\n",
              "Function output": "```swift\n2\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfibonacci(4)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(4)\n",
                "text": "```swift\nfibonacci(4)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```swift\n3\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(4)\n```\n\n",
              "Function output": "```swift\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfibonacci(5)\n```\n\nFunction output:\n```swift\n5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(5)\n",
                "text": "```swift\nfibonacci(5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "5\n",
                "text": "```swift\n5\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(5)\n```\n\n",
              "Function output": "```swift\n5\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\nfibonacci(6)\n```\n\nFunction output:\n```swift\n8\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "fibonacci(6)\n",
                "text": "```swift\nfibonacci(6)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "8\n",
                "text": "```swift\n8\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfibonacci(6)\n```\n\n",
              "Function output": "```swift\n8\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Remember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that if `N > 2` , `fibonacci(N) = fibonacci(N - 1) + fibonacci(N - 2)`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n",
                "text": "```swift\nfunc fibonacci(i: Int) -> Int {\n    if i <= 2 {\n        return 1\n    } else {\n        return fibonacci(i - 1) + fibonacci(i - 2)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "First consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nFirst consider the base case: If `i <= 2` we know that we have to return `1` (the first 2 fibonacci numbers are both `1`). Otherwise we just return `fibonacci(i - 1) + fibonacci(i - 2)`, which the definition of the fibonacci sequence.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_1",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 8.2 Factorial\n\nThe factorial of a non-negative integer `N`, denoted `N!`, is the product of all the positive integer less than or equal to `N`. The value of `0!` is defined as `1`. \n\n```\n1! = 1\n2! = 1 * 2 = 2\n3! = 1 * 2 * 3 = 6\n...\n7! = 1 * 2 ... * 7 = 5040\n```\n\nWrite a recursive function named `factorial` that takes an integer `N` and returns it's factorial.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc factorial(N: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\n`N! = N * (N - 1)!`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nLet's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n[/spoiler]\n\n\n",
        "text": "### 8.2 Factorial\n\nThe factorial of a non-negative integer `N`, denoted `N!`, is the product of all the positive integer less than or equal to `N`. The value of `0!` is defined as `1`. \n\n```\n1! = 1\n2! = 1 * 2 = 2\n3! = 1 * 2 * 3 = 6\n...\n7! = 1 * 2 ... * 7 = 5040\n```\n\nWrite a recursive function named `factorial` that takes an integer `N` and returns it's factorial.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc factorial(N: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\n`N! = N * (N - 1)!`\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nLet's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n[/spoiler]\n\n\n",
        "name": "Factorial",
        "title": "8.2 Factorial",
        "id": "2",
        "problemStatement": "### 8.2 Factorial\n\nThe factorial of a non-negative integer `N`, denoted `N!`, is the product of all the positive integer less than or equal to `N`. The value of `0!` is defined as `1`. \n\n```\n1! = 1\n2! = 1 * 2 = 2\n3! = 1 * 2 * 3 = 6\n...\n7! = 1 * 2 ... * 7 = 5040\n```\n\n\nWrite a recursive function named `factorial` that takes an integer `N` and returns it's factorial.\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "1! = 1\n2! = 1 * 2 = 2\n3! = 1 * 2 * 3 = 6\n...\n7! = 1 * 2 ... * 7 = 5040\n",
            "text": "```\n1! = 1\n2! = 1 * 2 = 2\n3! = 1 * 2 * 3 = 6\n...\n7! = 1 * 2 ... * 7 = 5040\n```\n",
            "language": "undefined"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc factorial(N: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc factorial(N: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func factorial(N: Int) -> Int\n",
                "text": "```swift\nfunc factorial(N: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(3)\n",
                "text": "```swift\nfactorial(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```swift\n6\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(3)\n```\n\n",
              "Function output": "```swift\n6\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(5)\n",
                "text": "```swift\nfactorial(5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "120\n",
                "text": "```swift\n120\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(5)\n```\n\n",
              "Function output": "```swift\n120\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(10)\n",
                "text": "```swift\nfactorial(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3628800\n",
                "text": "```swift\n3628800\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(10)\n```\n\n",
              "Function output": "```swift\n3628800\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "`N! = N * (N - 1)!`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n`N! = N * (N - 1)!`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n",
                "text": "```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Let's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nLet's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc factorial(N: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc factorial(N: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func factorial(N: Int) -> Int\n",
                "text": "```swift\nfunc factorial(N: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nfactorial(3)\n```\n\nFunction output:\n```swift\n6\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(3)\n",
                "text": "```swift\nfactorial(3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "6\n",
                "text": "```swift\n6\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(3)\n```\n\n",
              "Function output": "```swift\n6\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nfactorial(5)\n```\n\nFunction output:\n```swift\n120\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(5)\n",
                "text": "```swift\nfactorial(5)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "120\n",
                "text": "```swift\n120\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(5)\n```\n\n",
              "Function output": "```swift\n120\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nfactorial(10)\n```\n\nFunction output:\n```swift\n3628800\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "factorial(10)\n",
                "text": "```swift\nfactorial(10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3628800\n",
                "text": "```swift\n3628800\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nfactorial(10)\n```\n\n",
              "Function output": "```swift\n3628800\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "`N! = N * (N - 1)!`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\n`N! = N * (N - 1)!`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n",
                "text": "```swift\nfunc factorial(N: Int) -> Int {\n    if N == 1 {\n        return 1\n    } else {\n        return N * factorial(N - 1)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "Let's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nLet's consider the case when `N = 1`, the answer is `1` in that case. Otherwise we compute `N!` as `N * (N - 1)!`. In code this is written as `N * factorial(N - 1)`.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_2",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 8.3 Digits\n\nImplement a recursive function named `digits` that takes a positive integer `number` and return an array containing it's digits in order.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc digits(number: Int) -> [Int]\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nWe can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n[/spoiler]\n\n",
        "text": "### 8.3 Digits\n\nImplement a recursive function named `digits` that takes a positive integer `number` and return an array containing it's digits in order.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc digits(number: Int) -> [Int]\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nWe can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n[/spoiler]\n\n",
        "name": "Digits",
        "title": "8.3 Digits",
        "id": "3",
        "problemStatement": "### 8.3 Digits\n\nImplement a recursive function named `digits` that takes a positive integer `number` and return an array containing it's digits in order.\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc digits(number: Int) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc digits(number: Int) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func digits(number: Int) -> [Int]\n",
                "text": "```swift\nfunc digits(number: Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(123)\n",
                "text": "```swift\ndigits(123)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3]\n",
                "text": "```swift\n[1, 2, 3]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(123)\n```\n\n",
              "Function output": "```swift\n[1, 2, 3]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(0)\n",
                "text": "```swift\ndigits(0)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[0]\n",
                "text": "```swift\n[0]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(0)\n```\n\n",
              "Function output": "```swift\n[0]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(54321)\n",
                "text": "```swift\ndigits(54321)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5, 4, 3, 2, 1]\n",
                "text": "```swift\n[5, 4, 3, 2, 1]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(54321)\n```\n\n",
              "Function output": "```swift\n[5, 4, 3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "To get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n",
                "text": "```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "We can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nWe can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc digits(number: Int) -> [Int]\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc digits(number: Int) -> [Int]\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func digits(number: Int) -> [Int]\n",
                "text": "```swift\nfunc digits(number: Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ndigits(123)\n```\n\nFunction output:\n```swift\n[1, 2, 3]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(123)\n",
                "text": "```swift\ndigits(123)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[1, 2, 3]\n",
                "text": "```swift\n[1, 2, 3]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(123)\n```\n\n",
              "Function output": "```swift\n[1, 2, 3]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ndigits(0)\n```\n\nFunction output:\n```swift\n[0]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(0)\n",
                "text": "```swift\ndigits(0)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[0]\n",
                "text": "```swift\n[0]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(0)\n```\n\n",
              "Function output": "```swift\n[0]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ndigits(54321)\n```\n\nFunction output:\n```swift\n[5, 4, 3, 2, 1]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "digits(54321)\n",
                "text": "```swift\ndigits(54321)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5, 4, 3, 2, 1]\n",
                "text": "```swift\n[5, 4, 3, 2, 1]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ndigits(54321)\n```\n\n",
              "Function output": "```swift\n[5, 4, 3, 2, 1]\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "To get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo get the digits of a number you need to get the digits of the number without its last digit (divide by `10`). And then add the last digit to that result.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n",
                "text": "```swift\nfunc digits(number: Int) -> [Int] {\n    if number >= 10 {\n        let firstDigits = digits(number / 10)\n        let lastDigit = number % 10\n        return firstDigits + [lastDigit]\n    } else {\n        return [number]\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "We can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nWe can get the last digit of a number by computing it's remainder to 10. We can remove the last digit by dividing the number by 10. If we take the last digit, remove it and repeat until the number becomes 0 we get the digits in reverse order. We can use recursion to reverse it - first we get the digits of the number without the last then we add the last digit. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_3",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 8.4 Power\n\nWrite a recursive function `pow` that takes two numbers `x` and `y` as input and returns `x` to the power `y`.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nA simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n[/spoiler]\n\n[spoiler title='Solution 1: tail recursion' collapse_link='true']\nUsing `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n[/spoiler]\n\n\n[spoiler title='Solution 2: Exponentiation by squaring' collapse_link='true']\nUsing [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n\n[/spoiler]\n\n",
        "text": "### 8.4 Power\n\nWrite a recursive function `pow` that takes two numbers `x` and `y` as input and returns `x` to the power `y`.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n[/spoiler]\n\n[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nA simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n[/spoiler]\n\n[spoiler title='Solution 1: tail recursion' collapse_link='true']\nUsing `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n[/spoiler]\n\n\n[spoiler title='Solution 2: Exponentiation by squaring' collapse_link='true']\nUsing [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n\n[/spoiler]\n\n",
        "name": "Power",
        "title": "8.4 Power",
        "id": "4",
        "problemStatement": "### 8.4 Power\n\nWrite a recursive function `pow` that takes two numbers `x` and `y` as input and returns `x` to the power `y`.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(2, 10)\n",
                "text": "```swift\npow(2, 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1024\n",
                "text": "```swift\n1024\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(2, 10)\n```\n\n",
              "Function output": "```swift\n1024\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(3, 3)\n",
                "text": "```swift\npow(3, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "27\n",
                "text": "```swift\n27\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(3, 3)\n```\n\n",
              "Function output": "```swift\n27\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(100, 1)\n",
                "text": "```swift\npow(100, 1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```swift\n100\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(100, 1)\n```\n\n",
              "Function output": "```swift\n100\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(10, 0)\n",
                "text": "```swift\npow(10, 0)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```swift\n1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(10, 0)\n```\n\n",
              "Function output": "```swift\n1\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "A simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nA simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Using `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 1: tail recursion' collapse_link='true']\nUsing `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1: tail recursion",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Using [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 2: Exponentiation by squaring' collapse_link='true']\nUsing [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2: Exponentiation by squaring",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\npow(2, 10)\n```\n\nFunction output:\n```swift\n1024\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(2, 10)\n",
                "text": "```swift\npow(2, 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1024\n",
                "text": "```swift\n1024\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(2, 10)\n```\n\n",
              "Function output": "```swift\n1024\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\npow(3, 3)\n```\n\nFunction output:\n```swift\n27\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(3, 3)\n",
                "text": "```swift\npow(3, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "27\n",
                "text": "```swift\n27\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(3, 3)\n```\n\n",
              "Function output": "```swift\n27\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\npow(100, 1)\n```\n\nFunction output:\n```swift\n100\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(100, 1)\n",
                "text": "```swift\npow(100, 1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "100\n",
                "text": "```swift\n100\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(100, 1)\n```\n\n",
              "Function output": "```swift\n100\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n",
            "text": "[spoiler title='Example 4' collapse_link='true']\nFunction call: \n```swift\npow(10, 0)\n```\n\nFunction output:\n```swift\n1\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 4",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "pow(10, 0)\n",
                "text": "```swift\npow(10, 0)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n",
                "text": "```swift\n1\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\npow(10, 0)\n```\n\n",
              "Function output": "```swift\n1\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "A simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nA simple recursive formula we can use is `x^y = x * x ^ (y - 1)`\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "Using `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 1: tail recursion' collapse_link='true']\nUsing `x^y = x * x^(y-1)`:\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1: tail recursion",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else {\n        return x * pow(x, y - 1)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Using [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution 2: Exponentiation by squaring' collapse_link='true']\nUsing [exponentiation by squaring](http://en.wikipedia.org/wiki/Exponentiation_by_squaring):\n\n```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2: Exponentiation by squaring",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n",
                "text": "```swift\nfunc pow(x: Int, _ y: Int) -> Int {\n    if y == 0 {\n        return 1\n    } else if y == 1 {\n        return x\n    } else {\n        // compute x^(y/2)\n        let xy2 = pow(x, y / 2)\n        // if y is even\n        if y % 2 == 0 {\n            // x^y is x^(y/2) squared\n            return xy2 * xy2\n        } else {\n            // x^y is x^(y/2) squared times x\n            return xy2 * xy2 * x\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_4",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 8.5 Euclid\n\nImplement the [Euclidian algorithm](http://en.wikipedia.org/wiki/Euclidean_algorithm) for getting the greatest common divisor of two numbers by using repeated subtractions. The algorithm starts with two numbers and subtracts the smallest one from the other one until one of them becomes zero, the other one is the greatest common divisor of the original number. The `gcd` function takes two numbers as input and returns their greatest common divisor. Implement the algorithm as a recursive function.\n\nAlgorithm example:\n\n```swift\n10 2\n8 2\n6 2\n4 2\n2 2\n2 0 // 2 is the greatest common divisor of 10 and 2\n\n9 6\n3 6\n3 3\n3 0 // 3 is the greatest common divisor of 9 and 6\n\n35 49\n35 14\n21 14\n7  14\n7  7\n7  0 // 7 is the greatest common divisor of 35 and 49\n```\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n\n\n",
        "text": "### 8.5 Euclid\n\nImplement the [Euclidian algorithm](http://en.wikipedia.org/wiki/Euclidean_algorithm) for getting the greatest common divisor of two numbers by using repeated subtractions. The algorithm starts with two numbers and subtracts the smallest one from the other one until one of them becomes zero, the other one is the greatest common divisor of the original number. The `gcd` function takes two numbers as input and returns their greatest common divisor. Implement the algorithm as a recursive function.\n\nAlgorithm example:\n\n```swift\n10 2\n8 2\n6 2\n4 2\n2 2\n2 0 // 2 is the greatest common divisor of 10 and 2\n\n9 6\n3 6\n3 3\n3 0 // 3 is the greatest common divisor of 9 and 6\n\n35 49\n35 14\n21 14\n7  14\n7  7\n7  0 // 7 is the greatest common divisor of 35 and 49\n```\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n[/spoiler]\n\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n\n\n",
        "name": "Euclid",
        "title": "8.5 Euclid",
        "id": "5",
        "problemStatement": "### 8.5 Euclid\n\nImplement the [Euclidian algorithm](http://en.wikipedia.org/wiki/Euclidean_algorithm) for getting the greatest common divisor of two numbers by using repeated subtractions. The algorithm starts with two numbers and subtracts the smallest one from the other one until one of them becomes zero, the other one is the greatest common divisor of the original number. The `gcd` function takes two numbers as input and returns their greatest common divisor. Implement the algorithm as a recursive function.\n\nAlgorithm example:\n\n```swift\n10 2\n8 2\n6 2\n4 2\n2 2\n2 0 // 2 is the greatest common divisor of 10 and 2\n\n9 6\n3 6\n3 3\n3 0 // 3 is the greatest common divisor of 9 and 6\n\n35 49\n35 14\n21 14\n7  14\n7  7\n7  0 // 7 is the greatest common divisor of 35 and 49\n```\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "10 2\n8 2\n6 2\n4 2\n2 2\n2 0 // 2 is the greatest common divisor of 10 and 2\n\n9 6\n3 6\n3 3\n3 0 // 3 is the greatest common divisor of 9 and 6\n\n35 49\n35 14\n21 14\n7  14\n7  7\n7  0 // 7 is the greatest common divisor of 35 and 49\n",
            "text": "```swift\n10 2\n8 2\n6 2\n4 2\n2 2\n2 0 // 2 is the greatest common divisor of 10 and 2\n\n9 6\n3 6\n3 3\n3 0 // 3 is the greatest common divisor of 9 and 6\n\n35 49\n35 14\n21 14\n7  14\n7  7\n7  0 // 7 is the greatest common divisor of 35 and 49\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func gcd(a: Int, _ b: Int) -> Int\n",
                "text": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(2, 10)\n",
                "text": "```swift\ngcd(2, 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```swift\n2\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(2, 10)\n```\n\n",
              "Function output": "```swift\n2\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(9, 6)\n",
                "text": "```swift\ngcd(9, 6)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```swift\n3\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(9, 6)\n```\n\n",
              "Function output": "```swift\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(30, 75)\n",
                "text": "```swift\ngcd(30, 75)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "15\n",
                "text": "```swift\n15\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(30, 75)\n```\n\n",
              "Function output": "```swift\n15\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n",
                "text": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func gcd(a: Int, _ b: Int) -> Int\n",
                "text": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\ngcd(2, 10)\n```\n\nFunction output:\n```swift\n2\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(2, 10)\n",
                "text": "```swift\ngcd(2, 10)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n",
                "text": "```swift\n2\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(2, 10)\n```\n\n",
              "Function output": "```swift\n2\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\ngcd(9, 6)\n```\n\nFunction output:\n```swift\n3\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(9, 6)\n",
                "text": "```swift\ngcd(9, 6)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "3\n",
                "text": "```swift\n3\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(9, 6)\n```\n\n",
              "Function output": "```swift\n3\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\ngcd(30, 75)\n```\n\nFunction output:\n```swift\n15\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "gcd(30, 75)\n",
                "text": "```swift\ngcd(30, 75)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "15\n",
                "text": "```swift\n15\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\ngcd(30, 75)\n```\n\n",
              "Function output": "```swift\n15\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n",
                "text": "```swift\nfunc gcd(a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        if a > b {\n            return gcd(a-b, b)\n        } else {\n            return gcd(a, b-a)\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_5",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 8.6 Binary Search\n\nSearching a sorted collection is a common task. For example finding a word in a dictionary, or a number in a phone book.\n\n[Binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm) is one of the fundamental algorithms in computer science. In its most basic form, binary search finds the position of an element, known as the search key, in a sorted array. It does this by repeatedly halving the search interval. Initially the search interval ranges from the first index of the array to the last index. In each step the algorithm compares the middle value from the search interval with the search key. If the middle value is less than the key, then all the value from the first half of the array are lower than the key, that means that the search key cannot be located in the first half, the search will continue in the second half of the array. The same logic will apply if the middle element is greater than the key. If the middle value is equal to the search key then the key has been found.\n\nLet's take a few examples to understand the algorithm, `left` if the first index of the search interval and `right` is the last one:\n\n```swift\nnumbers = [1, 2, 4, 5, 7, 8, 9, 12] // 8 elements\n\n---------------------------------------------------------------------\nkey = 4\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 4\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 4\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 - we found the key!\n\n---------------------------------------------------------------------\nkey =  12\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 2 (left = 4, right = 7)\n// the middle element is 8 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 6, right = 7)\n// the middle element is 9 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 4 (left = 7, right = 7)\n// the search interval has only one element which is equal to the key\n\n---------------------------------------------------------------------\nkey = 3\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 3\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 4 (left = 2, right = 2)\n// the search interval has only one element which is not equal to the key\n// the key could not be found in the array\n```\n\nImplement the binary search function using recursion.\n\n[spoiler title='Function Definition' collapse_link='true' include='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n\n\n\n",
        "text": "### 8.6 Binary Search\n\nSearching a sorted collection is a common task. For example finding a word in a dictionary, or a number in a phone book.\n\n[Binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm) is one of the fundamental algorithms in computer science. In its most basic form, binary search finds the position of an element, known as the search key, in a sorted array. It does this by repeatedly halving the search interval. Initially the search interval ranges from the first index of the array to the last index. In each step the algorithm compares the middle value from the search interval with the search key. If the middle value is less than the key, then all the value from the first half of the array are lower than the key, that means that the search key cannot be located in the first half, the search will continue in the second half of the array. The same logic will apply if the middle element is greater than the key. If the middle value is equal to the search key then the key has been found.\n\nLet's take a few examples to understand the algorithm, `left` if the first index of the search interval and `right` is the last one:\n\n```swift\nnumbers = [1, 2, 4, 5, 7, 8, 9, 12] // 8 elements\n\n---------------------------------------------------------------------\nkey = 4\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 4\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 4\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 - we found the key!\n\n---------------------------------------------------------------------\nkey =  12\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 2 (left = 4, right = 7)\n// the middle element is 8 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 6, right = 7)\n// the middle element is 9 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 4 (left = 7, right = 7)\n// the search interval has only one element which is equal to the key\n\n---------------------------------------------------------------------\nkey = 3\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 3\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 4 (left = 2, right = 2)\n// the search interval has only one element which is not equal to the key\n// the key could not be found in the array\n```\n\nImplement the binary search function using recursion.\n\n[spoiler title='Function Definition' collapse_link='true' include='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nTo start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n\n\n\n",
        "name": "Binary Search",
        "title": "8.6 Binary Search",
        "id": "6",
        "problemStatement": "### 8.6 Binary Search\n\nSearching a sorted collection is a common task. For example finding a word in a dictionary, or a number in a phone book.\n\n[Binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm) is one of the fundamental algorithms in computer science. In its most basic form, binary search finds the position of an element, known as the search key, in a sorted array. It does this by repeatedly halving the search interval. Initially the search interval ranges from the first index of the array to the last index. In each step the algorithm compares the middle value from the search interval with the search key. If the middle value is less than the key, then all the value from the first half of the array are lower than the key, that means that the search key cannot be located in the first half, the search will continue in the second half of the array. The same logic will apply if the middle element is greater than the key. If the middle value is equal to the search key then the key has been found.\n\nLet's take a few examples to understand the algorithm, `left` if the first index of the search interval and `right` is the last one:\n\n```swift\nnumbers = [1, 2, 4, 5, 7, 8, 9, 12] // 8 elements\n\n---------------------------------------------------------------------\nkey = 4\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 4\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 4\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 - we found the key!\n\n---------------------------------------------------------------------\nkey =  12\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 2 (left = 4, right = 7)\n// the middle element is 8 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 6, right = 7)\n// the middle element is 9 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 4 (left = 7, right = 7)\n// the search interval has only one element which is equal to the key\n\n---------------------------------------------------------------------\nkey = 3\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 3\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 4 (left = 2, right = 2)\n// the search interval has only one element which is not equal to the key\n// the key could not be found in the array\n```\n\n\nImplement the binary search function using recursion.\n\n\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "numbers = [1, 2, 4, 5, 7, 8, 9, 12] // 8 elements\n\n---------------------------------------------------------------------\nkey = 4\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 4\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 4\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 - we found the key!\n\n---------------------------------------------------------------------\nkey =  12\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 2 (left = 4, right = 7)\n// the middle element is 8 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 6, right = 7)\n// the middle element is 9 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 4 (left = 7, right = 7)\n// the search interval has only one element which is equal to the key\n\n---------------------------------------------------------------------\nkey = 3\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 3\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 4 (left = 2, right = 2)\n// the search interval has only one element which is not equal to the key\n// the key could not be found in the array\n",
            "text": "```swift\nnumbers = [1, 2, 4, 5, 7, 8, 9, 12] // 8 elements\n\n---------------------------------------------------------------------\nkey = 4\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 4\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 4\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 - we found the key!\n\n---------------------------------------------------------------------\nkey =  12\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 2 (left = 4, right = 7)\n// the middle element is 8 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 6, right = 7)\n// the middle element is 9 which is less than 12\n// the search will continue in the second half of the search interval\n\n// Step 4 (left = 7, right = 7)\n// the search interval has only one element which is equal to the key\n\n---------------------------------------------------------------------\nkey = 3\n\n// Step 1 (left = 0, right = 7)\n// the middle element is 5 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 2 (left = 0, right = 3)\n// the middle element is 2 which is less than 3\n// the search will continue in the second half of the search interval\n\n// Step 3 (left = 2, right = 3)\n// the middle element is 4 which is greater than 3\n// the search will continue in the first half of the search interval\n\n// Step 4 (left = 2, right = 2)\n// the search interval has only one element which is not equal to the key\n// the key could not be found in the array\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' include='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "include": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n",
                "text": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n",
                "text": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(2, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```swift\ntrue\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(3, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```swift\nfalse\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(6, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```swift\nfalse\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "To start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n",
                "text": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "8",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' include='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "include": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n",
                "text": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\ntrue\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(2, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "true\n",
                "text": "```swift\ntrue\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(2, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\ntrue\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(3, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```swift\nfalse\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(3, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call: \n```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\nFunction output:\n```swift\nfalse\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "binarySearch(6, [1, 2, 4, 5 ,7, 9])\n",
                "text": "```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "false\n",
                "text": "```swift\nfalse\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nbinarySearch(6, [1, 2, 4, 5 ,7, 9])\n```\n\n",
              "Function output": "```swift\nfalse\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "To start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nTo start off consider the base case, we have to return true when `key` is equal to `numbers[mid]`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n",
                "text": "```swift\nfunc binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    if left < right {\n        var mid = (left + right) / 2\n        if key < numbers[mid] {\n            return binarySearch(key, numbers, left: left, right: mid)\n        } else if key > numbers[mid] {\n            return binarySearch(key, numbers, left: mid + 1, right: right)\n        } else {\n            return true\n        }\n    } else {\n        return numbers[left] == key\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise8_6",
        "compileCode": true,
        "code": "func binarySearch(key: Int, \n                  _ numbers: [Int], \n                  left: Int = 0, \n                  var right: Int = -1) -> Bool {\n    if right == -1 {\n        right = numbers.count - 1\n    }\n    \n    // your code here\n    \n    return false\n}\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 9. Closures\n\nClosures are self contained chunks of code that can be passed around and used in your code. Closures can capture and store references to any constants or variables from the context in which they are defined. This is know as closing over those variables, hance the name closures. Closures are use intensively in the Cocoa frameworks - which are used to develop iOS or Mac applications. \n\nFunctions are a special kind of closures. There are three kinds of closures:\n- *global functions* - they have a name and cannot capture any values\n- *nested functions* - they have a name and can capture values from their enclosing functions\n- *closure expressions* - they don't have a name and can capture values from their context\n\nThe thing to keep in mind for the moment is that you already have an intuition about closures. They are almost the same as functions but don't necessarily have a name.\n\n```swift\n// a closure that has no parameters and return a String\nvar hello: () -> (String) = {\n    return \"Hello!\"\n}\n\nhello() // Hello!\n\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n\nRemember the array `sortInPlace` method?\n\n```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace(<) // this will sort the array in ascending order\nnumbers.sortInPlace(>) // this will sort the array in descending order\n```\n\n\nThe parameter from the `sortInPlace` method is actually a closure. The `<` and `>` operators are defined as functions, which can be referenced as closures.\nHere is an example for calling `sortInPlace` that uses a closure:\n\n```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace({ x, y in\n    return x < y\n})\n\nprint(numbers)\n// [1, 2, 3, 4, 5, 8]\n```\n\n#### Declaring a closure\n\nThe general syntax for declaring closures is:\n\n{ (`parameters`) -> `return type` **in**  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nIf the closure does not return any value you can omit the arrow (`->`) and the return type.\n\n{ (`parameters`) **in**  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nClosures can use variable and inout parameters but cannot assign default values to them. Also closure parameters cannot have external names.\n\nLet's look at some examples:\n\n```swift\nvar noParameterAndNoReturnValue: () -> () = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue: () -> (Int) = {\n    return 1000\n}\n\nvar oneParameterAndReturnValue: (Int) -> (Int) = { x -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue: (String, String) -> (String) = \n\t{ (first, second) -> String in\n    return first + \" \" + second\n}\n```\n\nThe examples from above don't declare the type of each parameter, if you do so you don't need to state the type of the closure because it can be inferred.\n\n```swift\nvar noParameterAndNoReturnValue = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue = { () -> Int in\n    return 1000\n}\n\nvar oneParameterAndReturnValue = { (x: Int) -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue = \n\t{ (first: String, second: String) -> String in\n    return first + \" \" + second\n}\n```\n\n#### Shorthand Parameter Names\n\nSwift provides shorthand parameter names for closures. You can refer to the parameters as `$0`, `$1`, `$2` and so on. To use shorthand parameter names ignore the first part of the declaration.\n\n```swift\nnumbers.sort({ return $0 < $1 })\n\nvar double: (Int) -> (Int) = {\n    return $0 * 2\n}\n\nvar sum: (Int, Int) -> (Int) = {\n    return $1 + $2\n}\n```\n\n#### Capturing Values\n\nIn the beginning of the chapter I mentioned that closures can capture values. Let's see what that means:\n\n```swift\nvar number = 0\n\nvar addOne = {\n    number += 1\n}\n\nvar printNumber = {\n    print(number)\n}\n\nprintNumber() // 0\naddOne() // number is 1\nprintNumber() // 1\naddOne() // number is 2\naddOne() // number is 3\naddOne() // number is 4\nprintNumber() // 4\n```\n\nSo a closure can remember the reference of a variable or constant from its context and use it when it's called. \nIn the example above the `number` variable is in the global context so it would have been destroyed only when the program would stop executing. Let's look at another example, in which a closure captures a variable that is not in the global context:\n\n```swift\nfunc makeIterator(start: Int, step: Int) -> () -> Int {\n    var i = start\n    return {\n        let currentValue = i\n        i += step\n        return currentValue\n    }\n}\n\nvar iterator = makeIterator(1, step: 1)\n\niterator() // 1\niterator() // 2\niterator() // 3\n\nvar anotherIterator = makeIterator(1, step: 3)\n\nanotherIterator() // 1\nanotherIterator() // 4\nanotherIterator() // 7\nanotherIterator() // 10\n```\n\n#### Trailing Closure Syntax\n\nIf the last parameter of a function is a closure, you can write it after the function call.\n\n```swift\nnumbers.sort { $0 < $1 }\n\nfunc sum(from: Int, to: Int, f: (Int) -> (Int)) -> Int {\n    var sum = 0\n    for i in from...to {\n        sum += f(i)\n    }\n    return sum\n}\n\nsum(1, 10) {\n    $0 \n} // the sum of the first 10 numbers \n \nsum(1, 10) {\n    $0 * $0\n} // the sum of the first 10 squares\n```\n\n#### Closures are reference types\n\nClosures are reference types. This means that when you assign a closure to more than one variable they will refer to the same closure. This is different from value type which make a copy when you assign them to another variable or constant.\n\n```swift\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n\n#### Implicit Return Values\n\nClosures that have only one statement will return the result of that statement. To do that simply omit the `return` keyword.\n\n```swift\narray.sort { $0 < $1 } \n```\n\n#### Higher order functions\n\nA higher order function is a function that does at least one of the following:\n- takes a function as input\n- outputs a function\n\nSwift has three important higher order functions implemented for arrays: map, filter and reduce.\n\n##### Map\n\nMap transforms an array using a function.\n\n```\n[ x1, x2, ... , xn].map(f) -> [f(x1), f(x2), ... , f(xn)]\n```\n\nLet's take as an example the problem of converting an array of numbers to an array of strings.\n\n```\n[1, 2, 3] -> [\"1\", \"2\", \"3\"]\n```\n\nOne way of solving this problem would be to create an empty array of strings, iterate over the original array transforming each element and adding it to the new one.\n\n```swift\nvar numbers = [1, 2, 3]\n\nvar strings: [String] = []\n\nfor number in numbers {\n    strings.append(\"\\(number)\")\n}\n```\n\nThe other way of solving this problem is by using map:\n\n```swift\nvar numbers = [1, 2, 3]\n\nvar strings = numbers.map { \"\\($0)\" }\n```\n\n`{ \"\\($0)\" }` is the closure we provided to solve this problem. It takes one parameter and converts it into a string using string interpolation. \n\nThe closure that we need to give to map take one parameter and will be called once for each of the elements from the array.\n\n##### Filter\n\nFilter selects the elements of an array which satisfy a certain condition.\n\nFor example let's remove all the odd numbers from an array:\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nvar evenNumbers = numbers.filter { $0 % 2 == 0 }\n// evenNumbers = [2, 4, 6, 8]\n```\n\nOr remove all the even numbers:\n\n```swift\nvar oddNumbers = numbers.filter { $0 % 2 == 1 }\n// oddNumbers = [1, 3, 5, 7]\n```\n\nThe closure that we need to give to map takes one parameter and will be called once for each of the elements from the array. It should return a `Bool` value, if it's `true` the element will be copied into the new array otherwise no.\n\n\n##### Reduce\n\nReduce combines the value of an array into a single value.\n\nFor example we can reduce an array of numbers to their sum.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0) { $0 + $1 } // 15\n```\n\nReduce take two parameters, an initial value and a closure that will be used to combine the elements of the array. The closure provided to reduce takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once.\nIn the sum example we started the sum from 0 and the closure added the partial sum with each element.\n\nHere is another cool way in which we can use the fact that Swift operators are implemented as functions:\n\n```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0, +) // 15\n```\n\n",
    "text": "## 9. Closures\n\nClosures are self contained chunks of code that can be passed around and used in your code. Closures can capture and store references to any constants or variables from the context in which they are defined. This is know as closing over those variables, hance the name closures. Closures are use intensively in the Cocoa frameworks - which are used to develop iOS or Mac applications. \n\nFunctions are a special kind of closures. There are three kinds of closures:\n- *global functions* - they have a name and cannot capture any values\n- *nested functions* - they have a name and can capture values from their enclosing functions\n- *closure expressions* - they don't have a name and can capture values from their context\n\nThe thing to keep in mind for the moment is that you already have an intuition about closures. They are almost the same as functions but don't necessarily have a name.\n\n```swift\n// a closure that has no parameters and return a String\nvar hello: () -> (String) = {\n    return \"Hello!\"\n}\n\nhello() // Hello!\n\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n\nRemember the array `sortInPlace` method?\n\n```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace(<) // this will sort the array in ascending order\nnumbers.sortInPlace(>) // this will sort the array in descending order\n```\n\n\nThe parameter from the `sortInPlace` method is actually a closure. The `<` and `>` operators are defined as functions, which can be referenced as closures.\nHere is an example for calling `sortInPlace` that uses a closure:\n\n```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace({ x, y in\n    return x < y\n})\n\nprint(numbers)\n// [1, 2, 3, 4, 5, 8]\n```\n\n#### Declaring a closure\n\nThe general syntax for declaring closures is:\n\n{ (`parameters`) -> `return type` **in**  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nIf the closure does not return any value you can omit the arrow (`->`) and the return type.\n\n{ (`parameters`) **in**  \n&nbsp;&nbsp;&nbsp;&nbsp;`statements`  \n}\n\nClosures can use variable and inout parameters but cannot assign default values to them. Also closure parameters cannot have external names.\n\nLet's look at some examples:\n\n```swift\nvar noParameterAndNoReturnValue: () -> () = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue: () -> (Int) = {\n    return 1000\n}\n\nvar oneParameterAndReturnValue: (Int) -> (Int) = { x -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue: (String, String) -> (String) = \n\t{ (first, second) -> String in\n    return first + \" \" + second\n}\n```\n\nThe examples from above don't declare the type of each parameter, if you do so you don't need to state the type of the closure because it can be inferred.\n\n```swift\nvar noParameterAndNoReturnValue = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue = { () -> Int in\n    return 1000\n}\n\nvar oneParameterAndReturnValue = { (x: Int) -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue = \n\t{ (first: String, second: String) -> String in\n    return first + \" \" + second\n}\n```\n\n#### Shorthand Parameter Names\n\nSwift provides shorthand parameter names for closures. You can refer to the parameters as `$0`, `$1`, `$2` and so on. To use shorthand parameter names ignore the first part of the declaration.\n\n```swift\nnumbers.sort({ return $0 < $1 })\n\nvar double: (Int) -> (Int) = {\n    return $0 * 2\n}\n\nvar sum: (Int, Int) -> (Int) = {\n    return $1 + $2\n}\n```\n\n#### Capturing Values\n\nIn the beginning of the chapter I mentioned that closures can capture values. Let's see what that means:\n\n```swift\nvar number = 0\n\nvar addOne = {\n    number += 1\n}\n\nvar printNumber = {\n    print(number)\n}\n\nprintNumber() // 0\naddOne() // number is 1\nprintNumber() // 1\naddOne() // number is 2\naddOne() // number is 3\naddOne() // number is 4\nprintNumber() // 4\n```\n\nSo a closure can remember the reference of a variable or constant from its context and use it when it's called. \nIn the example above the `number` variable is in the global context so it would have been destroyed only when the program would stop executing. Let's look at another example, in which a closure captures a variable that is not in the global context:\n\n```swift\nfunc makeIterator(start: Int, step: Int) -> () -> Int {\n    var i = start\n    return {\n        let currentValue = i\n        i += step\n        return currentValue\n    }\n}\n\nvar iterator = makeIterator(1, step: 1)\n\niterator() // 1\niterator() // 2\niterator() // 3\n\nvar anotherIterator = makeIterator(1, step: 3)\n\nanotherIterator() // 1\nanotherIterator() // 4\nanotherIterator() // 7\nanotherIterator() // 10\n```\n\n#### Trailing Closure Syntax\n\nIf the last parameter of a function is a closure, you can write it after the function call.\n\n```swift\nnumbers.sort { $0 < $1 }\n\nfunc sum(from: Int, to: Int, f: (Int) -> (Int)) -> Int {\n    var sum = 0\n    for i in from...to {\n        sum += f(i)\n    }\n    return sum\n}\n\nsum(1, 10) {\n    $0 \n} // the sum of the first 10 numbers \n \nsum(1, 10) {\n    $0 * $0\n} // the sum of the first 10 squares\n```\n\n#### Closures are reference types\n\nClosures are reference types. This means that when you assign a closure to more than one variable they will refer to the same closure. This is different from value type which make a copy when you assign them to another variable or constant.\n\n```swift\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n\n#### Implicit Return Values\n\nClosures that have only one statement will return the result of that statement. To do that simply omit the `return` keyword.\n\n```swift\narray.sort { $0 < $1 } \n```\n\n#### Higher order functions\n\nA higher order function is a function that does at least one of the following:\n- takes a function as input\n- outputs a function\n\nSwift has three important higher order functions implemented for arrays: map, filter and reduce.\n\n##### Map\n\nMap transforms an array using a function.\n\n```\n[ x1, x2, ... , xn].map(f) -> [f(x1), f(x2), ... , f(xn)]\n```\n\nLet's take as an example the problem of converting an array of numbers to an array of strings.\n\n```\n[1, 2, 3] -> [\"1\", \"2\", \"3\"]\n```\n\nOne way of solving this problem would be to create an empty array of strings, iterate over the original array transforming each element and adding it to the new one.\n\n```swift\nvar numbers = [1, 2, 3]\n\nvar strings: [String] = []\n\nfor number in numbers {\n    strings.append(\"\\(number)\")\n}\n```\n\nThe other way of solving this problem is by using map:\n\n```swift\nvar numbers = [1, 2, 3]\n\nvar strings = numbers.map { \"\\($0)\" }\n```\n\n`{ \"\\($0)\" }` is the closure we provided to solve this problem. It takes one parameter and converts it into a string using string interpolation. \n\nThe closure that we need to give to map take one parameter and will be called once for each of the elements from the array.\n\n##### Filter\n\nFilter selects the elements of an array which satisfy a certain condition.\n\nFor example let's remove all the odd numbers from an array:\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nvar evenNumbers = numbers.filter { $0 % 2 == 0 }\n// evenNumbers = [2, 4, 6, 8]\n```\n\nOr remove all the even numbers:\n\n```swift\nvar oddNumbers = numbers.filter { $0 % 2 == 1 }\n// oddNumbers = [1, 3, 5, 7]\n```\n\nThe closure that we need to give to map takes one parameter and will be called once for each of the elements from the array. It should return a `Bool` value, if it's `true` the element will be copied into the new array otherwise no.\n\n\n##### Reduce\n\nReduce combines the value of an array into a single value.\n\nFor example we can reduce an array of numbers to their sum.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0) { $0 + $1 } // 15\n```\n\nReduce take two parameters, an initial value and a closure that will be used to combine the elements of the array. The closure provided to reduce takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once.\nIn the sum example we started the sum from 0 and the closure added the partial sum with each element.\n\nHere is another cool way in which we can use the fact that Swift operators are implemented as functions:\n\n```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0, +) // 15\n```\n\n",
    "name": "Closures",
    "title": "Closures",
    "id": "9",
    "codes": [
      {
        "type": "code",
        "content": "// a closure that has no parameters and return a String\nvar hello: () -> (String) = {\n    return \"Hello!\"\n}\n\nhello() // Hello!\n\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n",
        "text": "```swift\n// a closure that has no parameters and return a String\nvar hello: () -> (String) = {\n    return \"Hello!\"\n}\n\nhello() // Hello!\n\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace(<) // this will sort the array in ascending order\nnumbers.sortInPlace(>) // this will sort the array in descending order\n",
        "text": "```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace(<) // this will sort the array in ascending order\nnumbers.sortInPlace(>) // this will sort the array in descending order\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace({ x, y in\n    return x < y\n})\n\nprint(numbers)\n// [1, 2, 3, 4, 5, 8]\n",
        "text": "```swift\nvar numbers = [1, 4, 2, 5, 8, 3]\n\nnumbers.sortInPlace({ x, y in\n    return x < y\n})\n\nprint(numbers)\n// [1, 2, 3, 4, 5, 8]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var noParameterAndNoReturnValue: () -> () = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue: () -> (Int) = {\n    return 1000\n}\n\nvar oneParameterAndReturnValue: (Int) -> (Int) = { x -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue: (String, String) -> (String) = \n\t{ (first, second) -> String in\n    return first + \" \" + second\n}\n",
        "text": "```swift\nvar noParameterAndNoReturnValue: () -> () = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue: () -> (Int) = {\n    return 1000\n}\n\nvar oneParameterAndReturnValue: (Int) -> (Int) = { x -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue: (String, String) -> (String) = \n\t{ (first, second) -> String in\n    return first + \" \" + second\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var noParameterAndNoReturnValue = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue = { () -> Int in\n    return 1000\n}\n\nvar oneParameterAndReturnValue = { (x: Int) -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue = \n\t{ (first: String, second: String) -> String in\n    return first + \" \" + second\n}\n",
        "text": "```swift\nvar noParameterAndNoReturnValue = {\n    print(\"Hello!\")\n}\n\nvar noParameterAndReturnValue = { () -> Int in\n    return 1000\n}\n\nvar oneParameterAndReturnValue = { (x: Int) -> Int in\n    return x % 10\n}\n\nvar multipleParametersAndReturnValue = \n\t{ (first: String, second: String) -> String in\n    return first + \" \" + second\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "numbers.sort({ return $0 < $1 })\n\nvar double: (Int) -> (Int) = {\n    return $0 * 2\n}\n\nvar sum: (Int, Int) -> (Int) = {\n    return $1 + $2\n}\n",
        "text": "```swift\nnumbers.sort({ return $0 < $1 })\n\nvar double: (Int) -> (Int) = {\n    return $0 * 2\n}\n\nvar sum: (Int, Int) -> (Int) = {\n    return $1 + $2\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var number = 0\n\nvar addOne = {\n    number += 1\n}\n\nvar printNumber = {\n    print(number)\n}\n\nprintNumber() // 0\naddOne() // number is 1\nprintNumber() // 1\naddOne() // number is 2\naddOne() // number is 3\naddOne() // number is 4\nprintNumber() // 4\n",
        "text": "```swift\nvar number = 0\n\nvar addOne = {\n    number += 1\n}\n\nvar printNumber = {\n    print(number)\n}\n\nprintNumber() // 0\naddOne() // number is 1\nprintNumber() // 1\naddOne() // number is 2\naddOne() // number is 3\naddOne() // number is 4\nprintNumber() // 4\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func makeIterator(start: Int, step: Int) -> () -> Int {\n    var i = start\n    return {\n        let currentValue = i\n        i += step\n        return currentValue\n    }\n}\n\nvar iterator = makeIterator(1, step: 1)\n\niterator() // 1\niterator() // 2\niterator() // 3\n\nvar anotherIterator = makeIterator(1, step: 3)\n\nanotherIterator() // 1\nanotherIterator() // 4\nanotherIterator() // 7\nanotherIterator() // 10\n",
        "text": "```swift\nfunc makeIterator(start: Int, step: Int) -> () -> Int {\n    var i = start\n    return {\n        let currentValue = i\n        i += step\n        return currentValue\n    }\n}\n\nvar iterator = makeIterator(1, step: 1)\n\niterator() // 1\niterator() // 2\niterator() // 3\n\nvar anotherIterator = makeIterator(1, step: 3)\n\nanotherIterator() // 1\nanotherIterator() // 4\nanotherIterator() // 7\nanotherIterator() // 10\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "numbers.sort { $0 < $1 }\n\nfunc sum(from: Int, to: Int, f: (Int) -> (Int)) -> Int {\n    var sum = 0\n    for i in from...to {\n        sum += f(i)\n    }\n    return sum\n}\n\nsum(1, 10) {\n    $0 \n} // the sum of the first 10 numbers \n \nsum(1, 10) {\n    $0 * $0\n} // the sum of the first 10 squares\n",
        "text": "```swift\nnumbers.sort { $0 < $1 }\n\nfunc sum(from: Int, to: Int, f: (Int) -> (Int)) -> Int {\n    var sum = 0\n    for i in from...to {\n        sum += f(i)\n    }\n    return sum\n}\n\nsum(1, 10) {\n    $0 \n} // the sum of the first 10 numbers \n \nsum(1, 10) {\n    $0 * $0\n} // the sum of the first 10 squares\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n",
        "text": "```swift\n// a closure that take one Int and return an Int\nvar double: (Int) -> (Int) = { x in\n    return 2 * x\n}\n\ndouble(2) // 4\n\n// you can pass closures in your code, for example to other variables\nvar alsoDouble = double\n\nalsoDouble(3) // 6\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "array.sort { $0 < $1 } \n",
        "text": "```swift\narray.sort { $0 < $1 } \n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "[ x1, x2, ... , xn].map(f) -> [f(x1), f(x2), ... , f(xn)]\n",
        "text": "```\n[ x1, x2, ... , xn].map(f) -> [f(x1), f(x2), ... , f(xn)]\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "[1, 2, 3] -> [\"1\", \"2\", \"3\"]\n",
        "text": "```\n[1, 2, 3] -> [\"1\", \"2\", \"3\"]\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3]\n\nvar strings: [String] = []\n\nfor number in numbers {\n    strings.append(\"\\(number)\")\n}\n",
        "text": "```swift\nvar numbers = [1, 2, 3]\n\nvar strings: [String] = []\n\nfor number in numbers {\n    strings.append(\"\\(number)\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3]\n\nvar strings = numbers.map { \"\\($0)\" }\n",
        "text": "```swift\nvar numbers = [1, 2, 3]\n\nvar strings = numbers.map { \"\\($0)\" }\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nvar evenNumbers = numbers.filter { $0 % 2 == 0 }\n// evenNumbers = [2, 4, 6, 8]\n",
        "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nvar evenNumbers = numbers.filter { $0 % 2 == 0 }\n// evenNumbers = [2, 4, 6, 8]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var oddNumbers = numbers.filter { $0 % 2 == 1 }\n// oddNumbers = [1, 3, 5, 7]\n",
        "text": "```swift\nvar oddNumbers = numbers.filter { $0 % 2 == 1 }\n// oddNumbers = [1, 3, 5, 7]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0) { $0 + $1 } // 15\n",
        "text": "```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0) { $0 + $1 } // 15\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0, +) // 15\n",
        "text": "```swift\nvar numbers = [1, 2, 3, 4, 5]\n\nvar sum = numbers.reduce(0, +) // 15\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 9.1 K Times\n\nWrite a function named `applyKTimes` that takes an integer `K` and a `closure` and calls the closure `K` times. The closure will not take any parameters and will not have a return value.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that you can call a closure just like a regular function.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n[/spoiler]\n\n",
        "text": "### 9.1 K Times\n\nWrite a function named `applyKTimes` that takes an integer `K` and a `closure` and calls the closure `K` times. The closure will not take any parameters and will not have a return value.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that you can call a closure just like a regular function.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n[/spoiler]\n\n",
        "name": "K Times",
        "title": "9.1 K Times",
        "id": "1",
        "problemStatement": "### 9.1 K Times\n\nWrite a function named `applyKTimes` that takes an integer `K` and a `closure` and calls the closure `K` times. The closure will not take any parameters and will not have a return value.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func applyKTimes(K: Int, _ closure: () -> ())\n",
                "text": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "applyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n",
                "text": "```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "We Heart Swift\nWe Heart Swift\nWe Heart Swift\n",
                "text": "```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\n",
              "Output": "```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "applyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n",
                "text": "```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Tic\nTac\nTic\nTac\n",
                "text": "```\nTic\nTac\nTic\nTac\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\n",
              "Output": "```\nTic\nTac\nTic\nTac\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Remember that you can call a closure just like a regular function.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that you can call a closure just like a regular function.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n",
                "text": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func applyKTimes(K: Int, _ closure: () -> ())\n",
                "text": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ())\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\nOutput:\n```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "applyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n",
                "text": "```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "We Heart Swift\nWe Heart Swift\nWe Heart Swift\n",
                "text": "```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\napplyKTimes(3) { \n    print(\"We Heart Swift\")\n}\n```\n\n",
              "Output": "```\nWe Heart Swift\nWe Heart Swift\nWe Heart Swift\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction call: \n```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\nOutput:\n```\nTic\nTac\nTic\nTac\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "applyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n",
                "text": "```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Tic\nTac\nTic\nTac\n",
                "text": "```\nTic\nTac\nTic\nTac\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function call": "```swift\napplyKTimes(2) { \n    print(\"Tic\")\n    print(\"Tac\")\n}\n```\n\n",
              "Output": "```\nTic\nTac\nTic\nTac\n```\n\n"
            },
            "section_titles": [
              "Function call",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Remember that you can call a closure just like a regular function.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that you can call a closure just like a regular function.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n",
                "text": "```swift\nfunc applyKTimes(K: Int, _ closure: () -> ()) {\n    for _ in 1...K {\n        closure()\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo solve this problem we need to call the passes `closure` `K` times. We can do this in many ways - as seen in the loops chapter.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_1",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.2 Div3\n\nUse `filter` to create an array called `multiples` that contains all the multiples of 3 from `numbers` and then print it.\n\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThink of the condition the numbers have to satisfy so that they're divisible by `3`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n[/spoiler]\n\n",
        "text": "### 9.2 Div3\n\nUse `filter` to create an array called `multiples` that contains all the multiples of 3 from `numbers` and then print it.\n\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThink of the condition the numbers have to satisfy so that they're divisible by `3`.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']\nTo select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n[/spoiler]\n\n",
        "name": "Div3",
        "title": "9.2 Div3",
        "id": "2",
        "problemStatement": "### 9.2 Div3\n\nUse `filter` to create an array called `multiples` that contains all the multiples of 3 from `numbers` and then print it.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\n// your code here\n",
            "text": "```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = [3, 6, 9, 3, 12]\n",
                "text": "```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\n",
              "Expected values": "```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [3, 3, 27, 3, 99]\n",
                "text": "```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = [3, 3, 27, 3, 99]\n",
                "text": "```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\n",
              "Expected values": "```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [2, 4, 8, 16, 32, 128, 1]\n",
                "text": "```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = []\n",
                "text": "```swift\nmultiples = []\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\n",
              "Expected values": "```swift\nmultiples = []\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "Think of the condition the numbers have to satisfy so that they're divisible by `3`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThink of the condition the numbers have to satisfy so that they're divisible by `3`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n",
                "text": "```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\nExpected values:\n```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = [3, 6, 9, 3, 12]\n",
                "text": "```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n```\n\n",
              "Expected values": "```swift\nmultiples = [3, 6, 9, 3, 12]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\nExpected values:\n```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [3, 3, 27, 3, 99]\n",
                "text": "```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = [3, 3, 27, 3, 99]\n",
                "text": "```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [3, 3, 27, 3, 99]\n```\n\n",
              "Expected values": "```swift\nmultiples = [3, 3, 27, 3, 99]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n",
            "text": "[spoiler title='Example 3' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\nExpected values:\n```swift\nmultiples = []\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [2, 4, 8, 16, 32, 128, 1]\n",
                "text": "```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "multiples = []\n",
                "text": "```swift\nmultiples = []\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [2, 4, 8, 16, 32, 128, 1]\n```\n\n",
              "Expected values": "```swift\nmultiples = []\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Think of the condition the numbers have to satisfy so that they're divisible by `3`.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThink of the condition the numbers have to satisfy so that they're divisible by `3`.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n",
                "text": "```swift\nlet numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\nlet multiples = numbers.filter { $0 % 3 == 0 }\n\nprint(multiples)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n",
            "text": "[spoiler title='Explanation' collapse_link='true']\nTo select only the multiples of 3 from `numbers` we can `filter` it using a closure that will return `true` for numbers that are divisible with 3 and `false` otherwise. \n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_2",
        "compileCode": true,
        "code": "let numbers = [1, 2, 3, 4, 6, 8, 9, 3, 12, 11]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.3 Max\n\nFind the largest number from `numbers` and then print it. Use `reduce` to solve this exercise.\n\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nWhat would be the initial value for our reduce function?\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow can you \"combine\" 2 numbers to get the maximum between them?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n[/spoiler]\n\n",
        "text": "### 9.3 Max\n\nFind the largest number from `numbers` and then print it. Use `reduce` to solve this exercise.\n\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nWhat would be the initial value for our reduce function?\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nHow can you \"combine\" 2 numbers to get the maximum between them?\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n[/spoiler]\n\n",
        "name": "Max",
        "title": "9.3 Max",
        "id": "3",
        "problemStatement": "### 9.3 Max\n\nFind the largest number from `numbers` and then print it. Use `reduce` to solve this exercise.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\n// your code here\n",
            "text": "```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n",
                "text": "```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "9\n",
                "text": "```\n9\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\n",
              "Output": "```\n9\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "What would be the initial value for our reduce function?\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nWhat would be the initial value for our reduce function?\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How can you \"combine\" 2 numbers to get the maximum between them?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow can you \"combine\" 2 numbers to get the maximum between them?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n",
                "text": "```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\nOutput:\n```\n9\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n",
                "text": "```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "9\n",
                "text": "```\n9\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n```\n\n",
              "Output": "```\n9\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "What would be the initial value for our reduce function?\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nWhat would be the initial value for our reduce function?\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "How can you \"combine\" 2 numbers to get the maximum between them?\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nHow can you \"combine\" 2 numbers to get the maximum between them?\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n",
                "text": "```swift\nlet numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\nlet max = numbers.reduce(numbers[0]) {\n    if $0 > $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\n\nprint(max) // 9\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\nThe closure provided to `reduce` takes two parameters, the first one is the partial result and the second one will be an element from the array. The closure will be called for each element once in order.\nThe example shown for the sum of the element from an array used the first parameter to store the partial result of the sum. To get the maximum value the partial result will be the biggest number so far. When handling a new number if it is bigger than the partail maximum then this number will be the new partial maximum otherwise it will remain unchanged. \n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_3",
        "compileCode": true,
        "code": "let numbers = [4, 7, 1, 9, 6, 5, 6, 9]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.4 Join\n\nJoin all the strings from `strings` into one using `reduce`. Add spaces in between strings. Print your result.\n\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"] \n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\n\nWhat would be the initial value for our reduce function?\n\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\n\nHow can you combine the strings so that they have spaces between them?\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nThis is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n[/spoiler]\n\n",
        "text": "### 9.4 Join\n\nJoin all the strings from `strings` into one using `reduce`. Add spaces in between strings. Print your result.\n\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"] \n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\n\nWhat would be the initial value for our reduce function?\n\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\n\nHow can you combine the strings so that they have spaces between them?\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nThis is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n[/spoiler]\n\n",
        "name": "Join",
        "title": "9.4 Join",
        "id": "4",
        "problemStatement": "### 9.4 Join\n\nJoin all the strings from `strings` into one using `reduce`. Add spaces in between strings. Print your result.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "let strings = [\"We\", \"Heart\", \"Swift\"] \n\n// your code here\n",
            "text": "```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"] \n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"We\", \"Heart\", \"Swift\"]\n",
                "text": "```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"We Heart Swift\"\n",
                "text": "```\n\"We Heart Swift\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\n",
              "Output": "```\n\"We Heart Swift\"\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"lonely\"]\n",
                "text": "```swift\nvar strings = [\"lonely\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"lonely\"\n",
                "text": "```\n\"lonely\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"lonely\"]\n```\n\n",
              "Output": "```\n\"lonely\"\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWhat would be the initial value for our reduce function?\n\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\n\nWhat would be the initial value for our reduce function?\n\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "\nHow can you combine the strings so that they have spaces between them?\n\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\n\nHow can you combine the strings so that they have spaces between them?\n\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n",
                "text": "```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "This is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nThis is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\nOutput:\n```\n\"We Heart Swift\"\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"We\", \"Heart\", \"Swift\"]\n",
                "text": "```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"We Heart Swift\"\n",
                "text": "```\n\"We Heart Swift\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"We\", \"Heart\", \"Swift\"]\n```\n\n",
              "Output": "```\n\"We Heart Swift\"\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar strings = [\"lonely\"]\n```\n\nOutput:\n```\n\"lonely\"\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"lonely\"]\n",
                "text": "```swift\nvar strings = [\"lonely\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "\"lonely\"\n",
                "text": "```\n\"lonely\"\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"lonely\"]\n```\n\n",
              "Output": "```\n\"lonely\"\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "\nWhat would be the initial value for our reduce function?\n\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\n\nWhat would be the initial value for our reduce function?\n\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "\nHow can you combine the strings so that they have spaces between them?\n\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\n\nHow can you combine the strings so that they have spaces between them?\n\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "let strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n",
                "text": "```swift\nlet strings = [\"We\", \"Heart\", \"Swift\"]\n\nlet string = strings.reduce(\"\") {\n    if $0 == \"\" {\n        return $1\n    } else {\n        return $0 + \" \" + $1\n    }\n}\n\nprint(string)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "This is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nThis is another example of using `reduce`. We are going to start with an empty string `\"\"`. When handling a new element from `strings` we are going to have two cases: \n1) the partial result is an empty string -> it's the first one - then we return it as the partial result\n2) the partial result is not empty -> it's not the first one - we have to add a space (`\" \"`) and the current string to the partial result and return it\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_4",
        "compileCode": true,
        "code": "let strings = [\"We\", \"Heart\", \"Swift\"] \n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.5 Sorting\n\nSort `numbers` in ascending order by the number of divisors. If two numbers have the same number of divisors the order in which they appear in the sorted array does not matter.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to pass a closure that tells you how the numbers should be compared.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n[/spoiler]\n\n",
        "text": "### 9.5 Sorting\n\nSort `numbers` in ascending order by the number of divisors. If two numbers have the same number of divisors the order in which they appear in the sorted array does not matter.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to pass a closure that tells you how the numbers should be compared.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \n\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n[/spoiler]\n\n",
        "name": "Sorting",
        "title": "9.5 Sorting",
        "id": "5",
        "problemStatement": "### 9.5 Sorting\n\nSort `numbers` in ascending order by the number of divisors. If two numbers have the same number of divisors the order in which they appear in the sorted array does not matter.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
            "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n",
                "text": "```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Expected values": "```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to pass a closure that tells you how the numbers should be compared.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to pass a closure that tells you how the numbers should be compared.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nExpected values:\n```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "numbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n",
                "text": "```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Expected values": "```\nnumbers = [1, 2, 3, 5, 4, 6]\n// 1 has one divisor\n// 2, 3 and 5 have 2\n// 4 has 3 divisors\n// 6 has 4 divisors\n\n// [1, 5, 2, 3, 4, 6] would also have been a valid solution \n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to pass a closure that tells you how the numbers should be compared.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to pass a closure that tells you how the numbers should be compared.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nnumbers.sortInPlace({ x, y in\n    func countDivisors(number: Int) -> Int {\n        var count = 0\n        for i in 1...number {\n            if number % i == 0 {\n                ++count\n            }\n        }\n        return count\n    }\n    return countDivisors(x) < countDivisors(y)\n})\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \n\nTo sort an array with the `sortInPlace` function we need a compare function or closure. To sort `numbers` in ascending order by the number of divisors are are goin to make a closure that compares the number of divisors of the first number with the one of the second. \nTo avoid code duplication - we need to count the number of divisors of two numbers - we can use a nested function inside the closure.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_5",
        "compileCode": true,
        "code": "var numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.6 Chains\n\nFind the sum of the squares of all the odd numbers from `numbers` and then print it. Use `map`, `filter` and `reduce` to solve this problem.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThe order in which you apply the `map`, `filter` and `reduce` operations is important.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nTo solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n[/spoiler]\n\n",
        "text": "### 9.6 Chains\n\nFind the sum of the squares of all the odd numbers from `numbers` and then print it. Use `map`, `filter` and `reduce` to solve this problem.\n\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nThe order in which you apply the `map`, `filter` and `reduce` operations is important.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nTo solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n[/spoiler]\n\n",
        "name": "Chains",
        "title": "9.6 Chains",
        "id": "6",
        "problemStatement": "### 9.6 Chains\n\nFind the sum of the squares of all the odd numbers from `numbers` and then print it. Use `map`, `filter` and `reduce` to solve this problem.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
            "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "25 // 1 + 9 + 25 -> 25\n",
                "text": "```\n25 // 1 + 9 + 25 -> 25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Output": "```\n25 // 1 + 9 + 25 -> 25\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [2, 4, 6]\n",
                "text": "```swift\nvar numbers = [2, 4, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0 // none of the numbers are odd\n",
                "text": "```\n0 // none of the numbers are odd\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [2, 4, 6]\n```\n\n",
              "Output": "```\n0 // none of the numbers are odd\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "The order in which you apply the `map`, `filter` and `reduce` operations is important.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThe order in which you apply the `map`, `filter` and `reduce` operations is important.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nTo solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\nOutput:\n```\n25 // 1 + 9 + 25 -> 25\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "25 // 1 + 9 + 25 -> 25\n",
                "text": "```\n25 // 1 + 9 + 25 -> 25\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n```\n\n",
              "Output": "```\n25 // 1 + 9 + 25 -> 25\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput:\n```swift\nvar numbers = [2, 4, 6]\n```\n\nOutput:\n```\n0 // none of the numbers are odd\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [2, 4, 6]\n",
                "text": "```swift\nvar numbers = [2, 4, 6]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "0 // none of the numbers are odd\n",
                "text": "```\n0 // none of the numbers are odd\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [2, 4, 6]\n```\n\n",
              "Output": "```\n0 // none of the numbers are odd\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "The order in which you apply the `map`, `filter` and `reduce` operations is important.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nThe order in which you apply the `map`, `filter` and `reduce` operations is important.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 4, 5, 6]\n\nlet sum = numbers.filter {\n        $0 % 2 == 1 //select all the odd numbers\n    }.map {\n        $0 * $0 // square them\n    }.reduce(0, combine: +) // get their sum\n\nprint(sum)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nTo solve this problem we shoudl solve each step separately.\nFirst of all let's get all the odd numbers from `numbers`: this is similar to the multiples of 3 problem. We are goin to use `filter` and a closure that returns `true` if a number is odd.\nThen we have to square all the numbers. We can do this using `map`.\nIn the end we need to add all the numbers - this can be done with `.reduce(0, combine: +)`.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_6",
        "compileCode": true,
        "code": "var numbers = [1, 2, 3, 4, 5, 6]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 9.7 For each\n\nImplement a function `forEach(array: [Int], _ closure: Int -> ())` that takes an array of integers and a closure and runs the closure for each element of the array.\n\n[spoiler title='Example Usage' collapse_link='true']  \n```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nThis exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n[/spoiler]\n\n",
        "text": "### 9.7 For each\n\nImplement a function `forEach(array: [Int], _ closure: Int -> ())` that takes an array of integers and a closure and runs the closure for each element of the array.\n\n[spoiler title='Example Usage' collapse_link='true']  \n```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nThis exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n[/spoiler]\n\n",
        "name": "For each",
        "title": "9.7 For each",
        "id": "7",
        "problemStatement": "### 9.7 For each\n\nImplement a function `forEach(array: [Int], _ closure: Int -> ())` that takes an array of integers and a closure and runs the closure for each element of the array.\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n",
            "text": "[spoiler title='Example Usage' collapse_link='true']  \n```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example Usage",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n",
                "text": "```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func forEach(array: [Int], _ closure: Int -> ())\n",
                "text": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "forEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n",
                "text": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n4\n5\n",
                "text": "```\n2\n3\n4\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function input": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\n",
              "Output": "```\n2\n3\n4\n5\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "forEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n",
                "text": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n9\n16\n",
                "text": "```\n1\n4\n9\n16\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function input": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\n",
              "Output": "```\n1\n4\n9\n16\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n",
                "text": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "This exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nThis exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func forEach(array: [Int], _ closure: Int -> ())\n",
                "text": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ())\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\nOutput:\n```\n2\n3\n4\n5\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "forEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n",
                "text": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "2\n3\n4\n5\n",
                "text": "```\n2\n3\n4\n5\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function input": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 + 1)\n}\n```\n\n",
              "Output": "```\n2\n3\n4\n5\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\nOutput:\n```\n1\n4\n9\n16\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "forEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n",
                "text": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1\n4\n9\n16\n",
                "text": "```\n1\n4\n9\n16\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Function input": "```swift\nforEach([1, 2, 3, 4]) {\n    print($0 * $0)\n}\n```\n\n",
              "Output": "```\n1\n4\n9\n16\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Output"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n",
                "text": "```swift\nfunc forEach(array: [Int], _ closure: Int -> ()) {\n    for number in array {\n        closure(number)\n    }\n}\n``` \n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "This exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nThis exercise is similar with the first one from the chapter. All we need to do is iterate over the given array and call the closure with each element.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_7",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [
          {
            "type": "spoiler",
            "content": "```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n",
            "text": "[spoiler title='Example Usage' collapse_link='true']  \n```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n[/spoiler]\n",
            "params": {
              "title": "Example Usage",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n",
                "text": "```swift\nvar array = [1,2,3,4]\nforEach(array) {\n\tprint($0 + 1)\n}\n// This will be printed:\n// 2\n// 3\n// 4\n// 5\n```\n",
                "language": "swift"
              }
            ]
          }
        ]
      },
      {
        "type": "exercise",
        "content": "### 9.8 Combine arrays\n\nImplement a function `combineArrays` that takes 2 arrays and a closure that combines 2 Ints into a single Int. The function combines the two arrays into a single array using the provided closure.  \nAssume that the 2 arrays have equal length.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to iterate both arrays at the same time using an index.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nTo combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n[/spoiler]\n\n\n",
        "text": "### 9.8 Combine arrays\n\nImplement a function `combineArrays` that takes 2 arrays and a closure that combines 2 Ints into a single Int. The function combines the two arrays into a single array using the provided closure.  \nAssume that the 2 arrays have equal length.\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n\n[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to iterate both arrays at the same time using an index.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n[/spoiler]\n\n[spoiler title='Explanation' collapse_link='true']  \nTo combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n[/spoiler]\n\n\n",
        "name": "Combine arrays",
        "title": "9.8 Combine arrays",
        "id": "8",
        "problemStatement": "### 9.8 Combine arrays\n\nImplement a function `combineArrays` that takes 2 arrays and a closure that combines 2 Ints into a single Int. The function combines the two arrays into a single array using the provided closure.  \nAssume that the 2 arrays have equal length.\n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n",
                "text": "```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n",
                "text": "```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5,10,15,12]\n",
                "text": "```swift\n[5,10,15,12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function input": "```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\n",
              "Function output": "```swift\n[5,10,15,12]\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n",
                "text": "```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5,14,77,13]\n",
                "text": "```swift\n[5,14,77,13]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function input": "```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\n",
              "Function output": "```swift\n[5,14,77,13]\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to iterate both arrays at the same time using an index.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to iterate both arrays at the same time using an index.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n",
                "text": "```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "To combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nTo combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "chapterId": "9",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']  \n```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n",
                "text": "```swift\nfunc combineArrays(array1: [Int], \n  \t\t   _ array2: [Int], \n  \t\t   _ closure: (Int,Int) -> Int) -> [Int]\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\nFunction output:\n```swift\n[5,10,15,12]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n",
                "text": "```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5,10,15,12]\n",
                "text": "```swift\n[5,10,15,12]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function input": "```swift\nvar array1 = [1,2,3,4]\nvar array2 = [5,5,5,3]\ncombineArrays(array1,array2) {\n    $0 * $1\n}\n```\n\n",
              "Function output": "```swift\n[5,10,15,12]\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nFunction input:\n```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\nFunction output:\n```swift\n[5,14,77,13]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n",
                "text": "```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "[5,14,77,13]\n",
                "text": "```swift\n[5,14,77,13]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function input": "```swift\nvar array1 = [5,14,77,12]\nvar array2 = [1,5,3,13]\ncombineArrays(array1,array2) {\n    return max($0,$1)\n}\n```\n\n",
              "Function output": "```swift\n[5,14,77,13]\n```\n\n"
            },
            "section_titles": [
              "Function input",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to iterate both arrays at the same time using an index.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to iterate both arrays at the same time using an index.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n",
                "text": "```swift\n\nfunc combineArrays(array1: [Int], \n                   _ array2: [Int], \n                   _ closure: (Int,Int) -> Int) -> [Int] {\n\tvar result: [Int] = []\n\tfor (var i = 0; i < array1.count; i++) {\n\t\tresult.append(closure(array1[i],array2[i]))\n\t}\n\treturn result\n}\n\n``` \n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "To combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n",
            "text": "[spoiler title='Explanation' collapse_link='true']  \nTo combine two arrays we need to iterate through them both at the same time and call the closure with the respective elements. We also need to save the results from each call and return it in the end.\n[/spoiler]\n",
            "params": {
              "title": "Explanation",
              "collapse_link": "true"
            }
          }
        ],
        "playgroundName": "Exercise9_8",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 10. Tuples & Enums\n\n#### Tuples\n\nA tuple is a group of zero or more values represented as one value. \n\nFor example `(\"John\", \"Smith\")` holds the first and last name of a person. You can access the inner values using the dot(`.`) notation followed by the index of the value:\n\n```swift\nvar person = (\"John\", \"Smith\")\n\nvar firstName = person.0 // John\nvar lastName = person.1 // Smith\n```\n\n##### Named elements\n\nYou can name the elements from a tuple and use those names to refer to them. An element name is an identifier followed by a colon(:). \n\n```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar firstName = person.firstName // John\nvar lastName = person.lastName // Smith\n```\n\n##### Creating a tuple\n\nYou can declare a tuple like any other variable or constant. To initialize it you will need a another tuple or a tuple literal. A tuple literal is a list of values separated by commas between a pair of parentheses. You can use the dot notation to change the values from a tuple if it's declared as a variable.\n\n```swift\nvar point = (0, 0)\n\npoint.0 = 10\npoint.1 = 15\n\npoint // (10, 15)\n```\n\n**Note**: Tuple are value types. When you initialize a variable tuple with another one it will actually create a copy.\n\n```swift\nvar origin = (x: 0, y: 0)\n\nvar point = origin\npoint.x = 3\npoint.y = 5\n\nprint(origin) // (0, 0)\nprint(point) // (3, 5)\n```\n\n##### Types\n\nThe type of a tuple is determined by the values it has. So `(\"tuple\", 1, true)` will be of type `(String, Int, Bool)`. You can have tuples with any combination of zero or more types. \n\nIf the tuple has only one element then the type of that tuple is the type of the element. `(Int)` is the same as `Int`. This has a strange implication: in swift every variable or constant is a tuple.\n\n```swift\nvar number = 123\n\nprint(number) // 123\nprint(number.0) // 123\nprint(number.0.0) // 123\nprint(number.0.0.0) // 123\nprint(number.0.0.0.0.0.0.0) // 123\n```\n\n##### Empty tuple \n\n`()` is the empty tuple - it has no elements. It also represents the `Void` type.\n\n\n##### Decomposing Tuples\n\n```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar (firstName, lastName) = person\n\nvar (onlyFirstName, _) = person\nvar (_, onlyLastName) = person\n```\n\n**Note**: the  `_` means \"I don't care about that value\"\n\n##### Multiple assignment\n\nYou can use tuples to initialize more than one variable on a single line:\n\nInstead of:\n```swift\nvar a = 1\nvar b = 2\nvar c = 3\n```\n\nyou can write:\n```swift\nvar (a, b, c) = (1, 2, 3)\n```\n\nInstead of:\n```\na = 1\nb = 2\nc = 3\n```\n\nyou can write:\n```\n(a, b, c) = (1, 2, 3)\n```\n\nAnd yes! One line swap:\n```\n(a, b) = (b, a)\n```\n\n\n##### Returning multiple values\n\nYou can return multiple values from a function if you set the result type to a tuple. Here is a simple example of a function that return the quotient and the remainder of the division of `a` by `b`.\n\n```swift\nfunc divmod(a: Int, _ b:Int) -> (Int, Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (2, 1)\ndivmod(5, 2) // (2, 1)\ndivmod(12, 4) // (3, 0)\n```\n\nOr the named version:\n\n```swift\nfunc divmod(a: Int, _ b:Int) -> (quotient: Int, remainder: Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (quotient: 2, remainder:1)\ndivmod(5, 2) // (quotient: 2, remainder:1)\ndivmod(12, 4) // (quotient: 3, remainder:0)\n```\n\n#### Enums\n\nAn enumeration is a data type consisting of a set of named values, called members. \n\n##### Defining an enumeration\n\nYou can define a new enumeration using the `enum` keyword followed by it's name. The member values are introduced using the `case` keyword.\n\n```swift\nenum iOSDeviceType {\n    case iPhone\n    case iPad\n    case iWatch\n}\n\nvar myDevice = iOSDeviceType.iPhone\n```\n\n##### Dot syntax\n\nIf the type of an enumeration is known or can be inferred then you can use the dot syntax for members.\n\n```swift\n// in this case the type is known\nvar myDevice: iOSDeviceType = .iPhone \n\n// in this case the type can be inferred\nif myDevice == .iPhone {\n    print(\"I have an iPhone!\")\n}\n```\n\n##### Associated Values\n\nSwift enumerations can store associated values of any type, and the value type can be different for each member. For example you might want to store a device model for the iPhone and iPad (like `\"mini\"` for the iPad, or `\"6 Plus\"` for the iPhone).\n\n```swift\nenum iOSDeviceType {\n    case iPhone(String)\n    case iPad(String)\n    case iWatch\n}\n```\n\nYou can get the associated values by using a switch statement:\n\n```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\n\nswitch myDevice {\ncase .iPhone(let model):\n    print(\"iPhone \\(model)\")\ncase .iPad(let model):\n    print(\"iPad \\(model)\")\ncase .iWatch:\n    print(\"iWatch\")\ndefault:\n    print(\"not an iOS device\")\n}\n\n// iPhone 6\n```\n\n**Note**: Swift does not provide equality operators automatically for enumerations with associated values. You might be tempted to use nested switch statements in order to test equality. Don't forget the tuple pattern!\n\n```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\nvar six = iOSDeviceType.iPhone(\"6\")\nvar sixPlus = iOSDeviceType.iPhone(\"6 Plus\")\n\n// testing equlity with == wont work\n// myDevice == six\n// myDevice == sixPlus\n\nfunc sameDevice(firstDevice: iOSDeviceType, \n        secondDevice: iOSDeviceType) -> Bool {\n    switch (firstDevice, secondDevice) {\n    case (.iPhone(let a), .iPhone(let b)) where a == b:\n        return true\n    case (.iPad(let a), .iPad(let b)) where a == b:\n        return true\n    case (.iWatch, .iWatch):\n        return true\n    default:\n        return false\n    }\n}\n\nprint(sameDevice(myDevice, six)) // true\nprint(sameDevice(myDevice, sixPlus)) // false\nprint(sameDevice(myDevice, .iWatch)) // false\n```\n\n##### Raw Values\n\nEnums can have a raw value (a primitive type - Int, String, Character, etc.) associated with each member. The raw value will be of the same type for all members and the value for each member must be unique. When integers are use they autoincrement is a value is not defined for a member.\n\n```swift\nenum Direction: Int {\n    case Up = 1\n    case Down // will have the raw value 2\n    case Left // will have the raw value 3\n    case Right // will have the raw value 4\n}\n```\n\nYou can use raw values to create a enumeration value.\n\n```swift\nvar direction = Direction(rawValue: 4) // .Right\n\nprint(direction) // Optional((Enum Value))\n```\n\n**Note**: Because not all raw values have an associated member value the raw value initializer is a failable initializer. The type of `direction` is `Direction?` not `Direction`.\n\n\n",
    "text": "## 10. Tuples & Enums\n\n#### Tuples\n\nA tuple is a group of zero or more values represented as one value. \n\nFor example `(\"John\", \"Smith\")` holds the first and last name of a person. You can access the inner values using the dot(`.`) notation followed by the index of the value:\n\n```swift\nvar person = (\"John\", \"Smith\")\n\nvar firstName = person.0 // John\nvar lastName = person.1 // Smith\n```\n\n##### Named elements\n\nYou can name the elements from a tuple and use those names to refer to them. An element name is an identifier followed by a colon(:). \n\n```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar firstName = person.firstName // John\nvar lastName = person.lastName // Smith\n```\n\n##### Creating a tuple\n\nYou can declare a tuple like any other variable or constant. To initialize it you will need a another tuple or a tuple literal. A tuple literal is a list of values separated by commas between a pair of parentheses. You can use the dot notation to change the values from a tuple if it's declared as a variable.\n\n```swift\nvar point = (0, 0)\n\npoint.0 = 10\npoint.1 = 15\n\npoint // (10, 15)\n```\n\n**Note**: Tuple are value types. When you initialize a variable tuple with another one it will actually create a copy.\n\n```swift\nvar origin = (x: 0, y: 0)\n\nvar point = origin\npoint.x = 3\npoint.y = 5\n\nprint(origin) // (0, 0)\nprint(point) // (3, 5)\n```\n\n##### Types\n\nThe type of a tuple is determined by the values it has. So `(\"tuple\", 1, true)` will be of type `(String, Int, Bool)`. You can have tuples with any combination of zero or more types. \n\nIf the tuple has only one element then the type of that tuple is the type of the element. `(Int)` is the same as `Int`. This has a strange implication: in swift every variable or constant is a tuple.\n\n```swift\nvar number = 123\n\nprint(number) // 123\nprint(number.0) // 123\nprint(number.0.0) // 123\nprint(number.0.0.0) // 123\nprint(number.0.0.0.0.0.0.0) // 123\n```\n\n##### Empty tuple \n\n`()` is the empty tuple - it has no elements. It also represents the `Void` type.\n\n\n##### Decomposing Tuples\n\n```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar (firstName, lastName) = person\n\nvar (onlyFirstName, _) = person\nvar (_, onlyLastName) = person\n```\n\n**Note**: the  `_` means \"I don't care about that value\"\n\n##### Multiple assignment\n\nYou can use tuples to initialize more than one variable on a single line:\n\nInstead of:\n```swift\nvar a = 1\nvar b = 2\nvar c = 3\n```\n\nyou can write:\n```swift\nvar (a, b, c) = (1, 2, 3)\n```\n\nInstead of:\n```\na = 1\nb = 2\nc = 3\n```\n\nyou can write:\n```\n(a, b, c) = (1, 2, 3)\n```\n\nAnd yes! One line swap:\n```\n(a, b) = (b, a)\n```\n\n\n##### Returning multiple values\n\nYou can return multiple values from a function if you set the result type to a tuple. Here is a simple example of a function that return the quotient and the remainder of the division of `a` by `b`.\n\n```swift\nfunc divmod(a: Int, _ b:Int) -> (Int, Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (2, 1)\ndivmod(5, 2) // (2, 1)\ndivmod(12, 4) // (3, 0)\n```\n\nOr the named version:\n\n```swift\nfunc divmod(a: Int, _ b:Int) -> (quotient: Int, remainder: Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (quotient: 2, remainder:1)\ndivmod(5, 2) // (quotient: 2, remainder:1)\ndivmod(12, 4) // (quotient: 3, remainder:0)\n```\n\n#### Enums\n\nAn enumeration is a data type consisting of a set of named values, called members. \n\n##### Defining an enumeration\n\nYou can define a new enumeration using the `enum` keyword followed by it's name. The member values are introduced using the `case` keyword.\n\n```swift\nenum iOSDeviceType {\n    case iPhone\n    case iPad\n    case iWatch\n}\n\nvar myDevice = iOSDeviceType.iPhone\n```\n\n##### Dot syntax\n\nIf the type of an enumeration is known or can be inferred then you can use the dot syntax for members.\n\n```swift\n// in this case the type is known\nvar myDevice: iOSDeviceType = .iPhone \n\n// in this case the type can be inferred\nif myDevice == .iPhone {\n    print(\"I have an iPhone!\")\n}\n```\n\n##### Associated Values\n\nSwift enumerations can store associated values of any type, and the value type can be different for each member. For example you might want to store a device model for the iPhone and iPad (like `\"mini\"` for the iPad, or `\"6 Plus\"` for the iPhone).\n\n```swift\nenum iOSDeviceType {\n    case iPhone(String)\n    case iPad(String)\n    case iWatch\n}\n```\n\nYou can get the associated values by using a switch statement:\n\n```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\n\nswitch myDevice {\ncase .iPhone(let model):\n    print(\"iPhone \\(model)\")\ncase .iPad(let model):\n    print(\"iPad \\(model)\")\ncase .iWatch:\n    print(\"iWatch\")\ndefault:\n    print(\"not an iOS device\")\n}\n\n// iPhone 6\n```\n\n**Note**: Swift does not provide equality operators automatically for enumerations with associated values. You might be tempted to use nested switch statements in order to test equality. Don't forget the tuple pattern!\n\n```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\nvar six = iOSDeviceType.iPhone(\"6\")\nvar sixPlus = iOSDeviceType.iPhone(\"6 Plus\")\n\n// testing equlity with == wont work\n// myDevice == six\n// myDevice == sixPlus\n\nfunc sameDevice(firstDevice: iOSDeviceType, \n        secondDevice: iOSDeviceType) -> Bool {\n    switch (firstDevice, secondDevice) {\n    case (.iPhone(let a), .iPhone(let b)) where a == b:\n        return true\n    case (.iPad(let a), .iPad(let b)) where a == b:\n        return true\n    case (.iWatch, .iWatch):\n        return true\n    default:\n        return false\n    }\n}\n\nprint(sameDevice(myDevice, six)) // true\nprint(sameDevice(myDevice, sixPlus)) // false\nprint(sameDevice(myDevice, .iWatch)) // false\n```\n\n##### Raw Values\n\nEnums can have a raw value (a primitive type - Int, String, Character, etc.) associated with each member. The raw value will be of the same type for all members and the value for each member must be unique. When integers are use they autoincrement is a value is not defined for a member.\n\n```swift\nenum Direction: Int {\n    case Up = 1\n    case Down // will have the raw value 2\n    case Left // will have the raw value 3\n    case Right // will have the raw value 4\n}\n```\n\nYou can use raw values to create a enumeration value.\n\n```swift\nvar direction = Direction(rawValue: 4) // .Right\n\nprint(direction) // Optional((Enum Value))\n```\n\n**Note**: Because not all raw values have an associated member value the raw value initializer is a failable initializer. The type of `direction` is `Direction?` not `Direction`.\n\n\n",
    "name": "Tuples & Enums",
    "title": "Tuples & Enums",
    "id": "10",
    "codes": [
      {
        "type": "code",
        "content": "var person = (\"John\", \"Smith\")\n\nvar firstName = person.0 // John\nvar lastName = person.1 // Smith\n",
        "text": "```swift\nvar person = (\"John\", \"Smith\")\n\nvar firstName = person.0 // John\nvar lastName = person.1 // Smith\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var person = (firstName: \"John\", lastName: \"Smith\")\n\nvar firstName = person.firstName // John\nvar lastName = person.lastName // Smith\n",
        "text": "```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar firstName = person.firstName // John\nvar lastName = person.lastName // Smith\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var point = (0, 0)\n\npoint.0 = 10\npoint.1 = 15\n\npoint // (10, 15)\n",
        "text": "```swift\nvar point = (0, 0)\n\npoint.0 = 10\npoint.1 = 15\n\npoint // (10, 15)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var origin = (x: 0, y: 0)\n\nvar point = origin\npoint.x = 3\npoint.y = 5\n\nprint(origin) // (0, 0)\nprint(point) // (3, 5)\n",
        "text": "```swift\nvar origin = (x: 0, y: 0)\n\nvar point = origin\npoint.x = 3\npoint.y = 5\n\nprint(origin) // (0, 0)\nprint(point) // (3, 5)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var number = 123\n\nprint(number) // 123\nprint(number.0) // 123\nprint(number.0.0) // 123\nprint(number.0.0.0) // 123\nprint(number.0.0.0.0.0.0.0) // 123\n",
        "text": "```swift\nvar number = 123\n\nprint(number) // 123\nprint(number.0) // 123\nprint(number.0.0) // 123\nprint(number.0.0.0) // 123\nprint(number.0.0.0.0.0.0.0) // 123\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var person = (firstName: \"John\", lastName: \"Smith\")\n\nvar (firstName, lastName) = person\n\nvar (onlyFirstName, _) = person\nvar (_, onlyLastName) = person\n",
        "text": "```swift\nvar person = (firstName: \"John\", lastName: \"Smith\")\n\nvar (firstName, lastName) = person\n\nvar (onlyFirstName, _) = person\nvar (_, onlyLastName) = person\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var a = 1\nvar b = 2\nvar c = 3\n",
        "text": "```swift\nvar a = 1\nvar b = 2\nvar c = 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var (a, b, c) = (1, 2, 3)\n",
        "text": "```swift\nvar (a, b, c) = (1, 2, 3)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "a = 1\nb = 2\nc = 3\n",
        "text": "```\na = 1\nb = 2\nc = 3\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "(a, b, c) = (1, 2, 3)\n",
        "text": "```\n(a, b, c) = (1, 2, 3)\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "(a, b) = (b, a)\n",
        "text": "```\n(a, b) = (b, a)\n```\n",
        "language": "undefined"
      },
      {
        "type": "code",
        "content": "func divmod(a: Int, _ b:Int) -> (Int, Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (2, 1)\ndivmod(5, 2) // (2, 1)\ndivmod(12, 4) // (3, 0)\n",
        "text": "```swift\nfunc divmod(a: Int, _ b:Int) -> (Int, Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (2, 1)\ndivmod(5, 2) // (2, 1)\ndivmod(12, 4) // (3, 0)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "func divmod(a: Int, _ b:Int) -> (quotient: Int, remainder: Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (quotient: 2, remainder:1)\ndivmod(5, 2) // (quotient: 2, remainder:1)\ndivmod(12, 4) // (quotient: 3, remainder:0)\n",
        "text": "```swift\nfunc divmod(a: Int, _ b:Int) -> (quotient: Int, remainder: Int) {\n    return (a / b, a % b)\n}\n\ndivmod(7, 3) // (quotient: 2, remainder:1)\ndivmod(5, 2) // (quotient: 2, remainder:1)\ndivmod(12, 4) // (quotient: 3, remainder:0)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "enum iOSDeviceType {\n    case iPhone\n    case iPad\n    case iWatch\n}\n\nvar myDevice = iOSDeviceType.iPhone\n",
        "text": "```swift\nenum iOSDeviceType {\n    case iPhone\n    case iPad\n    case iWatch\n}\n\nvar myDevice = iOSDeviceType.iPhone\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// in this case the type is known\nvar myDevice: iOSDeviceType = .iPhone \n\n// in this case the type can be inferred\nif myDevice == .iPhone {\n    print(\"I have an iPhone!\")\n}\n",
        "text": "```swift\n// in this case the type is known\nvar myDevice: iOSDeviceType = .iPhone \n\n// in this case the type can be inferred\nif myDevice == .iPhone {\n    print(\"I have an iPhone!\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "enum iOSDeviceType {\n    case iPhone(String)\n    case iPad(String)\n    case iWatch\n}\n",
        "text": "```swift\nenum iOSDeviceType {\n    case iPhone(String)\n    case iPad(String)\n    case iWatch\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var myDevice = iOSDeviceType.iPhone(\"6\")\n\nswitch myDevice {\ncase .iPhone(let model):\n    print(\"iPhone \\(model)\")\ncase .iPad(let model):\n    print(\"iPad \\(model)\")\ncase .iWatch:\n    print(\"iWatch\")\ndefault:\n    print(\"not an iOS device\")\n}\n\n// iPhone 6\n",
        "text": "```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\n\nswitch myDevice {\ncase .iPhone(let model):\n    print(\"iPhone \\(model)\")\ncase .iPad(let model):\n    print(\"iPad \\(model)\")\ncase .iWatch:\n    print(\"iWatch\")\ndefault:\n    print(\"not an iOS device\")\n}\n\n// iPhone 6\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var myDevice = iOSDeviceType.iPhone(\"6\")\nvar six = iOSDeviceType.iPhone(\"6\")\nvar sixPlus = iOSDeviceType.iPhone(\"6 Plus\")\n\n// testing equlity with == wont work\n// myDevice == six\n// myDevice == sixPlus\n\nfunc sameDevice(firstDevice: iOSDeviceType, \n        secondDevice: iOSDeviceType) -> Bool {\n    switch (firstDevice, secondDevice) {\n    case (.iPhone(let a), .iPhone(let b)) where a == b:\n        return true\n    case (.iPad(let a), .iPad(let b)) where a == b:\n        return true\n    case (.iWatch, .iWatch):\n        return true\n    default:\n        return false\n    }\n}\n\nprint(sameDevice(myDevice, six)) // true\nprint(sameDevice(myDevice, sixPlus)) // false\nprint(sameDevice(myDevice, .iWatch)) // false\n",
        "text": "```swift\nvar myDevice = iOSDeviceType.iPhone(\"6\")\nvar six = iOSDeviceType.iPhone(\"6\")\nvar sixPlus = iOSDeviceType.iPhone(\"6 Plus\")\n\n// testing equlity with == wont work\n// myDevice == six\n// myDevice == sixPlus\n\nfunc sameDevice(firstDevice: iOSDeviceType, \n        secondDevice: iOSDeviceType) -> Bool {\n    switch (firstDevice, secondDevice) {\n    case (.iPhone(let a), .iPhone(let b)) where a == b:\n        return true\n    case (.iPad(let a), .iPad(let b)) where a == b:\n        return true\n    case (.iWatch, .iWatch):\n        return true\n    default:\n        return false\n    }\n}\n\nprint(sameDevice(myDevice, six)) // true\nprint(sameDevice(myDevice, sixPlus)) // false\nprint(sameDevice(myDevice, .iWatch)) // false\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "enum Direction: Int {\n    case Up = 1\n    case Down // will have the raw value 2\n    case Left // will have the raw value 3\n    case Right // will have the raw value 4\n}\n",
        "text": "```swift\nenum Direction: Int {\n    case Up = 1\n    case Down // will have the raw value 2\n    case Left // will have the raw value 3\n    case Right // will have the raw value 4\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var direction = Direction(rawValue: 4) // .Right\n\nprint(direction) // Optional((Enum Value))\n",
        "text": "```swift\nvar direction = Direction(rawValue: 4) // .Right\n\nprint(direction) // Optional((Enum Value))\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 10.1 Game\n\nYou are working on a game in which your character is exploring a grid-like map. You get the original `location` of the character and the `steps` he will take.  \nA step `.Up` will increase the x coordinate by 1. A step `.Down` will decrease the x coordinate by 1. A step `.Right` will increase the y coordinate by 1. A step `.Left` will decrease the y coordinate by 1.  \nPrint the final `location` of the character after all the steps have been taken.\n\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse a switch statement.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nModify the `location` tuple based on what case you're handling in the `switch` statement.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n[/spoiler]\n\n",
        "text": "### 10.1 Game\n\nYou are working on a game in which your character is exploring a grid-like map. You get the original `location` of the character and the `steps` he will take.  \nA step `.Up` will increase the x coordinate by 1. A step `.Down` will decrease the x coordinate by 1. A step `.Right` will increase the y coordinate by 1. A step `.Left` will decrease the y coordinate by 1.  \nPrint the final `location` of the character after all the steps have been taken.\n\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse a switch statement.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nModify the `location` tuple based on what case you're handling in the `switch` statement.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n[/spoiler]\n\n",
        "name": "Game",
        "title": "10.1 Game",
        "id": "1",
        "problemStatement": "### 10.1 Game\n\nYou are working on a game in which your character is exploring a grid-like map. You get the original `location` of the character and the `steps` he will take.  \nA step `.Up` will increase the x coordinate by 1. A step `.Down` will decrease the x coordinate by 1. A step `.Right` will increase the y coordinate by 1. A step `.Left` will decrease the y coordinate by 1.  \nPrint the final `location` of the character after all the steps have been taken.\n\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "enum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\n// your code here\n",
            "text": "```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n",
                "text": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(-2, 1)\n",
                "text": "```\n(-2, 1)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\n",
              "Output": "```\n(-2, 1)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n",
                "text": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(1, -2)\n",
                "text": "```\n(1, -2)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\n",
              "Output": "```\n(1, -2)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n",
                "text": "```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(9, 4)\n",
                "text": "```\n(9, 4)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\n",
              "Output": "```\n(9, 4)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a switch statement.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse a switch statement.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Modify the `location` tuple based on what case you're handling in the `switch` statement.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nModify the `location` tuple based on what case you're handling in the `switch` statement.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n",
                "text": "```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\nOutput:\n```\n(-2, 1)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n",
                "text": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(-2, 1)\n",
                "text": "```\n(-2, 1)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n```\n",
              "Output": "```\n(-2, 1)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput:\n```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\nOutput:\n```\n(1, -2)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n",
                "text": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(1, -2)\n",
                "text": "```\n(1, -2)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left, .Down, .Down, \n    .Right, .Right, .Down, .Right]\n```\n",
              "Output": "```\n(1, -2)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput:\n```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\nOutput:\n```\n(9, 4)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n",
                "text": "```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(9, 4)\n",
                "text": "```\n(9, 4)\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar location = (x: 5, y: 2)\n\nvar steps: [Direction] = [.Up, .Right, .Up, .Right, .Up, \n    .Right, .Down, .Right]\n```\n",
              "Output": "```\n(9, 4)\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a switch statement.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse a switch statement.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Modify the `location` tuple based on what case you're handling in the `switch` statement.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nModify the `location` tuple based on what case you're handling in the `switch` statement.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n",
                "text": "```swift\nenum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\nfor step in steps {\n    switch step {\n    case .Up:\n        location.y += 1\n    case .Down:\n        location.y -= 1\n    case .Right:\n        location.x += 1\n    case .Left:\n        location.x -= 1\n    default:\n        break\n    }\n}\n\nprint(location)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe have to iterate over all the steps. Will use a switch statement on each step, depending on the value of the enum we'll update the location tuple's x or y coordinate. If the enum's value is Up or Down location.y is increased or decreased respectivelly. If the enum's value is Right or Left the location.x is increased or decreased respectivelly.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_1",
        "compileCode": true,
        "code": "enum Direction {\n    case Up\n    case Down\n    case Left\n    case Right\n}\n\nvar location = (x: 0, y: 0)\n\nvar steps: [Direction] = [.Up, .Up, .Left, .Down, .Left]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 10.2 Min Max\n\nWrite a function named `minmax` that takes two integers and returns both the minimum and the maximum values inside a tuple.\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nA single comparison is enough to determine both the minimum and the maximum value.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n[/spoiler]\n\n",
        "text": "### 10.2 Min Max\n\nWrite a function named `minmax` that takes two integers and returns both the minimum and the maximum values inside a tuple.\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n[/spoiler]\n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nA single comparison is enough to determine both the minimum and the maximum value.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n[/spoiler]\n\n",
        "name": "Min Max",
        "title": "10.2 Min Max",
        "id": "2",
        "problemStatement": "### 10.2 Min Max\n\nWrite a function named `minmax` that takes two integers and returns both the minimum and the maximum values inside a tuple.\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(2, 3)\n",
                "text": "```swift\nminmax(2, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(2, 3)\n",
                "text": "```swift\n(2, 3)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(2, 3)\n```\n",
              "Function output": "```swift\n(2, 3)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(5, 1)\n",
                "text": "```swift\nminmax(5, 1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(1, 5)\n",
                "text": "```swift\n(1, 5)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(5, 1)\n```\n",
              "Function output": "```swift\n(1, 5)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(3, 3)\n",
                "text": "```swift\nminmax(3, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(3, 3)\n",
                "text": "```swift\n(3, 3)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(3, 3)\n```\n",
              "Function output": "```swift\n(3, 3)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func minmax(a: Int, _ b: Int) -> (Int, Int)\n",
                "text": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "A single comparison is enough to determine both the minimum and the maximum value.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nA single comparison is enough to determine both the minimum and the maximum value.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n",
                "text": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n",
            "text": "[spoiler title='Explanation']\n\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nminmax(2, 3)\n```\nFunction output:\n```swift\n(2, 3)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(2, 3)\n",
                "text": "```swift\nminmax(2, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(2, 3)\n",
                "text": "```swift\n(2, 3)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(2, 3)\n```\n",
              "Function output": "```swift\n(2, 3)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nminmax(5, 1)\n```\nFunction output:\n```swift\n(1, 5)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(5, 1)\n",
                "text": "```swift\nminmax(5, 1)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(1, 5)\n",
                "text": "```swift\n(1, 5)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(5, 1)\n```\n",
              "Function output": "```swift\n(1, 5)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nminmax(3, 3)\n```\nFunction output:\n```swift\n(3, 3)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "minmax(3, 3)\n",
                "text": "```swift\nminmax(3, 3)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "(3, 3)\n",
                "text": "```swift\n(3, 3)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nminmax(3, 3)\n```\n",
              "Function output": "```swift\n(3, 3)\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func minmax(a: Int, _ b: Int) -> (Int, Int)\n",
                "text": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "A single comparison is enough to determine both the minimum and the maximum value.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nA single comparison is enough to determine both the minimum and the maximum value.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "func minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n",
                "text": "```swift\nfunc minmax(a: Int, _ b: Int) -> (Int, Int) {\n    if a < b {\n        return (a, b)\n    } else {\n        return (b, a)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n",
            "text": "[spoiler title='Explanation']\n\nIf `a < b` we return the tuple `(a, b)` otherwise we return the tuple `(b, a)`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_2",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 10.3 Rock, Paper, Scissors\n\n1) Define an enumeration named `HandShape` with three members: `.Rock`, `.Paper`, `.Scissors`.  \n2) Define an enumeration named `MatchResult` with three members: `.Win`, `.Draw`, `.Lose`.  \n3) write a function called `match` that takes two hand shapes and returns a match result. It should return the outcome for the first player (the one with the first hand shape).  \n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nHandle the case when the hands result in a draw first.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nDetermine if a win has occurred.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n[/spoiler]\n\n",
        "text": "### 10.3 Rock, Paper, Scissors\n\n1) Define an enumeration named `HandShape` with three members: `.Rock`, `.Paper`, `.Scissors`.  \n2) Define an enumeration named `MatchResult` with three members: `.Win`, `.Draw`, `.Lose`.  \n3) write a function called `match` that takes two hand shapes and returns a match result. It should return the outcome for the first player (the one with the first hand shape).  \n\n[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n[/spoiler]\n\n[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n\n[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nHandle the case when the hands result in a draw first.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nDetermine if a win has occurred.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n[/spoiler]\n\n",
        "name": "Rock, Paper, Scissors",
        "title": "10.3 Rock, Paper, Scissors",
        "id": "3",
        "problemStatement": "### 10.3 Rock, Paper, Scissors\n\n1) Define an enumeration named `HandShape` with three members: `.Rock`, `.Paper`, `.Scissors`.  \n2) Define an enumeration named `MatchResult` with three members: `.Win`, `.Draw`, `.Lose`.  \n3) write a function called `match` that takes two hand shapes and returns a match result. It should return the outcome for the first player (the one with the first hand shape).  \n\n\n\n\n\n\n\n\n\n\n",
        "spoilers": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func match(first: HandShape, _ second: HandShape) -> MatchResult\n",
                "text": "```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\n// your code here\n```\n",
            "text": "[spoiler title='Code' collapse_link='true']\n```swift\n// your code here\n```\n[/spoiler]\n",
            "params": {
              "title": "Code",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "// your code here\n",
                "text": "```swift\n// your code here\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Rock, .Scissors) \n",
                "text": "```swift\nmatch(.Rock, .Scissors) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Win\n",
                "text": "```swift\n.Win\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Rock, .Scissors) \n```\n",
              "Function output": "```swift\n.Win\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Rock, .Paper) \n",
                "text": "```swift\nmatch(.Rock, .Paper) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Lose\n",
                "text": "```swift\n.Lose\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Rock, .Paper) \n```\n",
              "Function output": "```swift\n.Lose\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Scissors, .Scissors)\n",
                "text": "```swift\nmatch(.Scissors, .Scissors)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Draw\n",
                "text": "```swift\n.Draw\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Scissors, .Scissors)\n```\n",
              "Function output": "```swift\n.Draw\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Handle the case when the hands result in a draw first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nHandle the case when the hands result in a draw first.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Determine if a win has occurred.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nDetermine if a win has occurred.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n",
                "text": "```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "functionDefinitions": [
          {
            "type": "spoiler",
            "content": "```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n",
            "text": "[spoiler title='Function Definition' collapse_link='true' compile='false']\n```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n[/spoiler]\n",
            "params": {
              "title": "Function Definition",
              "collapse_link": "true",
              "compile": "false"
            },
            "codes": [
              {
                "type": "code",
                "content": "func match(first: HandShape, _ second: HandShape) -> MatchResult\n",
                "text": "```swift\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "examples": [
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Scissors) \n```\nFunction output:\n```swift\n.Win\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Rock, .Scissors) \n",
                "text": "```swift\nmatch(.Rock, .Scissors) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Win\n",
                "text": "```swift\n.Win\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Rock, .Scissors) \n```\n",
              "Function output": "```swift\n.Win\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nFunction call:\n```swift\nmatch(.Rock, .Paper) \n```\nFunction output:\n```swift\n.Lose\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Rock, .Paper) \n",
                "text": "```swift\nmatch(.Rock, .Paper) \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Lose\n",
                "text": "```swift\n.Lose\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Rock, .Paper) \n```\n",
              "Function output": "```swift\n.Lose\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Function call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nFunction call:\n```swift\nmatch(.Scissors, .Scissors)\n```\nFunction output:\n```swift\n.Draw\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "match(.Scissors, .Scissors)\n",
                "text": "```swift\nmatch(.Scissors, .Scissors)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": ".Draw\n",
                "text": "```swift\n.Draw\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Function call": "```swift\nmatch(.Scissors, .Scissors)\n```\n",
              "Function output": "```swift\n.Draw\n```\n"
            },
            "section_titles": [
              "Function call",
              "Function output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Handle the case when the hands result in a draw first.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nHandle the case when the hands result in a draw first.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Determine if a win has occurred.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nDetermine if a win has occurred.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n",
                "text": "```swift\nenum HandShape {\n    case Rock\n    case Paper\n    case Scissors\n}\n\nenum MatchResult {\n    case Win\n    case Draw\n    case Lose\n}\n\nfunc match(first: HandShape, _ second: HandShape) -> MatchResult {\n    if first == second {\n        return .Draw\n    }\n    \n    if first == .Rock && second == .Scissors {\n        return .Win\n    }\n    \n    if first == .Paper && second == .Rock {\n        return .Win\n    }\n    \n    if first == .Scissors && second == .Paper {\n        return .Win\n    }\n    \n    return .Lose\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll define the `HandShape` and `MatchResult` enums like above. Now to implement the match function we'll treat the draw case and all the win cases otherwise we'll return `.Lose`. If the first hand shape is equal to the second hand shape we return a `.Draw`. Next we'll return a `.Win` if any of the winning conditions of rock scissor paper are met. Otherwise we'll return a `.Lose`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_3",
        "compileCode": true,
        "code": "// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 10.4 Fractions\n\nYou are given 2 tuples of `a`, `b` type `(Int,Int)` representing fractions. The first value in the tuple represents the numerator, the second value represents the denominator.\nCreate a new tuple `sum` of type `(Int,Int)` that holds the sum of the fractions.\n\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nTo add 2 fractions together you have to get them to a common denominator.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n[/spoiler]\n\n",
        "text": "### 10.4 Fractions\n\nYou are given 2 tuples of `a`, `b` type `(Int,Int)` representing fractions. The first value in the tuple represents the numerator, the second value represents the denominator.\nCreate a new tuple `sum` of type `(Int,Int)` that holds the sum of the fractions.\n\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n[/spoiler]\n\n\n[spoiler title='Hint' collapse_link='true']  \nTo add 2 fractions together you have to get them to a common denominator.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n[/spoiler]\n\n",
        "name": "Fractions",
        "title": "10.4 Fractions",
        "id": "4",
        "problemStatement": "### 10.4 Fractions\n\nYou are given 2 tuples of `a`, `b` type `(Int,Int)` representing fractions. The first value in the tuple represents the numerator, the second value represents the denominator.\nCreate a new tuple `sum` of type `(Int,Int)` that holds the sum of the fractions.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var a = (5,8)\nvar b = (17,9)\n\n// your code here\n",
            "text": "```swift\nvar a = (5,8)\nvar b = (17,9)\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (5,8)\nvar b = (17,9)\n",
                "text": "```swift\nvar a = (5,8)\nvar b = (17,9)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = (181, 72)\n",
                "text": "```swift\nsum = (181, 72)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = (5,8)\nvar b = (17,9)\n```\n",
              "Expected Value": "```swift\nsum = (181, 72)\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (34,3)\nvar b = (11,2)\n",
                "text": "```swift\nvar a = (34,3)\nvar b = (11,2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = (101, 6)\n",
                "text": "```swift\nsum = (101, 6)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = (34,3)\nvar b = (11,2)\n```\n",
              "Expected Value": "```swift\nsum = (101, 6)\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "To add 2 fractions together you have to get them to a common denominator.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nTo add 2 fractions together you have to get them to a common denominator.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n",
                "text": "```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar a = (5,8)\nvar b = (17,9)\n```\nExpected Value:\n```swift\nsum = (181, 72)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (5,8)\nvar b = (17,9)\n",
                "text": "```swift\nvar a = (5,8)\nvar b = (17,9)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = (181, 72)\n",
                "text": "```swift\nsum = (181, 72)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = (5,8)\nvar b = (17,9)\n```\n",
              "Expected Value": "```swift\nsum = (181, 72)\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar a = (34,3)\nvar b = (11,2)\n```\nExpected Value:\n```swift\nsum = (101, 6)\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (34,3)\nvar b = (11,2)\n",
                "text": "```swift\nvar a = (34,3)\nvar b = (11,2)\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "sum = (101, 6)\n",
                "text": "```swift\nsum = (101, 6)\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar a = (34,3)\nvar b = (11,2)\n```\n",
              "Expected Value": "```swift\nsum = (101, 6)\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "To add 2 fractions together you have to get them to a common denominator.\n",
            "text": "[spoiler title='Hint' collapse_link='true']  \nTo add 2 fractions together you have to get them to a common denominator.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n",
                "text": "```swift\nvar a = (5,8)\nvar b = (17,9)\n\nlet numerator = a.0 * b.1 + b.0 * a.1\nlet denominator = a.1 * b.1\nvar sum = (numerator, denominator)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n",
            "text": "[spoiler title='Explanation']\n\nThe solution involves adding the fractions via the stadard fraction addition formula. `a/b + c/d = (a * d + c * b / b * d`.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_4",
        "compileCode": true,
        "code": "var a = (5,8)\nvar b = (17,9)\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 10.5 Money\n\nYou are given the `CoinType` enumeration which describes different coin values and `moneyArray` which has tuples `(ammount, coinType)`. Print the total value of the coins in the array.\n\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n                                      \n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that `.rawValue` gets the numeric value associated with an enum value.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n[/spoiler]\n\n",
        "text": "### 10.5 Money\n\nYou are given the `CoinType` enumeration which describes different coin values and `moneyArray` which has tuples `(ammount, coinType)`. Print the total value of the coins in the array.\n\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n                                      \n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n[/spoiler]\n\n[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nRemember that `.rawValue` gets the numeric value associated with an enum value.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n[/spoiler]\n\n",
        "name": "Money",
        "title": "10.5 Money",
        "id": "5",
        "problemStatement": "### 10.5 Money\n\nYou are given the `CoinType` enumeration which describes different coin values and `moneyArray` which has tuples `(ammount, coinType)`. Print the total value of the coins in the array.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "enum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n                                      \n// your code here\n",
            "text": "```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n                                      \n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "385\n",
                "text": "```\n385\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\n",
              "Output": "```\n385\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "77\n",
                "text": "```\n77\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\n",
              "Output": "```\n77\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "105\n",
                "text": "```\n105\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\n",
              "Output": "```\n105\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Remember that `.rawValue` gets the numeric value associated with an enum value.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that `.rawValue` gets the numeric value associated with an enum value.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n",
                "text": "```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\nOutput:\n```\n385\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "385\n",
                "text": "```\n385\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n    (15,.Nickle),\n    (3,.Quarter),\n    (20,.Penny),\n    (3,.Dime),\n    (7,.Quarter)]\n```\n",
              "Output": "```\n385\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\nOutput:\n```\n77\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "77\n",
                "text": "```\n77\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (2,.Penny),\n    (3,.Quarter)\n]\n```\n",
              "Output": "```\n77\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n",
            "text": "[spoiler title='Example 3' collapse_link='true']\nInput: \n```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\nOutput:\n```\n105\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 3",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n",
                "text": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "105\n",
                "text": "```\n105\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar moneyArray:[(Int,CoinType)] = [\n    (5, .Dime),\n    (2, .Quarter),\n    (1, .Nickle)\n]\n```\n",
              "Output": "```\n105\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Remember that `.rawValue` gets the numeric value associated with an enum value.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nRemember that `.rawValue` gets the numeric value associated with an enum value.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "enum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n",
                "text": "```swift\nenum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n\nvar totalMoney = 0\n\nfor (amount, coinType) in moneyArray {\n    totalMoney += amount * coinType.rawValue\n}\n\nprint(totalMoney)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll have to iterate through our money array. We'll keep track of the total money in a variable. For each `(amount, coinType)` tuple we add the amount multiplied by the `coinType`'s raw value to our total.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_5",
        "compileCode": true,
        "code": "enum CoinType: Int {\n    case Penny = 1\n    case Nickle = 5\n    case Dime = 10\n    case Quarter = 25\n}\n\n\nvar moneyArray:[(Int,CoinType)] = [(10,.Penny),\n                                   (15,.Nickle),\n                                   (3,.Quarter),\n                                   (20,.Penny),\n                                   (3,.Dime),\n                                   (7,.Quarter)]\n                                      \n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 10.6 Counting Strings\n\nYou are given an array of strings stored in the variable `strings`. Create a new array named `countedStrings` containing values of type `(String,Int)`. Each tuple contains a string from the `strings` array followed by an integer indicating how many times it appears in the `strings` array. Each string should only appear once in the `countedStrings` array.\n\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n[/spoiler]\n\n",
        "text": "### 10.6 Counting Strings\n\nYou are given an array of strings stored in the variable `strings`. Create a new array named `countedStrings` containing values of type `(String,Int)`. Each tuple contains a string from the `strings` array followed by an integer indicating how many times it appears in the `strings` array. Each string should only appear once in the `countedStrings` array.\n\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n[/spoiler]\n\n",
        "name": "Counting Strings",
        "title": "10.6 Counting Strings",
        "id": "6",
        "problemStatement": "### 10.6 Counting Strings\n\nYou are given an array of strings stored in the variable `strings`. Create a new array named `countedStrings` containing values of type `(String,Int)`. Each tuple contains a string from the `strings` array followed by an integer indicating how many times it appears in the `strings` array. Each string should only appear once in the `countedStrings` array.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\n// your code here\n",
            "text": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n",
                "text": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "countedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n",
                "text": "```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\n",
              "Expected Value": "```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n",
                "text": "```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "countedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n",
                "text": "```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\n",
              "Expected Value": "```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n",
                "text": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "10",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n",
            "text": "[spoiler title='Example 1' collapse_link='true']\nInput: \n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n",
                "text": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "countedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n",
                "text": "```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n```\n",
              "Expected Value": "```swift\ncountedStrings = [\n    \"tuples\" : 5,\n    \"are\" : 2,\n    \"awesome\" : 1,\n    \"cool\" : 1,\n    \"shades\" : 1\n]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          },
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n",
            "text": "[spoiler title='Example 2' collapse_link='true']\nInput: \n```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\nExpected Value:\n```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n",
                "text": "```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "countedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n",
                "text": "```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar strings = [\"hello\", \"world\", \"hello\", \"swift\", \"hello\", \"tuples\"]\n```\n",
              "Expected Value": "```swift\ncountedStrings = [\n    \"hello\" : 3,\n    \"world\" : 1,\n    \"swift\" : 1,\n    \"tuples\" : 1\n]\n```\n"
            },
            "section_titles": [
              "Input",
              "Expected Value"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that you can't change a tuple when iterating an array using the for in syntax. You'll have to iterate using an index.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n",
                "text": "```swift\nvar strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\nvar countedStrings: [(String,Int)] = []\n\nfor string in strings {\n    var alreadyExists = false\n    \n    for i in 0..<countedStrings.count {\n        if (countedStrings[i].0 == string) {\n            countedStrings[i].1 += 1\n            alreadyExists = true\n        }\n    }\n    if alreadyExists == false {\n        let tuple = (string,1)\n        countedStrings.append((string,1))\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate all the strings in our `strings` array. The result will be kept in our `countedStrings` array. At each step of the loop we first check if the string already exists in some tuple of the array, if it does we keep remember that in the boolean variable `alreadyExists` and increment the count of the tuple by `1`. After we finish iterating our `countedStrings` array we check if the `string` was already in the array, if it wasn't we add it with a count of 1.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise10_6",
        "compileCode": true,
        "code": "var strings = [\"tuples\", \"are\", \"awesome\", \"tuples\", \"are\", \"cool\", \n    \"tuples\", \"tuples\", \"tuples\", \"shades\"]\n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  },
  {
    "type": "chapter",
    "content": "## 11. Dictionaries\n\nA dictionary is an unordered collection that stores multiple values of the same type. Each value from the dictionary is asociated with a unique key. All the keys have the same type. \n\nThe type of a dictionary is determined by the type of the keys and the type of the values. A dictionary of type `[String:Int]` has keys of type `String` and values of type `Int`. \n\n#### Declare Dictionaries\n\nTo declare a dictionary you can use the square brackets syntax(`[KeyType:ValueType]`).\n\n```swift\nvar dictionary: [String:Int]\n```\n\nYou can initialize a dictionary with a dictionary literal. A dictionary literal is a list of key-value pairs, separated by commas, surrounded by a pair of square brackets. A key-value pair is a combination of a key and a value separate by a colon(:).\n\n[`key`:`value`, `key`:`value`, `...`]\n\n```swift\nvar dictionary: [String:Int] = [\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3\n]\n```\n\nKeep in mind that you can create empty dictionary using the empty dictionary literal (`[:]`).\n\n```swift\nvar emptyDictionary: [Int:Int] = [:]\n```\n\n#### Getting values\n\nYou can access specific elements from a dictionary using the subscript syntax. To do this pass the key of the value you want to retrieve within square brackets immediately after the name of the dictionary. Because it's possible not to have a value associated with the provided key the subscript will return an optional value of the value type.\n\nTo unwrap the value returned by the subscript you can do one of two things: use optional binding or force the value if you know for sure it exists.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3,\n    \"four\" : 4,\n    \"five\" : 5,\n    \"six\" : 6,\n    \"seven\" : 7,\n    \"eight\" : 8,\n    \"nine\" : 9\n]\n\nstringsAsInts[\"zero\"] // Optional(0)\nstringsAsInts[\"three\"] // Optional(3)\nstringsAsInts[\"ten\"] // nil\n\n// Unwaraping the optional using optional binding\nif let twoAsInt = stringsAsInts[\"two\"] {\n    print(twoAsInt) // 2\n}\n\n// Unwaraping the optional using the forced value operator (!)\nstringsAsInts[\"one\"]! // 1\n```\n\nTo get all the values from a dictionary you can use the `for-in` syntax. It's similar to the array for in syntax with the exception that instead of getting only the value in each step you also get the key associated with that value inside of a tuple. \n\n```swift\nvar userInfo: [String: String] = [\n    \"first_name\" : \"Andrei\",\n    \"last_name\" : \"Puni\",\n    \"job_title\" : \"Mad scientist\"\n]\n\nfor (key, value) in userInfo {\n    print(\"\\(key): \\(value)\")\n}\n```\n\nTo get the number of elements (key-value pairs) in a dictionary you can use the `count` property.\n\n```swift\nprint(userInfo.count) // 3\n```\n\n#### Updating values\n\nThe simplest way to add a value to a dictionary is by using the subscript syntax:\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3\n```\n\nUsing the subscript syntax you can change a the value associated with a key:\n\n```swift\nstringsAsInts[\"three\"] = 10\n```\n\nYou can use the `updateValue(forKey:)` method to update the value associated with a key, if there was no value for that key it will be added. The method will return the old value wrapped in an optional or nil if there was no value before.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts.updateValue(3, forKey: \"three\") // nil \nstringsAsInts.updateValue(10, forKey: \"three\") // Optional(3)\n```\n\nTo remove a value from the dictionary you can use the subscript syntax to set the value to nil, or the `removeValueForKey()` method.\n\n```swift\nstringsAsInts[\"three\"] = nil\n\nstringsAsInts.removeValueForKey(\"three\")\n```\n\n#### Type Inference\n\nThanks to Swift’s type inference, you don't have to declare the type of a dictionary if you initialize it with something other than an empty dictionary literal(`[:]`).\n\n```swift\n// powersOfTwo will have the type [Int:Int]\nvar powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n] \n\n// userInfo will have the type [String:String]\nvar userInfo = [\n    \"first_name\" : \"Silviu\",\n    \"last_name\" : \"Pop\",\n    \"job_title\" : \"evil genius\"\n]\n```\n\n#### Copy Behavior\n\nSwift’s dictionaries are value types. This means that dictionaries are copied when they are assigned to a new constant or variable, or when they are passed to a function or method.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nvar justACopy = stringsAsInts\n\njustACopy[\"zero\"] = 100\n\nprint(stringsAsInts) // [zero: 0, one: 1, two: 2]\nprint(justACopy) // [zero: 100, one: 1, two: 2]\n```\n\nKeep in mind that this is not true for Objective-C dictionaries (`NSDictionary` and `NSMutableDictionary`).\n\n#### Mutability\n\nIf you create a dictionary and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created by adding, removing, or changing items in the collection. Conversely, if you assign a dictionary to a constant, that array or dictionary is immutable, and its size and contents cannot be changed. In other words if you want to be able to change a dictionary declare it using the `var` keyword, and if you don't want to be able to change it use the `let` keyword.\n\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3 // [zero: 0, one: 1, two: 2, three: 3]\nstringsAsInts[\"zero\"] = nil // [one: 1, two: 2, three: 3]\n\nlet powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n]\n\n// this will give a runtime error because powersOfTwo is immutable\npowersOfTwo[5] = 32 \n\npowersOfTwo.removeValueForKey(1) // this will give a similar error\n```\n\n",
    "text": "## 11. Dictionaries\n\nA dictionary is an unordered collection that stores multiple values of the same type. Each value from the dictionary is asociated with a unique key. All the keys have the same type. \n\nThe type of a dictionary is determined by the type of the keys and the type of the values. A dictionary of type `[String:Int]` has keys of type `String` and values of type `Int`. \n\n#### Declare Dictionaries\n\nTo declare a dictionary you can use the square brackets syntax(`[KeyType:ValueType]`).\n\n```swift\nvar dictionary: [String:Int]\n```\n\nYou can initialize a dictionary with a dictionary literal. A dictionary literal is a list of key-value pairs, separated by commas, surrounded by a pair of square brackets. A key-value pair is a combination of a key and a value separate by a colon(:).\n\n[`key`:`value`, `key`:`value`, `...`]\n\n```swift\nvar dictionary: [String:Int] = [\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3\n]\n```\n\nKeep in mind that you can create empty dictionary using the empty dictionary literal (`[:]`).\n\n```swift\nvar emptyDictionary: [Int:Int] = [:]\n```\n\n#### Getting values\n\nYou can access specific elements from a dictionary using the subscript syntax. To do this pass the key of the value you want to retrieve within square brackets immediately after the name of the dictionary. Because it's possible not to have a value associated with the provided key the subscript will return an optional value of the value type.\n\nTo unwrap the value returned by the subscript you can do one of two things: use optional binding or force the value if you know for sure it exists.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3,\n    \"four\" : 4,\n    \"five\" : 5,\n    \"six\" : 6,\n    \"seven\" : 7,\n    \"eight\" : 8,\n    \"nine\" : 9\n]\n\nstringsAsInts[\"zero\"] // Optional(0)\nstringsAsInts[\"three\"] // Optional(3)\nstringsAsInts[\"ten\"] // nil\n\n// Unwaraping the optional using optional binding\nif let twoAsInt = stringsAsInts[\"two\"] {\n    print(twoAsInt) // 2\n}\n\n// Unwaraping the optional using the forced value operator (!)\nstringsAsInts[\"one\"]! // 1\n```\n\nTo get all the values from a dictionary you can use the `for-in` syntax. It's similar to the array for in syntax with the exception that instead of getting only the value in each step you also get the key associated with that value inside of a tuple. \n\n```swift\nvar userInfo: [String: String] = [\n    \"first_name\" : \"Andrei\",\n    \"last_name\" : \"Puni\",\n    \"job_title\" : \"Mad scientist\"\n]\n\nfor (key, value) in userInfo {\n    print(\"\\(key): \\(value)\")\n}\n```\n\nTo get the number of elements (key-value pairs) in a dictionary you can use the `count` property.\n\n```swift\nprint(userInfo.count) // 3\n```\n\n#### Updating values\n\nThe simplest way to add a value to a dictionary is by using the subscript syntax:\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3\n```\n\nUsing the subscript syntax you can change a the value associated with a key:\n\n```swift\nstringsAsInts[\"three\"] = 10\n```\n\nYou can use the `updateValue(forKey:)` method to update the value associated with a key, if there was no value for that key it will be added. The method will return the old value wrapped in an optional or nil if there was no value before.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts.updateValue(3, forKey: \"three\") // nil \nstringsAsInts.updateValue(10, forKey: \"three\") // Optional(3)\n```\n\nTo remove a value from the dictionary you can use the subscript syntax to set the value to nil, or the `removeValueForKey()` method.\n\n```swift\nstringsAsInts[\"three\"] = nil\n\nstringsAsInts.removeValueForKey(\"three\")\n```\n\n#### Type Inference\n\nThanks to Swift’s type inference, you don't have to declare the type of a dictionary if you initialize it with something other than an empty dictionary literal(`[:]`).\n\n```swift\n// powersOfTwo will have the type [Int:Int]\nvar powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n] \n\n// userInfo will have the type [String:String]\nvar userInfo = [\n    \"first_name\" : \"Silviu\",\n    \"last_name\" : \"Pop\",\n    \"job_title\" : \"evil genius\"\n]\n```\n\n#### Copy Behavior\n\nSwift’s dictionaries are value types. This means that dictionaries are copied when they are assigned to a new constant or variable, or when they are passed to a function or method.\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nvar justACopy = stringsAsInts\n\njustACopy[\"zero\"] = 100\n\nprint(stringsAsInts) // [zero: 0, one: 1, two: 2]\nprint(justACopy) // [zero: 100, one: 1, two: 2]\n```\n\nKeep in mind that this is not true for Objective-C dictionaries (`NSDictionary` and `NSMutableDictionary`).\n\n#### Mutability\n\nIf you create a dictionary and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created by adding, removing, or changing items in the collection. Conversely, if you assign a dictionary to a constant, that array or dictionary is immutable, and its size and contents cannot be changed. In other words if you want to be able to change a dictionary declare it using the `var` keyword, and if you don't want to be able to change it use the `let` keyword.\n\n\n```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3 // [zero: 0, one: 1, two: 2, three: 3]\nstringsAsInts[\"zero\"] = nil // [one: 1, two: 2, three: 3]\n\nlet powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n]\n\n// this will give a runtime error because powersOfTwo is immutable\npowersOfTwo[5] = 32 \n\npowersOfTwo.removeValueForKey(1) // this will give a similar error\n```\n\n",
    "name": "Dictionaries",
    "title": "Dictionaries",
    "id": "11",
    "codes": [
      {
        "type": "code",
        "content": "var dictionary: [String:Int]\n",
        "text": "```swift\nvar dictionary: [String:Int]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var dictionary: [String:Int] = [\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3\n]\n",
        "text": "```swift\nvar dictionary: [String:Int] = [\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3\n]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var emptyDictionary: [Int:Int] = [:]\n",
        "text": "```swift\nvar emptyDictionary: [Int:Int] = [:]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3,\n    \"four\" : 4,\n    \"five\" : 5,\n    \"six\" : 6,\n    \"seven\" : 7,\n    \"eight\" : 8,\n    \"nine\" : 9\n]\n\nstringsAsInts[\"zero\"] // Optional(0)\nstringsAsInts[\"three\"] // Optional(3)\nstringsAsInts[\"ten\"] // nil\n\n// Unwaraping the optional using optional binding\nif let twoAsInt = stringsAsInts[\"two\"] {\n    print(twoAsInt) // 2\n}\n\n// Unwaraping the optional using the forced value operator (!)\nstringsAsInts[\"one\"]! // 1\n",
        "text": "```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3,\n    \"four\" : 4,\n    \"five\" : 5,\n    \"six\" : 6,\n    \"seven\" : 7,\n    \"eight\" : 8,\n    \"nine\" : 9\n]\n\nstringsAsInts[\"zero\"] // Optional(0)\nstringsAsInts[\"three\"] // Optional(3)\nstringsAsInts[\"ten\"] // nil\n\n// Unwaraping the optional using optional binding\nif let twoAsInt = stringsAsInts[\"two\"] {\n    print(twoAsInt) // 2\n}\n\n// Unwaraping the optional using the forced value operator (!)\nstringsAsInts[\"one\"]! // 1\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var userInfo: [String: String] = [\n    \"first_name\" : \"Andrei\",\n    \"last_name\" : \"Puni\",\n    \"job_title\" : \"Mad scientist\"\n]\n\nfor (key, value) in userInfo {\n    print(\"\\(key): \\(value)\")\n}\n",
        "text": "```swift\nvar userInfo: [String: String] = [\n    \"first_name\" : \"Andrei\",\n    \"last_name\" : \"Puni\",\n    \"job_title\" : \"Mad scientist\"\n]\n\nfor (key, value) in userInfo {\n    print(\"\\(key): \\(value)\")\n}\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "print(userInfo.count) // 3\n",
        "text": "```swift\nprint(userInfo.count) // 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3\n",
        "text": "```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "stringsAsInts[\"three\"] = 10\n",
        "text": "```swift\nstringsAsInts[\"three\"] = 10\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts.updateValue(3, forKey: \"three\") // nil \nstringsAsInts.updateValue(10, forKey: \"three\") // Optional(3)\n",
        "text": "```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts.updateValue(3, forKey: \"three\") // nil \nstringsAsInts.updateValue(10, forKey: \"three\") // Optional(3)\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "stringsAsInts[\"three\"] = nil\n\nstringsAsInts.removeValueForKey(\"three\")\n",
        "text": "```swift\nstringsAsInts[\"three\"] = nil\n\nstringsAsInts.removeValueForKey(\"three\")\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "// powersOfTwo will have the type [Int:Int]\nvar powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n] \n\n// userInfo will have the type [String:String]\nvar userInfo = [\n    \"first_name\" : \"Silviu\",\n    \"last_name\" : \"Pop\",\n    \"job_title\" : \"evil genius\"\n]\n",
        "text": "```swift\n// powersOfTwo will have the type [Int:Int]\nvar powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n] \n\n// userInfo will have the type [String:String]\nvar userInfo = [\n    \"first_name\" : \"Silviu\",\n    \"last_name\" : \"Pop\",\n    \"job_title\" : \"evil genius\"\n]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nvar justACopy = stringsAsInts\n\njustACopy[\"zero\"] = 100\n\nprint(stringsAsInts) // [zero: 0, one: 1, two: 2]\nprint(justACopy) // [zero: 100, one: 1, two: 2]\n",
        "text": "```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nvar justACopy = stringsAsInts\n\njustACopy[\"zero\"] = 100\n\nprint(stringsAsInts) // [zero: 0, one: 1, two: 2]\nprint(justACopy) // [zero: 100, one: 1, two: 2]\n```\n",
        "language": "swift"
      },
      {
        "type": "code",
        "content": "var stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3 // [zero: 0, one: 1, two: 2, three: 3]\nstringsAsInts[\"zero\"] = nil // [one: 1, two: 2, three: 3]\n\nlet powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n]\n\n// this will give a runtime error because powersOfTwo is immutable\npowersOfTwo[5] = 32 \n\npowersOfTwo.removeValueForKey(1) // this will give a similar error\n",
        "text": "```swift\nvar stringsAsInts: [String:Int] = [\n    \"zero\" : 0,\n    \"one\" : 1,\n    \"two\" : 2\n]\n\nstringsAsInts[\"three\"] = 3 // [zero: 0, one: 1, two: 2, three: 3]\nstringsAsInts[\"zero\"] = nil // [one: 1, two: 2, three: 3]\n\nlet powersOfTwo = [\n    1 : 2,\n    2 : 4,\n    3 : 8,\n    4 : 16\n]\n\n// this will give a runtime error because powersOfTwo is immutable\npowersOfTwo[5] = 32 \n\npowersOfTwo.removeValueForKey(1) // this will give a similar error\n```\n",
        "language": "swift"
      }
    ],
    "exercises": [
      {
        "type": "exercise",
        "content": "### 11.1 Encode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `message` which contains only lowercase letters and spaces. Use the `code` dictionary to encode the message and print it.\n\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nIf a character doesn't have a corresponding encoded character leave it unchanged.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nBuild the encoded message step by step by getting the corresponding encoded character from the dictionary.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n\n",
        "text": "### 11.1 Encode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `message` which contains only lowercase letters and spaces. Use the `code` dictionary to encode the message and print it.\n\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\n// your code here\n```\n\n[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n[/spoiler]\n\n[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nIf a character doesn't have a corresponding encoded character leave it unchanged.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nBuild the encoded message step by step by getting the corresponding encoded character from the dictionary.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n\n",
        "name": "Encode",
        "title": "11.1 Encode",
        "id": "1",
        "problemStatement": "### 11.1 Encode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `message` which contains only lowercase letters and spaces. Use the `code` dictionary to encode the message and print it.\n\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\n// your code here\n",
            "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "ifmmp xpsme\n",
                "text": "```\nifmmp xpsme\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\n",
              "Output": "```\nifmmp xpsme\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "xpx uijt qspcmfn jt ibse\n",
                "text": "```\nxpx uijt qspcmfn jt ibse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\n",
              "Output": "```\nxpx uijt qspcmfn jt ibse\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "If a character doesn't have a corresponding encoded character leave it unchanged.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nIf a character doesn't have a corresponding encoded character leave it unchanged.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Build the encoded message step by step by getting the corresponding encoded character from the dictionary.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nBuild the encoded message step by step by getting the corresponding encoded character from the dictionary.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n",
            "text": "[spoiler title='Example 1' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\nOutput: \n```\nifmmp xpsme\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "ifmmp xpsme\n",
                "text": "```\nifmmp xpsme\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n```\n\n",
              "Output": "```\nifmmp xpsme\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n",
            "text": "[spoiler title='Example 2' collapse_link='true']  \n\nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\nOutput: \n```\nxpx uijt qspcmfn jt ibse\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "xpx uijt qspcmfn jt ibse\n",
                "text": "```\nxpx uijt qspcmfn jt ibse\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"wow this problem is hard\"\n```\n\n",
              "Output": "```\nxpx uijt qspcmfn jt ibse\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "If a character doesn't have a corresponding encoded character leave it unchanged.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nIf a character doesn't have a corresponding encoded character leave it unchanged.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Build the encoded message step by step by getting the corresponding encoded character from the dictionary.\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nBuild the encoded message step by step by getting the corresponding encoded character from the dictionary.\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\nvar encodedMessage = \"\"\n\nfor char in message.characters {\n    var character = \"\\(char)\"\n\n    if let encodedChar = code[character] {\n        // letter\n        encodedMessage += encodedChar\n    } else {\n        // space\n        encodedMessage += character\n    }\n}\n\nprint(encodedMessage)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialized our `encodedMessage` with the empty string. Next we'll iterate over all the characters in our `message`. If the character has a coresponding entry in our `code` dictionary we add the encoded character to our `encodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_1",
        "compileCode": true,
        "code": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar message = \"hello world\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.2 Decode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `encodedMessage` which contains only lowercase letters and spaces. Use the `code` dictionary to decode the message and print it.\n\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to invert the code dictionary. Create a new dictionary for this.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n\n",
        "text": "### 11.2 Decode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `encodedMessage` which contains only lowercase letters and spaces. Use the `code` dictionary to decode the message and print it.\n\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nYou'll have to invert the code dictionary. Create a new dictionary for this.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n\n",
        "name": "Decode",
        "title": "11.2 Decode",
        "id": "2",
        "problemStatement": "### 11.2 Decode\n\nYou are given a dictionary `code` of type `[String:String]` which has values for all lowercase letters. The `code` dictionary represents a way to encode a message. For example if `code[\"a\"] = \"z\"` and `code[\"b\"] = \"x\"` the encoded version if `\"ababa\"` will be `\"zxzxz\"`.\nYou are also given a `encodedMessage` which contains only lowercase letters and spaces. Use the `code` dictionary to decode the message and print it.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\n// your code here\n",
            "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "this message is hard to read\n",
                "text": "```\nthis message is hard to read\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\n",
              "Output": "```\nthis message is hard to read\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "You'll have to invert the code dictionary. Create a new dictionary for this.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to invert the code dictionary. Create a new dictionary for this.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\nOutput: \n```\nthis message is hard to read\n```\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "this message is hard to read\n",
                "text": "```\nthis message is hard to read\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"  \n```\n\n",
              "Output": "```\nthis message is hard to read\n```\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "You'll have to invert the code dictionary. Create a new dictionary for this.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nYou'll have to invert the code dictionary. Create a new dictionary for this.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n",
                "text": "```swift\nvar code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\nvar decoder: [String:String] = [:]\n\n// reverse the code\nfor (key, value) in code {\n    decoder[value] = key\n}\n\nvar decodedMessage = \"\"\n\nfor char in encodedMessage.characters {\n    var character = \"\\(char)\"\n    \n    if let encodedChar = decoder[character] {\n        // letter\n        decodedMessage += encodedChar\n    } else {\n        // space\n        decodedMessage += character\n    }\n}\n\nprint(decodedMessage)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll initialized our `decodedMessage` with the empty string. Next we'll iterate over all the characters in our `encodedMessage`. If the character has a coresponding entry in our `decode` dictionary we add the decoded character to our `decodedMessage` otherwise we add the character as is (the character is not an alphabetical character).\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_2",
        "compileCode": true,
        "code": "var code = [\n    \"a\" : \"b\",\n    \"b\" : \"c\",\n    \"c\" : \"d\",\n    \"d\" : \"e\",\n    \"e\" : \"f\",\n    \"f\" : \"g\",\n    \"g\" : \"h\",\n    \"h\" : \"i\",\n    \"i\" : \"j\",\n    \"j\" : \"k\",\n    \"k\" : \"l\",\n    \"l\" : \"m\",\n    \"m\" : \"n\",\n    \"n\" : \"o\",\n    \"o\" : \"p\",\n    \"p\" : \"q\",\n    \"q\" : \"r\",\n    \"r\" : \"s\",\n    \"s\" : \"t\",\n    \"t\" : \"u\",\n    \"u\" : \"v\",\n    \"v\" : \"w\",\n    \"w\" : \"x\",\n    \"x\" : \"y\",\n    \"y\" : \"z\",\n    \"z\" : \"a\"\n]\n\nvar encodedMessage = \"uijt nfttbhf jt ibse up sfbe\"\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.3 Names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `firstNames` that contains only the values for \"firstName\" from each dictionary.\n\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n[/spoiler]\n\n",
        "text": "### 11.3 Names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `firstNames` that contains only the values for \"firstName\" from each dictionary.\n\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n[/spoiler]\n\n",
        "name": "Names",
        "title": "11.3 Names",
        "id": "3",
        "problemStatement": "### 11.3 Names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `firstNames` that contains only the values for \"firstName\" from each dictionary.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n",
            "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "firstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n",
                "text": "```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\n",
              "Expected values": "```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "firstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n",
                "text": "```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\n",
              "Expected values": "```swift\nfirstNames = [\"Calvin\",\"Garry\",\"Leah\",\"Sonja\",\"Noel\"]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar firstNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        print(firstName)\n        firstNames.append(firstName)\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep in mind that persons is an array of dictionaries, you'll have to process this array to get the required data.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for key \"firstName\" from each dictionary.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_3",
        "compileCode": true,
        "code": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.4 Full names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `fullNames` that contains the values for \"firstName\" and \"lastName\" from the dictionary separated by a space.\n\n\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n[/spoiler]\n\n",
        "text": "### 11.4 Full names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `fullNames` that contains the values for \"firstName\" and \"lastName\" from the dictionary separated by a space.\n\n\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n[/spoiler]\n\n[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n[/spoiler]\n\n[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n[/spoiler]\n\n",
        "name": "Full names",
        "title": "11.4 Full names",
        "id": "4",
        "problemStatement": "### 11.4 Full names\n\nYou are given an array of dictionaries. Each dictionary in the array contains exactly 2 keys \"firstName\" and \"lastName\". Create an array of strings called `fullNames` that contains the values for \"firstName\" and \"lastName\" from the dictionary separated by a space.\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n",
            "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n",
                "text": "```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\n",
              "Expected values": "```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\nExpected values:\n```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "fullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n",
                "text": "```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n",
                "language": "swift"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n```\n\n",
              "Expected values": "```swift\nfullNames = [\"Calvin Newton\",\"Garry Mckenzie\",\"Leah Rivera\",\n    \"Sonja Moreno\",\"Noel Bowen\"]\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Expected values"
            ]
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n",
            "text": "[spoiler title='Solution 1' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 1",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    if let firstName = person[\"firstName\"] {\n        if let lastName = person[\"lastName\"] {\n            let fullName = \"\\(firstName) \\(lastName)\"\n            fullNames.append(fullName)\n        }\n    }\n}\n\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n",
            "text": "[spoiler title='Solution 2' collapse_link='true']\n```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution 2",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n",
                "text": "```swift\nvar people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\nvar fullNames: [String] = []\n\nfor person in people {\n    var fullName = \" \"\n    for (key, value) in person {\n        if key == \"lastName\" {\n            fullName += value\n        } else {\n            fullName = value + fullName\n        }\n    }\n    fullNames += [fullName]\n}\n\nprint(fullNames)\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe'll want to iterate the dictionaries in our `people` array. To obtain the firstName we get the value for the key \"firstName\" from each dictionary. To obain the lastName we get the value for the key \"lastName\" from each dictionary. We combine these to get the fullName.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_4",
        "compileCode": true,
        "code": "var people: [[String:String]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\"\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\"\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\"\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\"\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\"\n    ]\n]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.5 Best score\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Find the person with the best score and print his full name.\n\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep track of the person with the best score that you've encountered.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n[/spoiler]\n\n",
        "text": "### 11.5 Best score\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Find the person with the best score and print his full name.\n\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nKeep track of the person with the best score that you've encountered.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n[/spoiler]\n\n",
        "name": "Best score",
        "title": "11.5 Best score",
        "id": "5",
        "problemStatement": "### 11.5 Best score\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Find the person with the best score and print his full name.\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n",
            "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Garry Mckenzie\n",
                "text": "```\nGarry Mckenzie\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\n",
              "Output": "```\nGarry Mckenzie\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Keep track of the person with the best score that you've encountered.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep track of the person with the best score that you've encountered.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n",
            "text": "[spoiler title='Explanation']\n\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\nGarry Mckenzie\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "Garry Mckenzie\n",
                "text": "```\nGarry Mckenzie\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\n",
              "Output": "```\nGarry Mckenzie\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Keep track of the person with the best score that you've encountered.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nKeep track of the person with the best score that you've encountered.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nvar topPerson = people[0]\nvar bestScore = topPerson[\"score\"] as? Int\n\nfor person in people {\n    if let score = person[\"score\"] as? Int {\n        if bestScore < score  {\n            bestScore = score\n            topPerson = person\n        }\n    }\n}\n\nif let first = topPerson[\"firstName\"] as? String, \n       second = topPerson[\"lastName\"] as? String  {\n    print(\"\\(first) \\(second)\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n",
            "text": "[spoiler title='Explanation']\n\nWe keep track of the best person in variable `topPerson` and of the best score in the variable `bestScore`. We iterate our array of dictionaries, if we encounter a score that's larger than our current `bestScore` we update our `bestScore` and `topPerson` variables. Lastly we print the result by getting the values for the keys \"firstName\" and \"lastName\".\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_5",
        "compileCode": true,
        "code": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.6 Leaderboard\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Print the leaderboard in the following format:\n\n```\n1. full name - score\n2. ...\n...\n```\n\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nSort the list of people using a function that compares two dictionaries.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n[/spoiler]\n\n",
        "text": "### 11.6 Leaderboard\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Print the leaderboard in the following format:\n\n```\n1. full name - score\n2. ...\n...\n```\n\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n[/spoiler]\n\n[spoiler title='Hint' collapse_link='true']\nSort the list of people using a function that compares two dictionaries.\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n[/spoiler]\n\n[spoiler title='Explanation']\n\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n[/spoiler]\n\n",
        "name": "Leaderboard",
        "title": "11.6 Leaderboard",
        "id": "6",
        "problemStatement": "### 11.6 Leaderboard\n\nYou are given an array of dictionaries. Each dictionary in the array describes the score of a person. Print the leaderboard in the following format:\n\n```\n1. full name - score\n2. ...\n...\n```\n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "1. full name - score\n2. ...\n...\n",
            "text": "```\n1. full name - score\n2. ...\n...\n```\n",
            "language": "undefined"
          },
          {
            "type": "code",
            "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n",
            "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n",
                "text": "```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\n",
              "Output": "```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Sort the list of people using a function that compares two dictionaries.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nSort the list of people using a function that compares two dictionaries.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\nOutput:\n```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n",
                "text": "```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n```\n\n",
              "Output": "```\n1. Garry Mckenzie - 23\n2. Noel Bowen - 16\n3. Calvin Newton - 13\n4. Leah Rivera - 10\n5. Sonja Moreno - 3\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Sort the list of people using a function that compares two dictionaries.\n",
            "text": "[spoiler title='Hint' collapse_link='true']\nSort the list of people using a function that compares two dictionaries.\n[/spoiler]\n",
            "params": {
              "title": "Hint",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']\n```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n[/spoiler]\n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n",
                "text": "```swift\nvar people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\nfunc compareScores(first: [String:Any], second: [String:Any]) -> Bool {\n    if let a = first[\"score\"] as? Int {\n        if let b = second[\"score\"] as? Int {\n            return a > b\n        }\n    }\n    return false\n}\n\npeople.sortInPlace(compareScores)\n\nfor (index, person) in people.enumerate() {\n    if let firstName = person[\"firstName\"] as? String {\n        if let lastName = person[\"lastName\"] as? String  {\n            if let score = person[\"score\"] as? Int {\n                print(\"\\(index + 1). \\(firstName) \\(lastName) - \\(score)\")\n            }\n        }\n    }\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n",
            "text": "[spoiler title='Explanation']\n\nFirst we'll want to sort our people array using a custom comparison function. This function will compare the people's scores and sort them in descending order. After we have the people array sorted in descending order by score we want to iterate over the people array and print the data in the corresponding format.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_6",
        "compileCode": true,
        "code": "var people: [[String:Any]] = [\n    [\n        \"firstName\": \"Calvin\",\n        \"lastName\": \"Newton\",\n        \"score\": 13\n    ],\n    [\n        \"firstName\": \"Garry\",\n        \"lastName\": \"Mckenzie\",\n        \"score\": 23\n    ],\n    [\n        \"firstName\": \"Leah\",\n        \"lastName\": \"Rivera\",\n        \"score\": 10\n    ],\n    [\n        \"firstName\": \"Sonja\",\n        \"lastName\": \"Moreno\",\n        \"score\": 3\n    ],\n    [\n        \"firstName\": \"Noel\",\n        \"lastName\": \"Bowen\",\n        \"score\": 16\n    ]\n]\n\n// your code here\n",
        "misc": [

        ]
      },
      {
        "type": "exercise",
        "content": "### 11.7 Frequency\n\nYou are given an array of integers. Find out the frequency of each one.  \nThe frequency of a number is the number of times it appears in the array.  \nPrint the numbers in ascending order followed by their frequency.  \n\n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse a dictionary to keep track of the frequency.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nKeep track of all the unique numbers of the array\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n[/spoiler]  \n\n[spoiler title='Explanation']\n\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n[/spoiler]\n\n",
        "text": "### 11.7 Frequency\n\nYou are given an array of integers. Find out the frequency of each one.  \nThe frequency of a number is the number of times it appears in the array.  \nPrint the numbers in ascending order followed by their frequency.  \n\n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n\n// your code here\n```\n\n[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n[/spoiler]\n\n[spoiler title='Hint 1' collapse_link='true']\nUse a dictionary to keep track of the frequency.\n[/spoiler]\n\n[spoiler title='Hint 2' collapse_link='true']\nKeep track of all the unique numbers of the array\n[/spoiler]\n\n[spoiler title='Solution' collapse_link='true']  \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n[/spoiler]  \n\n[spoiler title='Explanation']\n\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n[/spoiler]\n\n",
        "name": "Frequency",
        "title": "11.7 Frequency",
        "id": "7",
        "problemStatement": "### 11.7 Frequency\n\nYou are given an array of integers. Find out the frequency of each one.  \nThe frequency of a number is the number of times it appears in the array.  \nPrint the numbers in ascending order followed by their frequency.  \n\n\n\n\n\n\n\n",
        "codes": [
          {
            "type": "code",
            "content": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n\n// your code here\n",
            "text": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n\n// your code here\n```\n",
            "language": "swift"
          }
        ],
        "spoilers": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n",
                "text": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1 2\n2 6\n3 3\n4 1\n5 1\n",
                "text": "```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\n",
              "Output": "```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          },
          {
            "type": "spoiler",
            "content": "Use a dictionary to keep track of the frequency.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse a dictionary to keep track of the frequency.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Keep track of all the unique numbers of the array\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nKeep track of all the unique numbers of the array\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n[/spoiler]  \n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n",
                "language": "swift"
              }
            ]
          },
          {
            "type": "spoiler",
            "content": "\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "chapterId": "11",
        "compileSolution": true,
        "examples": [
          {
            "type": "spoiler",
            "content": "Input: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n",
            "text": "[spoiler title='Example' collapse_link='true']  \nInput: \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\nOutput:\n```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n[/spoiler]\n",
            "params": {
              "title": "Example",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n",
                "text": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n",
                "language": "swift"
              },
              {
                "type": "code",
                "content": "1 2\n2 6\n3 3\n4 1\n5 1\n",
                "text": "```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n",
                "language": "undefined"
              }
            ],
            "sections": {
              "Input": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n```\n\n",
              "Output": "```\n1 2\n2 6\n3 3\n4 1\n5 1\n```\n\n"
            },
            "section_titles": [
              "Input",
              "Output"
            ]
          }
        ],
        "hints": [
          {
            "type": "spoiler",
            "content": "Use a dictionary to keep track of the frequency.\n",
            "text": "[spoiler title='Hint 1' collapse_link='true']\nUse a dictionary to keep track of the frequency.\n[/spoiler]\n",
            "params": {
              "title": "Hint 1",
              "collapse_link": "true"
            }
          },
          {
            "type": "spoiler",
            "content": "Keep track of all the unique numbers of the array\n",
            "text": "[spoiler title='Hint 2' collapse_link='true']\nKeep track of all the unique numbers of the array\n[/spoiler]\n",
            "params": {
              "title": "Hint 2",
              "collapse_link": "true"
            }
          }
        ],
        "solutions": [
          {
            "type": "spoiler",
            "content": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n",
            "text": "[spoiler title='Solution' collapse_link='true']  \n```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n[/spoiler]  \n",
            "params": {
              "title": "Solution",
              "collapse_link": "true"
            },
            "codes": [
              {
                "type": "code",
                "content": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n",
                "text": "```swift\nvar numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2]\n\nvar frequency: [Int:Int] = [:]\nvar uniqueNumbers: [Int] = []\n\nfor number in numbers {\n    if let oldFr = frequency[number] {\n        frequency[number] = oldFr + 1\n    } else {\n        uniqueNumbers.append(number)\n        frequency[number] = 1\n    }\n}\n\nuniqueNumbers.sortInPlace(<)\n\nfor number in uniqueNumbers {\n    print(\"\\(number) \\(frequency[number]!)\")\n}\n```\n",
                "language": "swift"
              }
            ]
          }
        ],
        "explanations": [
          {
            "type": "spoiler",
            "content": "\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n",
            "text": "[spoiler title='Explanation']\n\nWe are going to use a dictionary `[Int -> Int]` to store the frequency of each number. When we first find a number we initialize it's count with 1 and then we increase it each time. We also use an array of [Int] to uniquely keep track of each number we find. To get the numbers in ascending order followed by their frequency we sort the array of unique numbers.\n\n[/spoiler]\n",
            "params": {
              "title": "Explanation"
            }
          }
        ],
        "playgroundName": "Exercise11_7",
        "compileCode": true,
        "code": "var numbers = [1, 2, 3, 2, 3, 5, 2, 1, 3, 4, 2, 2, 2] \n\n// your code here\n",
        "misc": [

        ]
      }
    ]
  }
]